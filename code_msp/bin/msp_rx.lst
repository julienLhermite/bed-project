
bin/msp_rx.elf:     file format elf32-msp430

SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000afce l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
0000028e l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 msp_rx.c
00000200 l     O .bss	00000002 node_id
00000202 l     O .bss	0000000e timer
00000210 l     O .bss	00000002 led_green_duration
00000212 l     O .bss	00000002 led_green_flag
00000214 l     O .bss	00000002 led_red_duration
00000216 l     O .bss	00000002 led_red_flag
00000218 l     O .bss	00000002 periodic_write_flag
0000021a l     O .bss	00000002 periodic_temp_flag
0000021c l     O .bss	00000002 current_buffer_pt
0000021e l     O .bss	00000002 uart_flag
00000220 l     O .bss	00000002 uart_data
00000222 l     O .bss	00000002 room_flag
00000224 l     O .bss	00000001 room
0000818a l     F .text	0000004c printhex
000081d6 l     F .text	00000076 set_node_id
0000824c l     F .text	00000278 converter
000084c4 l     F .text	0000001c led_green_blink
000084e0 l     F .text	0000001c led_red_blink
000084fc l     F .text	00000086 thread_led_green
00008582 l     F .text	000000b4 thread_led_red
000086fa l     F .text	0000007a thread_uart
00000226 l     O .bss	0000001c radio_tx_buffer
00000242 l     O .bss	0000001c radio_rx_buffer
0000025e l     O .bss	00000002 radio_rx_flag
000088aa l     F .text	00000064 thread_rx
0000890e l     F .text	00000050 init_message
0000895e l     F .text	00000028 write_message
00008986 l     F .text	0000008e thread_periodic_writeTemp
00008a14 l     F .text	0000004c register_temperature
00008a60 l     F .text	0000008a thread_periodic_temperature
00000260 l     O .bss	0000000a pt
00008116 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 adc10.c
0000026a l     O .bss	00000002 coeff_1
0000026c l     O .bss	00000002 coeff_2
00000000 l    df *ABS*	00000000 cc2500.c
00008ce8 l     F .text	00000016 CC2500_HW_GDO0_IRQ_ON_ASSERT
00008cfe l     F .text	00000016 CC2500_HW_GDO2_IRQ_ON_ASSERT
00008d14 l     F .text	00000016 CC2500_HW_GDO0_DINT
00008d2a l     F .text	00000016 CC2500_HW_GDO2_DINT
00008d40 l     F .text	00000016 CC2500_HW_GDO0_EINT
00008d56 l     F .text	00000016 CC2500_HW_GDO0_CLEAR_FLAG
00008d6c l     F .text	00000016 CC2500_HW_GDO2_CLEAR_FLAG
00008d82 l     F .text	00000016 CONFIG_GDO0_PIN_AS_INPUT
00008d98 l     F .text	00000052 CC2500_HW_INIT
000090d0 l     F .text	00000048 cc2500_check_tx_underflow
00009118 l     F .text	0000004a cc2500_check_rx_overflow
00000000 l    df *ABS*	00000000 clock.c
00000272 l     O .bss	00000002 mclk_freq_mhz
0000998a l     F .text	000000c0 set_mcu_speed
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 timer.c
00000274 l     O .bss	00000002 timerA_cb
00000276 l     O .bss	00000002 timerA_wakeup
00000278 l     O .bss	00000002 timerB_cb
0000027a l     O .bss	00000002 timerB_wakeup
00000000 l    df *ABS*	00000000 uart.c
0000027c l     O .bss	00000002 uart_cb
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 watchdog.c
0000027e l     O .bss	00000002 watchdog_backup
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
0000a57e l     F .text	00000022 append
00000282 l     O .bss	00000002 available_
00000280 l     O .bss	00000002 destination_
0000a5a0 l     F .text	0000003c call_vuprintf
00000000 l    df *ABS*	00000000 vuprintf.c
0000a63a l     F .text	00000198 print_field
00000000 l    df *ABS*	00000000 puts.c
0000a142 g     F .text	00000032 putchar
00000057 g       *ABS*	00000000 __BCSCTL1
00009af4 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_16MHz
00000284 g     O .bss	00000001 cc2500_gdo2_cfg
00000174 g       *ABS*	00000000 __TACCR1
00009744 g     F .text	00000024 cc2500_idle
00000000 g       *ABS*	00000000 __data_size
00008116  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
000097b8 g     F .text	0000001a cc2500_variables_bootstrap
00009acc g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_3MHz
00000024 g       *ABS*	00000000 __P1IES
00008b58 g     F .text	000000ce adc10_sample_temp
0000004b g       *ABS*	00000000 __ADC10AE1
000098e2 g     F .text	0000009a port2_irq_handler
0000a560 g     F .text	00000010 printf
00000069 g       *ABS*	00000000 __UCB0CTL1
0000a612 g     F .text	00000016 vsprintf
0000a40a g       .text	00000000 __ext_divmod16
00008116  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00009eb6 g     F .text	00000016 spi_select_radio
00000060 g       *ABS*	00000000 __UCA0CTL0
000094c0 g     F .text	0000006a cc2500_utx
0000a284 g     F .text	00000064 flash_write_byte
00009a6e g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_4MHz
0000a012 g     F .text	00000018 timerB_register_cb
0000012e g       *ABS*	00000000 __TAIV
00009e0c g     F .text	00000012 spi_check_miso_high
0000a5f8 g     F .text	0000001a snprintf
0000a138 g     F .text	0000000a uart_stop
00008e2c g     F .text	0000002e CC2500_SPI_WREG
00000270 g     O .bss	00000001 cc2500_rx_length
00000000 g       .vectors	00000000 _efartext
00009dd2 g     F .text	0000003a spi_tx_rx
0000a444 g     F .text	00000000 __udivhi3
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00008fe2 g     F .text	0000001e CC2500_SPI_RX_FIFO_BYTE
0000b140 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
00009ee0 g     F .text	00000038 Timer_A
000097e4 g     F .text	000000dc cc2500_init
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
000096c0 g     F .text	00000018 cc2500_rx_register_cb
0000a38a g     F .text	00000022 flash_erase_info_memory
0000001d g       *ABS*	00000000 __P4OUT
0000008e g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
00009b44 g     F .text	00000010 loop_4_cycles
00008000  w      .text	00000000 __watchdog_support
00009074 g     F .text	00000030 cc2500_gdo2_set_signal
00008110  w      .text	00000000 __stop_progExec__
0000a466 g     F .text	000000fa memcpy
0000002d g       *ABS*	00000000 __P2IE
0000ae70 g     F .text	0000002c puts
0000a192 g     F .text	00000014 uart_eint
00008f80 g     F .text	00000062 CC2500_SPI_RX_BURST
00000192 g       *ABS*	00000000 __TBCCR0
00008116  w      .text	00000000 __isr_11
00009ecc g     F .text	00000014 spi_deselect_radio
00000186 g       *ABS*	00000000 __TBCCTL2
00009ab8 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_6MHz
0000ae9c g     F .text	00000000 __udivsi3
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00009d62 g     F .text	00000062 spi_init
0000a09a g     F .text	0000000e timerB_stop
0000a628 g     F .text	00000012 vsnprintf
00000049 g       *ABS*	00000000 __ADC10DTC1
00008f2a g     F .text	00000056 CC2500_SPI_TX_BURST
0000026e g     O .bss	00000001 cc2500_rx_offset
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
00008b48 g     F .text	00000010 adc10irq
00009a92 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_1MHz
0000af8e g       .text	00000000 __udivmoddi4
000094a4 g     F .text	0000001c cc2500_calibrate
00009b1c g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_4MHz
000090a4 g     F .text	0000002c cc2500_set_fifo_threshold
00008dea g     F .text	00000020 CC2500_SPI_TX
00000182 g       *ABS*	00000000 __TBCCTL0
00009000 g     F .text	00000044 cc2500_wait_status
00009588 g     F .text	00000138 cc2500_rx_pkt_eop
0000006d g       *ABS*	00000000 __UCB0STAT
00008b48 g       .text	00000000 __isr_5
00008e5a g     F .text	00000036 CC2500_SPI_RREG
00008b00 g     F .text	00000032 adc10_calibrate
00000063 g       *ABS*	00000000 __UCA0BR1
0000af60 g     F .text	00000000 __umoddi3
0000b140 g       *ABS*	00000000 __data_load_start
00009d1a g     F .text	00000016 leds_on
00008116 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
000096d8 g     F .text	0000001e cc2500_packet_status
00009cb2 g     F .text	00000014 led_green_switch
0000a34c g     F .text	0000003e flash_erase_segment
000001bc g       *ABS*	00000000 __ADC10SA
0000a238 g     F .text	0000004c flash_init
00000166 g       *ABS*	00000000 __TACCTL2
00008168 g     F .text	00000022 timer_reached
0000af3a g     F .text	00000000 __udivdi3
00000065 g       *ABS*	00000000 __UCA0STAT
00009c88 g     F .text	00000016 led_green_off
00009768 g     F .text	00000012 cc2500_sleep
000096f6 g     F .text	00000030 cc2500_cca
00008116  w      .text	00000000 __isr_2
00000160 g       *ABS*	00000000 __TACTL
0000a43c g     F .text	00000000 __modhi3
0000012c g       *ABS*	00000000 __FCTL3
00009f2e g     F .text	00000018 timerA_register_cb
00008116  w      .text	00000000 __isr_10
00000286 g     O .bss	00000002 radio_rx_cb
0000997c g     F .text	0000000e get_mclk_freq_mhz
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
00009f92 g     F .text	00000024 timerA_start_milliseconds
00009a80 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_2MHz
00008ef4 g     F .text	00000036 CC2500_SPI_RX_BYTE
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
000000c3 g       *ABS*	00000000 __OA1CTL1
00000023 g       *ABS*	00000000 __P1IFG
00009e1e g     F .text	0000004a spi_tx_burst
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
00009cdc g     F .text	00000014 led_red_on
00000172 g       *ABS*	00000000 __TACCR0
00009d04 g     F .text	00000016 leds_off
00000056 g       *ABS*	00000000 __DCOCTL
00000003 g       *ABS*	00000000 __IFG2
0000028e g     O .noinit	00000002 __wdt_clear_value
00008774 g     F .text	00000048 radio_cb
0000a174 g     F .text	0000001e uart_getchar
0000001b g       *ABS*	00000000 __P3SEL
00009fb6 g     F .text	0000000e timerA_stop
00009792 g     F .text	00000026 cc2500_wakeup
0000a1e4 g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
0000aed2 g     F .text	00000000 __umodsi3
000097d2 g     F .text	00000012 CC_ASSERT
0000a570 g     F .text	0000000e vprintf
00000028 g       *ABS*	00000000 __P2IN
00009f46 g     F .text	00000018 timerA_set_wakeup
00000118 g       *ABS*	00000000 __UCB0I2COA
00000184 g       *ABS*	00000000 __TBCCTL1
000001b4 g       *ABS*	00000000 __ADC10MEM
00000288 g     O .bss	00000001 cc2500_gdo0_cfg
00009cc6 g     F .text	00000016 led_red_off
0000a45e g     F .text	00000000 __umodhi3
000087bc g     F .text	000000ee ezdisplay
00008116  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00000064 g       *ABS*	00000000 __UCA0MCTL
00009e68 g     F .text	0000004e spi_rx_burst
0000a0a8 g     F .text	00000090 uart_init
00008028  w      .text	00000000 __do_clear_bss
0000a1a6 g     F .text	00000016 uart_dint
00008636 g     F .text	000000c4 uart_cb
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
00009b08 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_8MHz
0000a3ac g     F .text	0000001c watchdog_stop
00009a4a g     F .text	00000012 set_mcu_speed_dco_mclk_1MHz_smclk_1MHz
00009ae0 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz
00008b32 g     F .text	00000016 adc10_stop
0000ae9c g       .text	00000000 __ext_udivmod32
00009ffc g     F .text	00000016 timerB_init
00009044 g     F .text	00000030 cc2500_gdo0_set_signal
00000027 g       *ABS*	00000000 __P1REN
0000a3de g       .text	00000000 __mulsi3
0000a1bc g     F .text	00000028 uart_register_cb
000000c0 g       *ABS*	00000000 __OA0CTL0
00009558 g     F .text	00000030 cc2500_rx_enter
00009b30 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_2MHz
0000afcc  w      .text	00000000 _unexpected_
00008116  w      .text	00000000 __isr_8
000098e2 g       .text	00000000 __isr_3
0000a7d2 g     F .text	0000069e vuprintf
00009cf0 g     F .text	00000014 led_red_switch
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
0000a40a g     F .text	00000000 __divhi3
0000a444 g       .text	00000000 __ext_udivmod16
00008000  w      .text	00000000 _reset_vector__
00008116 g       .text	00000000 __ctors_start
0000aedc g       .text	00000000 __xabi_udivmod64
00008116  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
00000018 g       *ABS*	00000000 __P3IN
00008010  w      .text	00000000 __do_copy_data
00000200 g       .bss	00000000 __bss_start
0000803e g     F .text	000000d2 main
00000176 g       *ABS*	00000000 __TACCR2
00009bfa g     F .text	0000008e delay_ms
000000c2 g       *ABS*	00000000 __OA1CTL0
00009fc4 g       .text	00000000 __isr_13
00009b54 g     F .text	000000a6 delay_usec
00000170 g       *ABS*	00000000 __TAR
0000001e g       *ABS*	00000000 __P4DIR
00009f18 g     F .text	00000016 timerA_init
0000a1e4 g     F .text	00000054 usart0irq
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
0000a02a g     F .text	00000018 timerB_set_wakeup
0000002a g       *ABS*	00000000 __P2DIR
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
00008c26 g     F .text	000000c2 adc10_sample_avcc
0000a5dc g     F .text	0000001c sprintf
00009fc4 g     F .text	00000038 Timer_B
00009726 g     F .text	0000001e cc2500_get_rssi
0000977a g     F .text	00000018 cc2500_reset
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
00008e90 g     F .text	00000036 CC2500_SPI_ROREG
0000b114 g     O .rodata	00000024 rfSettings_default_config
00009ee0 g       .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000800c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
00009f5e g     F .text	00000034 timerA_start_ticks
00000019 g       *ABS*	00000000 __P3OUT
000000c1 g       *ABS*	00000000 __OA0CTL1
00009aa4 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_12MHz
00008e0a g     F .text	00000022 CC2500_SPI_STROBE
00008116 g       .text	00000000 __dtors_start
00008116  w      .text	00000000 __isr_6
00008116 g       .text	00000000 __ctors_end
00000062 g       *ABS*	00000000 __UCA0BR0
00000600 g       *ABS*	00000000 __stack
00009a5c g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_8MHz
00008116  w      .text	00000000 __isr_1
00000200 g       .rodata	00000000 _edata
00000290 g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
0000028a g     O .bss	00000002 cc2500_rx_packet
00000048 g       *ABS*	00000000 __ADC10DTC0
0000011e g       *ABS*	00000000 __TBIV
000001b2 g       *ABS*	00000000 __ADC10CTL1
0000028c g     O .bss	00000001 cc2500_status_register
00009c9e g     F .text	00000014 led_green_on
0000918c g     F .text	000002f8 cc2500_configure
0000811a g     F .text	0000004e timer_tick_cb
0000a3c8 g     F .text	00000016 watchdog_restore
00000058 g       *ABS*	00000000 __BCSCTL2
00008110  w      .text	00000000 _endless_loop__
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
00009484 g     F .text	00000020 cc2500_set_channel
0000952a g     F .text	0000002e cc2500_rx_register_buffer
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
00000164 g       *ABS*	00000000 __TACCTL1
0000006f g       *ABS*	00000000 __UCB0TXBUF
0000a042 g     F .text	00000034 timerB_start_ticks
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
00008010  w      .text	00000000 __low_level_init
00000011 g       *ABS*	00000000 __P4REN
00008aea g     F .text	00000016 adc10_start
00000200 g       .rodata	00000000 __data_start
0000a076 g     F .text	00000024 timerB_start_milliseconds
000098c0 g     F .text	00000022 cc2500_gdox_signal_handler
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
00008ec6 g     F .text	0000002e CC2500_SPI_TX_BYTE
00009162 g     F .text	0000002a cc2500_check_fifo_xflow_flush
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00009dc4 g     F .text	0000000e spi_clear_rx_IFG
0000a2e8 g     F .text	00000064 flash_write_word
00009d30 g     F .text	00000032 leds_init



Disassembly of section .text:

00008000 <__watchdog_support>:
    8000:	55 42 20 01 	mov.b	&0x0120,r5	
    8004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    8008:	82 45 8e 02 	mov	r5,	&0x028e	

0000800c <__init_stack>:
    800c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

00008010 <__do_copy_data>:
    8010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    8014:	0f 93       	tst	r15		
    8016:	08 24       	jz	$+18     	;abs 0x8028
    8018:	92 42 8e 02 	mov	&0x028e,&0x0120	
    801c:	20 01 
    801e:	2f 83       	decd	r15		
    8020:	9f 4f 40 b1 	mov	-20160(r15),512(r15);0xb140(r15), 0x0200(r15)
    8024:	00 02 
    8026:	f8 23       	jnz	$-14     	;abs 0x8018

00008028 <__do_clear_bss>:
    8028:	3f 40 8e 00 	mov	#142,	r15	;#0x008e
    802c:	0f 93       	tst	r15		
    802e:	07 24       	jz	$+16     	;abs 0x803e
    8030:	92 42 8e 02 	mov	&0x028e,&0x0120	
    8034:	20 01 
    8036:	1f 83       	dec	r15		
    8038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    803c:	f9 23       	jnz	$-12     	;abs 0x8030

0000803e <main>:

#define NUM_PT 5
static struct pt pt[NUM_PT];

int main(void)
{
    803e:	04 41       	mov	r1,	r4	
    8040:	24 53       	incd	r4		
    8042:	21 83       	decd	r1		
    watchdog_stop();
    8044:	b0 12 ac a3 	call	#0xa3ac	

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    8048:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    804c:	09 3c       	jmp	$+20     	;abs 0x8060
    {
        PT_INIT(&pt[i]);
    804e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8052:	0f 5f       	rla	r15		
    8054:	3f 50 60 02 	add	#608,	r15	;#0x0260
    8058:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
{
    watchdog_stop();

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    805c:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8060:	b4 90 05 00 	cmp	#5,	-4(r4)	;#0x0005, 0xfffc(r4)
    8064:	fc ff 
    8066:	f3 3b       	jl	$-24     	;abs 0x804e
    {
        PT_INIT(&pt[i]);
    }

    /* clock init */
    set_mcu_speed_dco_mclk_16MHz_smclk_8MHz();
    8068:	b0 12 08 9b 	call	#0x9b08	

    /* LEDs init */
    leds_init();
    806c:	b0 12 30 9d 	call	#0x9d30	
    led_green_flag = 0;
    8070:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    led_red_flag = 0;
    8074:	82 43 16 02 	mov	#0,	&0x0216	;r3 As==00

    /* timer init */
    timerA_init();
    8078:	b0 12 18 9f 	call	#0x9f18	
    timerA_register_cb(&timer_tick_cb);
    807c:	3f 40 1a 81 	mov	#-32486,r15	;#0x811a
    8080:	b0 12 2e 9f 	call	#0x9f2e	
    timerA_start_milliseconds(TIMER_PERIOD_MS);
    8084:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8088:	b0 12 92 9f 	call	#0x9f92	

    /* UART init (serial link) */
    uart_init(UART_9600_SMCLK_8MHZ);
    808c:	3f 42       	mov	#8,	r15	;r2 As==11
    808e:	b0 12 a8 a0 	call	#0xa0a8	
    uart_register_cb(uart_cb);
    8092:	3f 40 36 86 	mov	#-31178,r15	;#0x8636
    8096:	b0 12 bc a1 	call	#0xa1bc	
    uart_flag = 0;
    809a:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    uart_data = 0x0000;
    809e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
    room = 0;
    80a2:	c2 43 24 02 	mov.b	#0,	&0x0224	;r3 As==00
    room_flag = 0;
    80a6:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00

    /* ADC10 init (temperature) */
    adc10_start();
    80aa:	b0 12 ea 8a 	call	#0x8aea	

    /* radio init */
    
    spi_init();
    80ae:	b0 12 62 9d 	call	#0x9d62	
    cc2500_init();
    80b2:	b0 12 e4 97 	call	#0x97e4	
    cc2500_rx_register_buffer(radio_tx_buffer, PKTLEN);
    80b6:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    80ba:	3f 40 26 02 	mov	#550,	r15	;#0x0226
    80be:	b0 12 2a 95 	call	#0x952a	
    cc2500_rx_register_cb(radio_cb);
    80c2:	3f 40 74 87 	mov	#-30860,r15	;#0x8774
    80c6:	b0 12 c0 96 	call	#0x96c0	
    cc2500_rx_enter();
    80ca:	b0 12 58 95 	call	#0x9558	
    radio_rx_flag = 0;
    80ce:	82 43 5e 02 	mov	#0,	&0x025e	;r3 As==00
    
    __enable_interrupt();
    80d2:	32 d2       	eint			


    //Connection init
    uart_flag = 0;
    80d4:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    periodic_write_flag=1;
    80d8:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
    periodic_temp_flag=1;
    80dc:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    set_node_id(0);
    80e0:	0f 43       	clr	r15		
    80e2:	b0 12 d6 81 	call	#0x81d6	

    /* simple cycle scheduling */
    while(1) {
      thread_led_red(&pt[0]);
    80e6:	3f 40 60 02 	mov	#608,	r15	;#0x0260
    80ea:	b0 12 82 85 	call	#0x8582	
      thread_uart(&pt[1]);//for setting node ID
    80ee:	3f 40 62 02 	mov	#610,	r15	;#0x0262
    80f2:	b0 12 fa 86 	call	#0x86fa	
      thread_rx(&pt[2]); //for writing on ezconsole reception temp
    80f6:	3f 40 64 02 	mov	#612,	r15	;#0x0264
    80fa:	b0 12 aa 88 	call	#0x88aa	
      thread_periodic_temperature(&pt[3]);//for sampling temp
    80fe:	3f 40 66 02 	mov	#614,	r15	;#0x0266
    8102:	b0 12 60 8a 	call	#0x8a60	
      thread_periodic_writeTemp(&pt[4]);//for writing own temp on ezconsole
    8106:	3f 40 68 02 	mov	#616,	r15	;#0x0268
    810a:	b0 12 86 89 	call	#0x8986	
    }
    810e:	eb 3f       	jmp	$-40     	;abs 0x80e6

00008110 <__stop_progExec__>:
    8110:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    8114:	fd 3f       	jmp	$-4      	;abs 0x8110

00008116 <__ctors_end>:
    8116:	30 40 cc af 	br	#0xafcc	

0000811a <timer_tick_cb>:
 * Timer
 */

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    811a:	04 12       	push	r4		
    811c:	04 41       	mov	r1,	r4	
    811e:	24 53       	incd	r4		
    8120:	21 83       	decd	r1		
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8122:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8126:	19 3c       	jmp	$+52     	;abs 0x815a
    {
        if(timer[i] != UINT_MAX) {
    8128:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    812c:	0f 5f       	rla	r15		
    812e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8132:	2f 4f       	mov	@r15,	r15	
    8134:	3f 93       	cmp	#-1,	r15	;r3 As==11
    8136:	0f 24       	jz	$+32     	;abs 0x8156
            timer[i]++;
    8138:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    813c:	0f 5f       	rla	r15		
    813e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8142:	2f 4f       	mov	@r15,	r15	
    8144:	0e 4f       	mov	r15,	r14	
    8146:	1e 53       	inc	r14		
    8148:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    814c:	0f 5f       	rla	r15		
    814e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8152:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8156:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    815a:	b4 90 07 00 	cmp	#7,	-4(r4)	;#0x0007, 0xfffc(r4)
    815e:	fc ff 
    8160:	e3 3b       	jl	$-56     	;abs 0x8128
    {
        if(timer[i] != UINT_MAX) {
            timer[i]++;
        }
    }
}
    8162:	21 53       	incd	r1		
    8164:	34 41       	pop	r4		
    8166:	30 41       	ret			

00008168 <timer_reached>:

int timer_reached(uint16_t timer, uint16_t count) {
    8168:	04 12       	push	r4		
    816a:	04 41       	mov	r1,	r4	
    816c:	24 53       	incd	r4		
    816e:	21 82       	sub	#4,	r1	;r2 As==10
    8170:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8174:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    return (timer >= count);
    8178:	1f 43       	mov	#1,	r15	;r3 As==01
    817a:	94 94 fc ff 	cmp	-4(r4),	-6(r4)	;0xfffc(r4), 0xfffa(r4)
    817e:	fa ff 
    8180:	01 2c       	jc	$+4      	;abs 0x8184
    8182:	0f 43       	clr	r15		
}
    8184:	21 52       	add	#4,	r1	;r2 As==10
    8186:	34 41       	pop	r4		
    8188:	30 41       	ret			

0000818a <printhex>:

static void printhex(char *buffer, unsigned int len)
{
    818a:	04 12       	push	r4		
    818c:	04 41       	mov	r1,	r4	
    818e:	24 53       	incd	r4		
    8190:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8194:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8198:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    unsigned int i;
    for(i = 0; i < len; i++)
    819c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    81a0:	0e 3c       	jmp	$+30     	;abs 0x81be
    {
        printf("%02X ", buffer[i]);
    81a2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    81a6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    81aa:	6f 4f       	mov.b	@r15,	r15	
    81ac:	8f 11       	sxt	r15		
    81ae:	0f 12       	push	r15		
    81b0:	30 12 ce af 	push	#-20530	;#0xafce
    81b4:	b0 12 60 a5 	call	#0xa560	
    81b8:	21 52       	add	#4,	r1	;r2 As==10
}

static void printhex(char *buffer, unsigned int len)
{
    unsigned int i;
    for(i = 0; i < len; i++)
    81ba:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    81be:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    81c2:	f8 ff 
    81c4:	ee 2b       	jnc	$-34     	;abs 0x81a2
    {
        printf("%02X ", buffer[i]);
    }
    printf("\n");
    81c6:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    81ca:	b0 12 42 a1 	call	#0xa142	
}
    81ce:	31 50 06 00 	add	#6,	r1	;#0x0006
    81d2:	34 41       	pop	r4		
    81d4:	30 41       	ret			

000081d6 <set_node_id>:

/* returns 1 if the id was expected and set, 0 otherwise */
static void set_node_id(unsigned int id)
{
    81d6:	04 12       	push	r4		
    81d8:	04 41       	mov	r1,	r4	
    81da:	24 53       	incd	r4		
    81dc:	21 83       	decd	r1		
    81de:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    TIMER_ID_INPUT = UINT_MAX;
    81e2:	b2 43 06 02 	mov	#-1,	&0x0206	;r3 As==11
    if(id!=0){
    81e6:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    81ea:	20 24       	jz	$+66     	;abs 0x822c
        if(flash_write_byte((unsigned char *) NODE_ID_LOCATION, id) != 0)
    81ec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    81f0:	4f 4f       	mov.b	r15,	r15	
    81f2:	4e 4f       	mov.b	r15,	r14	
    81f4:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81f8:	b0 12 84 a2 	call	#0xa284	
    81fc:	0f 93       	tst	r15		
    81fe:	23 24       	jz	$+72     	;abs 0x8246
        {
            flash_erase_segment((unsigned int *) NODE_ID_LOCATION);
    8200:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8204:	b0 12 4c a3 	call	#0xa34c	
            flash_write_word((unsigned int *) NODE_ID_LOCATION, id);
    8208:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    820c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8210:	b0 12 e8 a2 	call	#0xa2e8	
            node_id = id;
    8214:	92 44 fc ff 	mov	-4(r4),	&0x0200	;0xfffc(r4)
    8218:	00 02 
            printf("node id set to: %x\n", node_id);
    821a:	1f 42 00 02 	mov	&0x0200,r15	
    821e:	0f 12       	push	r15		
    8220:	30 12 d4 af 	push	#-20524	;#0xafd4
    8224:	b0 12 60 a5 	call	#0xa560	
    8228:	21 52       	add	#4,	r1	;r2 As==10
    822a:	0d 3c       	jmp	$+28     	;abs 0x8246
        }
    } 
    else{
        /* retrieve node id from flash */
        node_id = *((unsigned int *) NODE_ID_LOCATION);
    822c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8230:	2f 4f       	mov	@r15,	r15	
    8232:	82 4f 00 02 	mov	r15,	&0x0200	
        printf("node id retrieved from flash:  %x\n", node_id);
    8236:	1f 42 00 02 	mov	&0x0200,r15	
    823a:	0f 12       	push	r15		
    823c:	30 12 e8 af 	push	#-20504	;#0xafe8
    8240:	b0 12 60 a5 	call	#0xa560	
    8244:	21 52       	add	#4,	r1	;r2 As==10
    }
}
    8246:	21 53       	incd	r1		
    8248:	34 41       	pop	r4		
    824a:	30 41       	ret			

0000824c <converter>:


static int converter(char a, char b){
    824c:	04 12       	push	r4		
    824e:	04 41       	mov	r1,	r4	
    8250:	24 53       	incd	r4		
    8252:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    8256:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    825a:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    825e:	5e 44 fd ff 	mov.b	-3(r4),	r14	;0xfffd(r4)
    8262:	8e 11       	sxt	r14		
    8264:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8268:	8f 11       	sxt	r15		
    826a:	0e 12       	push	r14		
    826c:	0f 12       	push	r15		
    826e:	30 12 0b b0 	push	#-20469	;#0xb00b
    8272:	0f 44       	mov	r4,	r15	
    8274:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    8278:	0f 12       	push	r15		
    827a:	b0 12 dc a5 	call	#0xa5dc	
    827e:	31 52       	add	#8,	r1	;r2 As==11
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8280:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    8284:	30 40 84 84 	br	#0x8484	
        switch(s[i]){
    8288:	0f 44       	mov	r4,	r15	
    828a:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    828e:	1f 54 ee ff 	add	-18(r4),r15	;0xffee(r4)
    8292:	6f 4f       	mov.b	@r15,	r15	
    8294:	8f 11       	sxt	r15		
    8296:	3f 50 d0 ff 	add	#-48,	r15	;#0xffd0
    829a:	3f 90 17 00 	cmp	#23,	r15	;#0x0017
    829e:	f0 2c       	jc	$+482    	;abs 0x8480
    82a0:	0f 5f       	rla	r15		
    82a2:	3f 50 16 b0 	add	#-20458,r15	;#0xb016
    82a6:	2f 4f       	mov	@r15,	r15	
    82a8:	00 4f       	br	r15		
            case '0':
                number[3-i]=0;break;
    82aa:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ae:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82b2:	0f 5f       	rla	r15		
    82b4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82b8:	0e 54       	add	r4,	r14	
    82ba:	0f 5e       	add	r14,	r15	
    82bc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82c0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    82c4:	dd 3c       	jmp	$+444    	;abs 0x8480
            case '1':
                number[3-i]=1;break;
    82c6:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ca:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ce:	0f 5f       	rla	r15		
    82d0:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82d4:	0e 54       	add	r4,	r14	
    82d6:	0f 5e       	add	r14,	r15	
    82d8:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82dc:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
    82e0:	cf 3c       	jmp	$+416    	;abs 0x8480
            case '2':
                number[3-i]=2;break;
    82e2:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82e6:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ea:	0f 5f       	rla	r15		
    82ec:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82f0:	0e 54       	add	r4,	r14	
    82f2:	0f 5e       	add	r14,	r15	
    82f4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82f8:	af 43 00 00 	mov	#2,	0(r15)	;r3 As==10, 0x0000(r15)
    82fc:	c1 3c       	jmp	$+388    	;abs 0x8480
            case '3':
                number[3-i]=3;break;
    82fe:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8302:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8306:	0f 5f       	rla	r15		
    8308:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    830c:	0e 54       	add	r4,	r14	
    830e:	0f 5e       	add	r14,	r15	
    8310:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8314:	bf 40 03 00 	mov	#3,	0(r15)	;#0x0003, 0x0000(r15)
    8318:	00 00 
    831a:	b2 3c       	jmp	$+358    	;abs 0x8480
            case '4':
                number[3-i]=4;break;
    831c:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8320:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8324:	0f 5f       	rla	r15		
    8326:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    832a:	0e 54       	add	r4,	r14	
    832c:	0f 5e       	add	r14,	r15	
    832e:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8332:	af 42 00 00 	mov	#4,	0(r15)	;r2 As==10, 0x0000(r15)
    8336:	a4 3c       	jmp	$+330    	;abs 0x8480
            case '5':
                number[3-i]=5;break;
    8338:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    833c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8340:	0f 5f       	rla	r15		
    8342:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8346:	0e 54       	add	r4,	r14	
    8348:	0f 5e       	add	r14,	r15	
    834a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    834e:	bf 40 05 00 	mov	#5,	0(r15)	;#0x0005, 0x0000(r15)
    8352:	00 00 
    8354:	95 3c       	jmp	$+300    	;abs 0x8480
            case '6':
                number[3-i]=6;break;
    8356:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    835a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    835e:	0f 5f       	rla	r15		
    8360:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8364:	0e 54       	add	r4,	r14	
    8366:	0f 5e       	add	r14,	r15	
    8368:	3f 50 06 00 	add	#6,	r15	;#0x0006
    836c:	bf 40 06 00 	mov	#6,	0(r15)	;#0x0006, 0x0000(r15)
    8370:	00 00 
    8372:	86 3c       	jmp	$+270    	;abs 0x8480
            case '7':
                number[3-i]=7;break;
    8374:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8378:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    837c:	0f 5f       	rla	r15		
    837e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8382:	0e 54       	add	r4,	r14	
    8384:	0f 5e       	add	r14,	r15	
    8386:	3f 50 06 00 	add	#6,	r15	;#0x0006
    838a:	bf 40 07 00 	mov	#7,	0(r15)	;#0x0007, 0x0000(r15)
    838e:	00 00 
    8390:	77 3c       	jmp	$+240    	;abs 0x8480
            case '8':
                number[3-i]=8;break;
    8392:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8396:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    839a:	0f 5f       	rla	r15		
    839c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83a0:	0e 54       	add	r4,	r14	
    83a2:	0f 5e       	add	r14,	r15	
    83a4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83a8:	bf 42 00 00 	mov	#8,	0(r15)	;r2 As==11, 0x0000(r15)
    83ac:	69 3c       	jmp	$+212    	;abs 0x8480
            case '9':
                number[3-i]=9;break;
    83ae:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83b2:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83b6:	0f 5f       	rla	r15		
    83b8:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83bc:	0e 54       	add	r4,	r14	
    83be:	0f 5e       	add	r14,	r15	
    83c0:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83c4:	bf 40 09 00 	mov	#9,	0(r15)	;#0x0009, 0x0000(r15)
    83c8:	00 00 
    83ca:	5a 3c       	jmp	$+182    	;abs 0x8480
            case 'A':
                number[3-i]=10;break;
    83cc:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83d0:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83d4:	0f 5f       	rla	r15		
    83d6:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83da:	0e 54       	add	r4,	r14	
    83dc:	0f 5e       	add	r14,	r15	
    83de:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83e2:	bf 40 0a 00 	mov	#10,	0(r15)	;#0x000a, 0x0000(r15)
    83e6:	00 00 
    83e8:	4b 3c       	jmp	$+152    	;abs 0x8480
            case 'B':
                number[3-i]=11;break;
    83ea:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83ee:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83f2:	0f 5f       	rla	r15		
    83f4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83f8:	0e 54       	add	r4,	r14	
    83fa:	0f 5e       	add	r14,	r15	
    83fc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8400:	bf 40 0b 00 	mov	#11,	0(r15)	;#0x000b, 0x0000(r15)
    8404:	00 00 
    8406:	3c 3c       	jmp	$+122    	;abs 0x8480
            case 'C':
                number[3-i]=12;break;
    8408:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    840c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8410:	0f 5f       	rla	r15		
    8412:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8416:	0e 54       	add	r4,	r14	
    8418:	0f 5e       	add	r14,	r15	
    841a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    841e:	bf 40 0c 00 	mov	#12,	0(r15)	;#0x000c, 0x0000(r15)
    8422:	00 00 
    8424:	2d 3c       	jmp	$+92     	;abs 0x8480
            case 'D':
                number[3-i]=13;break;
    8426:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    842a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    842e:	0f 5f       	rla	r15		
    8430:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8434:	0e 54       	add	r4,	r14	
    8436:	0f 5e       	add	r14,	r15	
    8438:	3f 50 06 00 	add	#6,	r15	;#0x0006
    843c:	bf 40 0d 00 	mov	#13,	0(r15)	;#0x000d, 0x0000(r15)
    8440:	00 00 
    8442:	1e 3c       	jmp	$+62     	;abs 0x8480
            case 'E':        
                number[3-i]=14;break;
    8444:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8448:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    844c:	0f 5f       	rla	r15		
    844e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8452:	0e 54       	add	r4,	r14	
    8454:	0f 5e       	add	r14,	r15	
    8456:	3f 50 06 00 	add	#6,	r15	;#0x0006
    845a:	bf 40 0e 00 	mov	#14,	0(r15)	;#0x000e, 0x0000(r15)
    845e:	00 00 
    8460:	0f 3c       	jmp	$+32     	;abs 0x8480
            case 'F':        
                number[3-i]=15;break;
    8462:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8466:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    846a:	0f 5f       	rla	r15		
    846c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8470:	0e 54       	add	r4,	r14	
    8472:	0f 5e       	add	r14,	r15	
    8474:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8478:	bf 40 0f 00 	mov	#15,	0(r15)	;#0x000f, 0x0000(r15)
    847c:	00 00 
    847e:	03 43       	nop			
static int converter(char a, char b){
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8480:	94 53 ee ff 	inc	-18(r4)	;0xffee(r4)
    8484:	a4 92 ee ff 	cmp	#4,	-18(r4)	;r2 As==10, 0xffee(r4)
    8488:	02 34       	jge	$+6      	;abs 0x848e
    848a:	30 40 88 82 	br	#0x8288	
                number[3-i]=14;break;
            case 'F':        
                number[3-i]=15;break;
        }
    }
    return number[0]+number[1]*16+number[2]*16*16+number[3]*16*16*16;
    848e:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    8492:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    8496:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    849a:	0f 5f       	rla	r15		
    849c:	0f 5f       	rla	r15		
    849e:	0f 5f       	rla	r15		
    84a0:	0f 5f       	rla	r15		
    84a2:	0f 5d       	add	r13,	r15	
    84a4:	0f 5f       	rla	r15		
    84a6:	0f 5f       	rla	r15		
    84a8:	0f 5f       	rla	r15		
    84aa:	0f 5f       	rla	r15		
    84ac:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfff6(r4)
    84b0:	0f 5d       	add	r13,	r15	
    84b2:	0f 5f       	rla	r15		
    84b4:	0f 5f       	rla	r15		
    84b6:	0f 5f       	rla	r15		
    84b8:	0f 5f       	rla	r15		
    84ba:	0f 5e       	add	r14,	r15	
    
}
    84bc:	31 50 10 00 	add	#16,	r1	;#0x0010
    84c0:	34 41       	pop	r4		
    84c2:	30 41       	ret			

000084c4 <led_green_blink>:

static int led_green_flag;


static void led_green_blink(int duration)
{
    84c4:	04 12       	push	r4		
    84c6:	04 41       	mov	r1,	r4	
    84c8:	24 53       	incd	r4		
    84ca:	21 83       	decd	r1		
    84cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_green_duration = duration;
    84d0:	92 44 fc ff 	mov	-4(r4),	&0x0210	;0xfffc(r4)
    84d4:	10 02 
    led_green_flag = 1;
    84d6:	92 43 12 02 	mov	#1,	&0x0212	;r3 As==01
}
    84da:	21 53       	incd	r1		
    84dc:	34 41       	pop	r4		
    84de:	30 41       	ret			

000084e0 <led_red_blink>:

static void led_red_blink(int duration)
{
    84e0:	04 12       	push	r4		
    84e2:	04 41       	mov	r1,	r4	
    84e4:	24 53       	incd	r4		
    84e6:	21 83       	decd	r1		
    84e8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_red_duration = duration;
    84ec:	92 44 fc ff 	mov	-4(r4),	&0x0214	;0xfffc(r4)
    84f0:	14 02 
    led_red_flag = 1;
    84f2:	92 43 16 02 	mov	#1,	&0x0216	;r3 As==01
}
    84f6:	21 53       	incd	r1		
    84f8:	34 41       	pop	r4		
    84fa:	30 41       	ret			

000084fc <thread_led_green>:

static PT_THREAD(thread_led_green(struct pt *pt))
{
    84fc:	04 12       	push	r4		
    84fe:	04 41       	mov	r1,	r4	
    8500:	24 53       	incd	r4		
    8502:	21 82       	sub	#4,	r1	;r2 As==10
    8504:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8508:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    850c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8510:	2f 4f       	mov	@r15,	r15	
    8512:	3f 90 de 00 	cmp	#222,	r15	;#0x00de
    8516:	0c 24       	jz	$+26     	;abs 0x8530
    8518:	3f 90 e1 00 	cmp	#225,	r15	;#0x00e1
    851c:	18 24       	jz	$+50     	;abs 0x854e
    851e:	0f 93       	tst	r15		
    8520:	25 20       	jnz	$+76     	;abs 0x856c

    led_green_flag=0;
    8522:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    
    while(1)
      {
        PT_WAIT_UNTIL(pt, led_green_flag);
    8526:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    852a:	bf 40 de 00 	mov	#222,	0(r15)	;#0x00de, 0x0000(r15)
    852e:	00 00 
    8530:	1f 42 12 02 	mov	&0x0212,r15	
    8534:	0f 93       	tst	r15		
    8536:	02 20       	jnz	$+6      	;abs 0x853c
    8538:	4f 43       	clr.b	r15		
    853a:	20 3c       	jmp	$+66     	;abs 0x857c
        led_green_on();
    853c:	b0 12 9e 9c 	call	#0x9c9e	
        TIMER_LED_GREEN_ON = 0;
    8540:	82 43 04 02 	mov	#0,	&0x0204	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_GREEN_ON, DELAY_LED_GREEN));
    8544:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8548:	bf 40 e1 00 	mov	#225,	0(r15)	;#0x00e1, 0x0000(r15)
    854c:	00 00 
    854e:	1f 42 04 02 	mov	&0x0204,r15	
    8552:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8556:	b0 12 68 81 	call	#0x8168	
    855a:	0f 93       	tst	r15		
    855c:	02 20       	jnz	$+6      	;abs 0x8562
    855e:	4f 43       	clr.b	r15		
    8560:	0d 3c       	jmp	$+28     	;abs 0x857c
        led_green_off();
    8562:	b0 12 88 9c 	call	#0x9c88	
	led_green_flag=0;	
    8566:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    }
    856a:	dd 3f       	jmp	$-68     	;abs 0x8526

    PT_END(pt);
    856c:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8570:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8574:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8578:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    857c:	21 52       	add	#4,	r1	;r2 As==10
    857e:	34 41       	pop	r4		
    8580:	30 41       	ret			

00008582 <thread_led_red>:

static PT_THREAD(thread_led_red(struct pt *pt))
{
    8582:	04 12       	push	r4		
    8584:	04 41       	mov	r1,	r4	
    8586:	24 53       	incd	r4		
    8588:	21 82       	sub	#4,	r1	;r2 As==10
    858a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    858e:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8592:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8596:	2f 4f       	mov	@r15,	r15	
    8598:	3f 90 ee 00 	cmp	#238,	r15	;#0x00ee
    859c:	13 24       	jz	$+40     	;abs 0x85c4
    859e:	3f 90 ef 00 	cmp	#239,	r15	;#0x00ef
    85a2:	03 2c       	jc	$+8      	;abs 0x85aa
    85a4:	0f 93       	tst	r15		
    85a6:	09 24       	jz	$+20     	;abs 0x85ba
    85a8:	3b 3c       	jmp	$+120    	;abs 0x8620
    85aa:	3f 90 f2 00 	cmp	#242,	r15	;#0x00f2
    85ae:	19 24       	jz	$+52     	;abs 0x85e2
    85b0:	3f 90 f6 00 	cmp	#246,	r15	;#0x00f6
    85b4:	2a 24       	jz	$+86     	;abs 0x860a
    85b6:	34 3c       	jmp	$+106    	;abs 0x8620
          led_red_duration));
        led_red_off();
        TIMER_LED_RED_ON = 0;
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
          led_red_duration));
    }
    85b8:	03 43       	nop			
static PT_THREAD(thread_led_red(struct pt *pt))
{
    PT_BEGIN(pt);
    while(1)
    {
        PT_WAIT_UNTIL(pt, led_red_flag);
    85ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85be:	bf 40 ee 00 	mov	#238,	0(r15)	;#0x00ee, 0x0000(r15)
    85c2:	00 00 
    85c4:	1f 42 16 02 	mov	&0x0216,r15	
    85c8:	0f 93       	tst	r15		
    85ca:	02 20       	jnz	$+6      	;abs 0x85d0
    85cc:	4f 43       	clr.b	r15		
    85ce:	30 3c       	jmp	$+98     	;abs 0x8630
        led_red_on();
    85d0:	b0 12 dc 9c 	call	#0x9cdc	
        TIMER_LED_RED_ON = 0;
    85d4:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    85d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85dc:	bf 40 f2 00 	mov	#242,	0(r15)	;#0x00f2, 0x0000(r15)
    85e0:	00 00 
    85e2:	1f 42 14 02 	mov	&0x0214,r15	
    85e6:	0e 4f       	mov	r15,	r14	
    85e8:	1f 42 02 02 	mov	&0x0202,r15	
    85ec:	b0 12 68 81 	call	#0x8168	
    85f0:	0f 93       	tst	r15		
    85f2:	02 20       	jnz	$+6      	;abs 0x85f8
    85f4:	4f 43       	clr.b	r15		
    85f6:	1c 3c       	jmp	$+58     	;abs 0x8630
          led_red_duration));
        led_red_off();
    85f8:	b0 12 c6 9c 	call	#0x9cc6	
        TIMER_LED_RED_ON = 0;
    85fc:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    8600:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8604:	bf 40 f6 00 	mov	#246,	0(r15)	;#0x00f6, 0x0000(r15)
    8608:	00 00 
    860a:	1f 42 14 02 	mov	&0x0214,r15	
    860e:	0e 4f       	mov	r15,	r14	
    8610:	1f 42 02 02 	mov	&0x0202,r15	
    8614:	b0 12 68 81 	call	#0x8168	
    8618:	0f 93       	tst	r15		
    861a:	ce 23       	jnz	$-98     	;abs 0x85b8
    861c:	4f 43       	clr.b	r15		
    861e:	08 3c       	jmp	$+18     	;abs 0x8630
          led_red_duration));
    }

    PT_END(pt);
    8620:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8624:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8628:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    862c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8630:	21 52       	add	#4,	r1	;r2 As==10
    8632:	34 41       	pop	r4		
    8634:	30 41       	ret			

00008636 <uart_cb>:
/*
 * UART
 */

int uart_cb(uint8_t data)
{
    8636:	04 12       	push	r4		
    8638:	04 41       	mov	r1,	r4	
    863a:	24 53       	incd	r4		
    863c:	21 83       	decd	r1		
    863e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    
    if(data == 27 && uart_flag==0){ //27 is ESC ascii code (decimal) 
    8642:	f4 90 1b 00 	cmp.b	#27,	-4(r4)	;#0x001b, 0xfffc(r4)
    8646:	fc ff 
    8648:	13 20       	jnz	$+40     	;abs 0x8670
    864a:	1f 42 1e 02 	mov	&0x021e,r15	
    864e:	0f 93       	tst	r15		
    8650:	0f 20       	jnz	$+32     	;abs 0x8670
        printf("Enter new id starting with the room number and then the sensor number. Press enter to accept\n");
    8652:	3f 40 44 b0 	mov	#-20412,r15	;#0xb044
    8656:	b0 12 70 ae 	call	#0xae70	
        room_flag = 0;
    865a:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        uart_data = 0;
    865e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
        uart_flag=1;
    8662:	92 43 1e 02 	mov	#1,	&0x021e	;r3 As==01
        periodic_write_flag=0;
    8666:	82 43 18 02 	mov	#0,	&0x0218	;r3 As==00
        periodic_temp_flag=0;
    866a:	82 43 1a 02 	mov	#0,	&0x021a	;r3 As==00
    866e:	41 3c       	jmp	$+132    	;abs 0x86f2
    }
    else if(data == 13 && uart_flag==1){ //13 is return/enter ascii code
    8670:	f4 90 0d 00 	cmp.b	#13,	-4(r4)	;#0x000d, 0xfffc(r4)
    8674:	fc ff 
    8676:	0b 20       	jnz	$+24     	;abs 0x868e
    8678:	1f 42 1e 02 	mov	&0x021e,r15	
    867c:	1f 93       	cmp	#1,	r15	;r3 As==01
    867e:	07 20       	jnz	$+16     	;abs 0x868e
        uart_flag=0;
    8680:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
        periodic_write_flag=1;
    8684:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
        periodic_temp_flag=1;
    8688:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    868c:	32 3c       	jmp	$+102    	;abs 0x86f2
    }
    else {
    	if(room_flag == 0){
    868e:	1f 42 22 02 	mov	&0x0222,r15	
    8692:	0f 93       	tst	r15		
    8694:	12 20       	jnz	$+38     	;abs 0x86ba
    		printf("room : %c (hex code : %x)\n",data, data);
    8696:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    869a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    869e:	0e 12       	push	r14		
    86a0:	0f 12       	push	r15		
    86a2:	30 12 a1 b0 	push	#-20319	;#0xb0a1
    86a6:	b0 12 60 a5 	call	#0xa560	
    86aa:	31 50 06 00 	add	#6,	r1	;#0x0006
    		room = data;
    86ae:	d2 44 fc ff 	mov.b	-4(r4),	&0x0224	;0xfffc(r4)
    86b2:	24 02 
    		room_flag=1;
    86b4:	92 43 22 02 	mov	#1,	&0x0222	;r3 As==01
    86b8:	1c 3c       	jmp	$+58     	;abs 0x86f2
    		
    	}
        else if (room_flag == 1){
    86ba:	1f 42 22 02 	mov	&0x0222,r15	
    86be:	1f 93       	cmp	#1,	r15	;r3 As==01
    86c0:	18 20       	jnz	$+50     	;abs 0x86f2
        	printf("sensor: %c (hex code : %x)\n",data,data);
    86c2:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86c6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    86ca:	0e 12       	push	r14		
    86cc:	0f 12       	push	r15		
    86ce:	30 12 bc b0 	push	#-20292	;#0xb0bc
    86d2:	b0 12 60 a5 	call	#0xa560	
    86d6:	31 50 06 00 	add	#6,	r1	;#0x0006
        	uart_data = ((room & 0xFF) <<8) | (data & 0xFF) ;
    86da:	5f 42 24 02 	mov.b	&0x0224,r15	
    86de:	4f 4f       	mov.b	r15,	r15	
    86e0:	4f 4f       	mov.b	r15,	r15	
    86e2:	8f 10       	swpb	r15		
    86e4:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86e8:	0f de       	bis	r14,	r15	
    86ea:	82 4f 20 02 	mov	r15,	&0x0220	
        	//printf("uart_data : %x \n",uart_data);
        	room_flag = 0;
    86ee:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        }      
    }
        
    return 0;
    86f2:	0f 43       	clr	r15		
}
    86f4:	21 53       	incd	r1		
    86f6:	34 41       	pop	r4		
    86f8:	30 41       	ret			

000086fa <thread_uart>:

static PT_THREAD(thread_uart(struct pt *pt))
{
    86fa:	04 12       	push	r4		
    86fc:	04 41       	mov	r1,	r4	
    86fe:	24 53       	incd	r4		
    8700:	21 82       	sub	#4,	r1	;r2 As==10
    8702:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8706:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    870a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    870e:	2f 4f       	mov	@r15,	r15	
    8710:	3f 90 29 01 	cmp	#297,	r15	;#0x0129
    8714:	0a 24       	jz	$+22     	;abs 0x872a
    8716:	3f 90 2b 01 	cmp	#299,	r15	;#0x012b
    871a:	14 24       	jz	$+42     	;abs 0x8744
    871c:	0f 93       	tst	r15		
    871e:	1f 20       	jnz	$+64     	;abs 0x875e

    while(1)
    {
        PT_WAIT_UNTIL(pt, uart_flag==1);
    8720:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8724:	bf 40 29 01 	mov	#297,	0(r15)	;#0x0129, 0x0000(r15)
    8728:	00 00 
    872a:	1f 42 1e 02 	mov	&0x021e,r15	
    872e:	1f 93       	cmp	#1,	r15	;r3 As==01
    8730:	02 24       	jz	$+6      	;abs 0x8736
    8732:	4f 43       	clr.b	r15		
    8734:	1c 3c       	jmp	$+58     	;abs 0x876e
        led_red_on();
    8736:	b0 12 dc 9c 	call	#0x9cdc	
        PT_WAIT_UNTIL(pt,uart_flag==0);
    873a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    873e:	bf 40 2b 01 	mov	#299,	0(r15)	;#0x012b, 0x0000(r15)
    8742:	00 00 
    8744:	1f 42 1e 02 	mov	&0x021e,r15	
    8748:	0f 93       	tst	r15		
    874a:	02 24       	jz	$+6      	;abs 0x8750
    874c:	4f 43       	clr.b	r15		
    874e:	0f 3c       	jmp	$+32     	;abs 0x876e
        set_node_id(uart_data);
    8750:	1f 42 20 02 	mov	&0x0220,r15	
    8754:	b0 12 d6 81 	call	#0x81d6	
        led_red_off();
    8758:	b0 12 c6 9c 	call	#0x9cc6	
    }
    875c:	e1 3f       	jmp	$-60     	;abs 0x8720

    PT_END(pt);
    875e:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8762:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8766:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    876a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    876e:	21 52       	add	#4,	r1	;r2 As==10
    8770:	34 41       	pop	r4		
    8772:	30 41       	ret			

00008774 <radio_cb>:
static char radio_tx_buffer[PKTLEN]; //used as temperature buffer
static char radio_rx_buffer[PKTLEN];
static int radio_rx_flag;

void radio_cb(uint8_t *buffer, int size, int8_t rssi)
{
    8774:	04 12       	push	r4		
    8776:	04 41       	mov	r1,	r4	
    8778:	24 53       	incd	r4		
    877a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    877e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8782:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8786:	c4 4d fc ff 	mov.b	r13,	-4(r4)	;0xfffc(r4)
        if (size > 0)
    878a:	94 93 fa ff 	cmp	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    878e:	10 38       	jl	$+34     	;abs 0x87b0
        {
            memcpy(radio_rx_buffer, buffer, PKTLEN);
    8790:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    8794:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    8798:	3d 40 1c 00 	mov	#28,	r13	;#0x001c
    879c:	b0 12 66 a4 	call	#0xa466	
            printhex(radio_rx_buffer,PKTLEN);
    87a0:	3e 40 1c 00 	mov	#28,	r14	;#0x001c
    87a4:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    87a8:	b0 12 8a 81 	call	#0x818a	
            radio_rx_flag = 1;
    87ac:	92 43 5e 02 	mov	#1,	&0x025e	;r3 As==01
        {
            //DBG_PRINTF("msg packet error size=%d\r\n",size);
            //J'ai commenté la ligne supérieure pour la démo
        }

    cc2500_rx_enter();
    87b0:	b0 12 58 95 	call	#0x9558	
}
    87b4:	31 50 06 00 	add	#6,	r1	;#0x0006
    87b8:	34 41       	pop	r4		
    87ba:	30 41       	ret			

000087bc <ezdisplay>:

void ezdisplay(char message[])
{
    87bc:	0b 12       	push	r11		
    87be:	04 12       	push	r4		
    87c0:	04 41       	mov	r1,	r4	
    87c2:	24 52       	add	#4,	r4	;r2 As==10
    87c4:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    87c8:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    char msproom=message[0]&0xFF;
    87cc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    87d0:	e4 4f f4 ff 	mov.b	@r15,	-12(r4)	;0xfff4(r4)
    char mspsensor=message[1]&0xFF;
    87d4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    87d8:	1f 53       	inc	r15		
    87da:	e4 4f f5 ff 	mov.b	@r15,	-11(r4)	;0xfff5(r4)
    int time=0;
    87de:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    printf("{\"id\" : \"%c%c\"\n",msproom,mspsensor);
    87e2:	5e 44 f5 ff 	mov.b	-11(r4),r14	;0xfff5(r4)
    87e6:	8e 11       	sxt	r14		
    87e8:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    87ec:	8f 11       	sxt	r15		
    87ee:	0e 12       	push	r14		
    87f0:	0f 12       	push	r15		
    87f2:	30 12 d8 b0 	push	#-20264	;#0xb0d8
    87f6:	b0 12 60 a5 	call	#0xa560	
    87fa:	31 50 06 00 	add	#6,	r1	;#0x0006
    int i=3; //index 2 is the space charactere
    87fe:	b4 40 03 00 	mov	#3,	-14(r4)	;#0x0003, 0xfff2(r4)
    8802:	f2 ff 
    while( i < PKTLEN-1)
    8804:	49 3c       	jmp	$+148    	;abs 0x8898
    {
    	char msptemperature1=message[i++];
    8806:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    880a:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    880e:	e4 4f f6 ff 	mov.b	@r15,	-10(r4)	;0xfff6(r4)
    8812:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
   	char msptemperature2=message[i++];
    8816:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    881a:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    881e:	e4 4f f7 ff 	mov.b	@r15,	-9(r4)	;0xfff7(r4)
    8822:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
   	if ((message[i-1]&0xFF) == 0x2E || (message[i-2]&0xFF) == 0x2E )
    8826:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    882a:	3f 53       	add	#-1,	r15	;r3 As==11
    882c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8830:	6f 4f       	mov.b	@r15,	r15	
    8832:	8f 11       	sxt	r15		
    8834:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8838:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    883c:	31 24       	jz	$+100    	;abs 0x88a0
    883e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    8842:	2f 83       	decd	r15		
    8844:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8848:	6f 4f       	mov.b	@r15,	r15	
    884a:	8f 11       	sxt	r15		
    884c:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8850:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    8854:	25 24       	jz	$+76     	;abs 0x88a0
   	{
   		break;
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    8856:	5e 44 f7 ff 	mov.b	-9(r4),	r14	;0xfff7(r4)
    885a:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    885e:	b0 12 4c 82 	call	#0x824c	
    8862:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    	time += TIMER_SENSING_TEMP;
    8866:	b4 50 64 00 	add	#100,	-16(r4)	;#0x0064, 0xfff0(r4)
    886a:	f0 ff 
    	printf("\"temperature\" : \"%d,%d\", \"time\" : \"+%d\"}\n\r",temperature/10, temperature%10, time);
    886c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8870:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8874:	b0 12 3c a4 	call	#0xa43c	
    8878:	0b 4f       	mov	r15,	r11	
    887a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    887e:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8882:	b0 12 0a a4 	call	#0xa40a	
    8886:	14 12 f0 ff 	push	-16(r4)	;0xfff0(r4)
    888a:	0b 12       	push	r11		
    888c:	0f 12       	push	r15		
    888e:	30 12 e8 b0 	push	#-20248	;#0xb0e8
    8892:	b0 12 60 a5 	call	#0xa560	
    8896:	31 52       	add	#8,	r1	;r2 As==11
    char msproom=message[0]&0xFF;
    char mspsensor=message[1]&0xFF;
    int time=0;
    printf("{\"id\" : \"%c%c\"\n",msproom,mspsensor);
    int i=3; //index 2 is the space charactere
    while( i < PKTLEN-1)
    8898:	b4 90 1b 00 	cmp	#27,	-14(r4)	;#0x001b, 0xfff2(r4)
    889c:	f2 ff 
    889e:	b3 3b       	jl	$-152    	;abs 0x8806
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    	time += TIMER_SENSING_TEMP;
    	printf("\"temperature\" : \"%d,%d\", \"time\" : \"+%d\"}\n\r",temperature/10, temperature%10, time);
    }
}
    88a0:	31 50 0c 00 	add	#12,	r1	;#0x000c
    88a4:	34 41       	pop	r4		
    88a6:	3b 41       	pop	r11		
    88a8:	30 41       	ret			

000088aa <thread_rx>:

static PT_THREAD(thread_rx(struct pt *pt))
{
    88aa:	04 12       	push	r4		
    88ac:	04 41       	mov	r1,	r4	
    88ae:	24 53       	incd	r4		
    88b0:	21 82       	sub	#4,	r1	;r2 As==10
    88b2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    88b6:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    88ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88be:	2f 4f       	mov	@r15,	r15	
    88c0:	0f 93       	tst	r15		
    88c2:	04 24       	jz	$+10     	;abs 0x88cc
    88c4:	3f 90 65 01 	cmp	#357,	r15	;#0x0165
    88c8:	06 24       	jz	$+14     	;abs 0x88d6
    88ca:	16 3c       	jmp	$+46     	;abs 0x88f8

    while(1)
    {
        PT_WAIT_UNTIL(pt, radio_rx_flag == 1);
    88cc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88d0:	bf 40 65 01 	mov	#357,	0(r15)	;#0x0165, 0x0000(r15)
    88d4:	00 00 
    88d6:	1f 42 5e 02 	mov	&0x025e,r15	
    88da:	1f 93       	cmp	#1,	r15	;r3 As==01
    88dc:	02 24       	jz	$+6      	;abs 0x88e2
    88de:	4f 43       	clr.b	r15		
    88e0:	13 3c       	jmp	$+40     	;abs 0x8908
        led_green_on();
    88e2:	b0 12 9e 9c 	call	#0x9c9e	
        ezdisplay(radio_rx_buffer);
    88e6:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    88ea:	b0 12 bc 87 	call	#0x87bc	
        radio_rx_flag = 0;
    88ee:	82 43 5e 02 	mov	#0,	&0x025e	;r3 As==00
        led_green_off();
    88f2:	b0 12 88 9c 	call	#0x9c88	
    }
    88f6:	ea 3f       	jmp	$-42     	;abs 0x88cc

    PT_END(pt);
    88f8:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    88fc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8900:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8904:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8908:	21 52       	add	#4,	r1	;r2 As==10
    890a:	34 41       	pop	r4		
    890c:	30 41       	ret			

0000890e <init_message>:




static void init_message()
{
    890e:	04 12       	push	r4		
    8910:	04 41       	mov	r1,	r4	
    8912:	24 53       	incd	r4		
    8914:	21 83       	decd	r1		
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    8916:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    891a:	08 3c       	jmp	$+18     	;abs 0x892c
    {
        radio_tx_buffer[i] = 0x00;
    891c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8920:	3f 50 26 02 	add	#550,	r15	;#0x0226
    8924:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)


static void init_message()
{
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    8928:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    892c:	b4 90 1c 00 	cmp	#28,	-4(r4)	;#0x001c, 0xfffc(r4)
    8930:	fc ff 
    8932:	f4 2b       	jnc	$-22     	;abs 0x891c
    {
        radio_tx_buffer[i] = 0x00;
    }
    radio_tx_buffer[0] = (node_id>>8) &0xFF;
    8934:	1f 42 00 02 	mov	&0x0200,r15	
    8938:	8f 10       	swpb	r15		
    893a:	4f 4f       	mov.b	r15,	r15	
    893c:	4f 4f       	mov.b	r15,	r15	
    893e:	c2 4f 26 02 	mov.b	r15,	&0x0226	
    radio_tx_buffer[1] = node_id & 0xFF;
    8942:	1f 42 00 02 	mov	&0x0200,r15	
    8946:	4f 4f       	mov.b	r15,	r15	
    8948:	c2 4f 27 02 	mov.b	r15,	&0x0227	
    radio_tx_buffer[2] = 0x20;//hex code for SPACE char
    894c:	f2 40 20 00 	mov.b	#32,	&0x0228	;#0x0020
    8950:	28 02 
    current_buffer_pt = 3;
    8952:	b2 40 03 00 	mov	#3,	&0x021c	;#0x0003
    8956:	1c 02 
}
    8958:	21 53       	incd	r1		
    895a:	34 41       	pop	r4		
    895c:	30 41       	ret			

0000895e <write_message>:


static void write_message()
{
    895e:	04 12       	push	r4		
    8960:	04 41       	mov	r1,	r4	
    8962:	24 53       	incd	r4		
    //finish the sending buffer with a dot 
    radio_tx_buffer[current_buffer_pt] = 0x2E; //dot hex code
    8964:	1f 42 1c 02 	mov	&0x021c,r15	
    8968:	ff 40 2e 00 	mov.b	#46,	550(r15);#0x002e, 0x0226(r15)
    896c:	26 02 
    current_buffer_pt = 0;
    896e:	82 43 1c 02 	mov	#0,	&0x021c	;r3 As==00
    led_green_on();
    8972:	b0 12 9e 9c 	call	#0x9c9e	
    ezdisplay(radio_tx_buffer);
    8976:	3f 40 26 02 	mov	#550,	r15	;#0x0226
    897a:	b0 12 bc 87 	call	#0x87bc	
    led_green_off();
    897e:	b0 12 88 9c 	call	#0x9c88	
   
}
    8982:	34 41       	pop	r4		
    8984:	30 41       	ret			

00008986 <thread_periodic_writeTemp>:



static PT_THREAD(thread_periodic_writeTemp(struct pt *pt))
{
    8986:	04 12       	push	r4		
    8988:	04 41       	mov	r1,	r4	
    898a:	24 53       	incd	r4		
    898c:	21 82       	sub	#4,	r1	;r2 As==10
    898e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8992:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8996:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    899a:	2f 4f       	mov	@r15,	r15	
    899c:	3f 90 93 01 	cmp	#403,	r15	;#0x0193
    89a0:	0a 24       	jz	$+22     	;abs 0x89b6
    89a2:	3f 90 96 01 	cmp	#406,	r15	;#0x0196
    89a6:	16 24       	jz	$+46     	;abs 0x89d4
    89a8:	0f 93       	tst	r15		
    89aa:	29 20       	jnz	$+84     	;abs 0x89fe

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_write_flag==1);
    89ac:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89b0:	bf 40 93 01 	mov	#403,	0(r15)	;#0x0193, 0x0000(r15)
    89b4:	00 00 
    89b6:	1f 42 18 02 	mov	&0x0218,r15	
    89ba:	1f 93       	cmp	#1,	r15	;r3 As==01
    89bc:	02 24       	jz	$+6      	;abs 0x89c2
    89be:	4f 43       	clr.b	r15		
    89c0:	26 3c       	jmp	$+78     	;abs 0x8a0e
        TIMER_WRITE = 0;
    89c2:	82 43 0e 02 	mov	#0,	&0x020e	;r3 As==00
        init_message();
    89c6:	b0 12 0e 89 	call	#0x890e	
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_WRITE, TIMER_SEND) && periodic_write_flag==1);
    89ca:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89ce:	bf 40 96 01 	mov	#406,	0(r15)	;#0x0196, 0x0000(r15)
    89d2:	00 00 
    89d4:	1f 42 00 02 	mov	&0x0200,r15	
    89d8:	0f 93       	tst	r15		
    89da:	0c 24       	jz	$+26     	;abs 0x89f4
    89dc:	1f 42 0e 02 	mov	&0x020e,r15	
    89e0:	3e 40 1a 04 	mov	#1050,	r14	;#0x041a
    89e4:	b0 12 68 81 	call	#0x8168	
    89e8:	0f 93       	tst	r15		
    89ea:	04 24       	jz	$+10     	;abs 0x89f4
    89ec:	1f 42 18 02 	mov	&0x0218,r15	
    89f0:	1f 93       	cmp	#1,	r15	;r3 As==01
    89f2:	02 24       	jz	$+6      	;abs 0x89f8
    89f4:	4f 43       	clr.b	r15		
    89f6:	0b 3c       	jmp	$+24     	;abs 0x8a0e
        write_message();
    89f8:	b0 12 5e 89 	call	#0x895e	
    }
    89fc:	d7 3f       	jmp	$-80     	;abs 0x89ac

    PT_END(pt);
    89fe:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8a02:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a06:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8a0a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8a0e:	21 52       	add	#4,	r1	;r2 As==10
    8a10:	34 41       	pop	r4		
    8a12:	30 41       	ret			

00008a14 <register_temperature>:
 * TEMP SENSOR
 */
 
 /* to be called from within a protothread */
static void register_temperature()
{
    8a14:	04 12       	push	r4		
    8a16:	04 41       	mov	r1,	r4	
    8a18:	24 53       	incd	r4		
    8a1a:	21 82       	sub	#4,	r1	;r2 As==10
    
    int temperature = adc10_sample_temp();
    8a1c:	b0 12 58 8b 	call	#0x8b58	
    8a20:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    /* msp430 is little endian, convert temperature to network order */
    char *pt = (char *) &temperature;    
    8a24:	3f 40 fa ff 	mov	#-6,	r15	;#0xfffa
    8a28:	0f 54       	add	r4,	r15	
    8a2a:	2f 53       	incd	r15		
    8a2c:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    radio_tx_buffer[current_buffer_pt++] = pt[1];
    8a30:	1f 42 1c 02 	mov	&0x021c,r15	
    8a34:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a38:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    8a3c:	cf 4e 26 02 	mov.b	r14,	550(r15);0x0226(r15)
    8a40:	1f 53       	inc	r15		
    8a42:	82 4f 1c 02 	mov	r15,	&0x021c	
    radio_tx_buffer[current_buffer_pt++] = pt[0];
    8a46:	1f 42 1c 02 	mov	&0x021c,r15	
    8a4a:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a4e:	6e 4e       	mov.b	@r14,	r14	
    8a50:	cf 4e 26 02 	mov.b	r14,	550(r15);0x0226(r15)
    8a54:	1f 53       	inc	r15		
    8a56:	82 4f 1c 02 	mov	r15,	&0x021c	
    
}
    8a5a:	21 52       	add	#4,	r1	;r2 As==10
    8a5c:	34 41       	pop	r4		
    8a5e:	30 41       	ret			

00008a60 <thread_periodic_temperature>:

static PT_THREAD(thread_periodic_temperature(struct pt *pt))
{
    8a60:	04 12       	push	r4		
    8a62:	04 41       	mov	r1,	r4	
    8a64:	24 53       	incd	r4		
    8a66:	21 82       	sub	#4,	r1	;r2 As==10
    8a68:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8a6c:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8a70:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a74:	2f 4f       	mov	@r15,	r15	
    8a76:	3f 90 b4 01 	cmp	#436,	r15	;#0x01b4
    8a7a:	0a 24       	jz	$+22     	;abs 0x8a90
    8a7c:	3f 90 b6 01 	cmp	#438,	r15	;#0x01b6
    8a80:	14 24       	jz	$+42     	;abs 0x8aaa
    8a82:	0f 93       	tst	r15		
    8a84:	27 20       	jnz	$+80     	;abs 0x8ad4

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_temp_flag==1);
    8a86:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a8a:	bf 40 b4 01 	mov	#436,	0(r15)	;#0x01b4, 0x0000(r15)
    8a8e:	00 00 
    8a90:	1f 42 1a 02 	mov	&0x021a,r15	
    8a94:	1f 93       	cmp	#1,	r15	;r3 As==01
    8a96:	02 24       	jz	$+6      	;abs 0x8a9c
    8a98:	4f 43       	clr.b	r15		
    8a9a:	24 3c       	jmp	$+74     	;abs 0x8ae4
        TIMER_TEMP = 0;
    8a9c:	82 43 0c 02 	mov	#0,	&0x020c	;r3 As==00
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_TEMP, TIMER_SENSING_TEMP) && periodic_temp_flag==1);
    8aa0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8aa4:	bf 40 b6 01 	mov	#438,	0(r15)	;#0x01b6, 0x0000(r15)
    8aa8:	00 00 
    8aaa:	1f 42 00 02 	mov	&0x0200,r15	
    8aae:	0f 93       	tst	r15		
    8ab0:	0c 24       	jz	$+26     	;abs 0x8aca
    8ab2:	1f 42 0c 02 	mov	&0x020c,r15	
    8ab6:	3e 40 64 00 	mov	#100,	r14	;#0x0064
    8aba:	b0 12 68 81 	call	#0x8168	
    8abe:	0f 93       	tst	r15		
    8ac0:	04 24       	jz	$+10     	;abs 0x8aca
    8ac2:	1f 42 1a 02 	mov	&0x021a,r15	
    8ac6:	1f 93       	cmp	#1,	r15	;r3 As==01
    8ac8:	02 24       	jz	$+6      	;abs 0x8ace
    8aca:	4f 43       	clr.b	r15		
    8acc:	0b 3c       	jmp	$+24     	;abs 0x8ae4
        register_temperature();
    8ace:	b0 12 14 8a 	call	#0x8a14	
    }
    8ad2:	d9 3f       	jmp	$-76     	;abs 0x8a86

    PT_END(pt);
    8ad4:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8ad8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8adc:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8ae0:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8ae4:	21 52       	add	#4,	r1	;r2 As==10
    8ae6:	34 41       	pop	r4		
    8ae8:	30 41       	ret			

00008aea <adc10_start>:
    8aea:	04 12       	push	r4		
    8aec:	04 41       	mov	r1,	r4	
    8aee:	24 53       	incd	r4		
    8af0:	b2 40 86 10 	mov	#4230,	&0x026a	;#0x1086
    8af4:	6a 02 
    8af6:	b2 40 dc 0a 	mov	#2780,	&0x026c	;#0x0adc
    8afa:	6c 02 
    8afc:	34 41       	pop	r4		
    8afe:	30 41       	ret			

00008b00 <adc10_calibrate>:
    8b00:	04 12       	push	r4		
    8b02:	04 41       	mov	r1,	r4	
    8b04:	24 53       	incd	r4		
    8b06:	21 82       	sub	#4,	r1	;r2 As==10
    8b08:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8b0c:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8b10:	84 93 fa ff 	tst	-6(r4)		;0xfffa(r4)
    8b14:	04 24       	jz	$+10     	;abs 0x8b1e
    8b16:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8b1a:	82 4f 6a 02 	mov	r15,	&0x026a	
    8b1e:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    8b22:	04 24       	jz	$+10     	;abs 0x8b2c
    8b24:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b28:	82 4f 6c 02 	mov	r15,	&0x026c	
    8b2c:	21 52       	add	#4,	r1	;r2 As==10
    8b2e:	34 41       	pop	r4		
    8b30:	30 41       	ret			

00008b32 <adc10_stop>:
    8b32:	04 12       	push	r4		
    8b34:	04 41       	mov	r1,	r4	
    8b36:	24 53       	incd	r4		
    8b38:	1f 42 b0 01 	mov	&0x01b0,r15	
    8b3c:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8b40:	82 4f b0 01 	mov	r15,	&0x01b0	
    8b44:	34 41       	pop	r4		
    8b46:	30 41       	ret			

00008b48 <adc10irq>:
    8b48:	04 12       	push	r4		
    8b4a:	04 41       	mov	r1,	r4	
    8b4c:	24 53       	incd	r4		
    8b4e:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    8b52:	00 00 
    8b54:	34 41       	pop	r4		
    8b56:	00 13       	reti			

00008b58 <adc10_sample_temp>:
    8b58:	0b 12       	push	r11		
    8b5a:	0a 12       	push	r10		
    8b5c:	09 12       	push	r9		
    8b5e:	08 12       	push	r8		
    8b60:	04 12       	push	r4		
    8b62:	04 41       	mov	r1,	r4	
    8b64:	34 50 0a 00 	add	#10,	r4	;#0x000a
    8b68:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8b6c:	b2 40 80 a0 	mov	#-24448,&0x01b2	;#0xa080
    8b70:	b2 01 
    8b72:	b2 40 38 3c 	mov	#15416,	&0x01b0	;#0x3c38
    8b76:	b0 01 
    8b78:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8b7c:	0f 43       	clr	r15		
    8b7e:	b0 12 44 9b 	call	#0x9b44	
    8b82:	1f 42 b0 01 	mov	&0x01b0,r15	
    8b86:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8b8a:	82 4f b0 01 	mov	r15,	&0x01b0	
    8b8e:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8b92:	1f 42 b4 01 	mov	&0x01b4,r15	
    8b96:	08 4f       	mov	r15,	r8	
    8b98:	09 43       	clr	r9		
    8b9a:	84 48 f2 ff 	mov	r8,	-14(r4)	;0xfff2(r4)
    8b9e:	84 49 f4 ff 	mov	r9,	-12(r4)	;0xfff4(r4)
    8ba2:	1f 42 b0 01 	mov	&0x01b0,r15	
    8ba6:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8baa:	82 4f b0 01 	mov	r15,	&0x01b0	
    8bae:	1f 42 b0 01 	mov	&0x01b0,r15	
    8bb2:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8bb6:	82 4f b0 01 	mov	r15,	&0x01b0	
    8bba:	1f 42 6a 02 	mov	&0x026a,r15	
    8bbe:	0a 4f       	mov	r15,	r10	
    8bc0:	0f 4a       	mov	r10,	r15	
    8bc2:	8f 10       	swpb	r15		
    8bc4:	8f 11       	sxt	r15		
    8bc6:	8f 10       	swpb	r15		
    8bc8:	8f 11       	sxt	r15		
    8bca:	0b 4f       	mov	r15,	r11	
    8bcc:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    8bd0:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    8bd4:	0c 4e       	mov	r14,	r12	
    8bd6:	0d 4f       	mov	r15,	r13	
    8bd8:	0e 4a       	mov	r10,	r14	
    8bda:	0f 4b       	mov	r11,	r15	
    8bdc:	b0 12 de a3 	call	#0xa3de	
    8be0:	0f 93       	tst	r15		
    8be2:	04 38       	jl	$+10     	;abs 0x8bec
    8be4:	1f 93       	cmp	#1,	r15	;r3 As==01
    8be6:	05 34       	jge	$+12     	;abs 0x8bf2
    8be8:	0e 93       	tst	r14		
    8bea:	03 2c       	jc	$+8      	;abs 0x8bf2
    8bec:	3e 50 ff 03 	add	#1023,	r14	;#0x03ff
    8bf0:	0f 63       	adc	r15		
    8bf2:	8e 10       	swpb	r14		
    8bf4:	8f 10       	swpb	r15		
    8bf6:	4e ef       	xor.b	r15,	r14	
    8bf8:	0e ef       	xor	r15,	r14	
    8bfa:	8f 11       	sxt	r15		
    8bfc:	0f 11       	rra	r15		
    8bfe:	0e 10       	rrc	r14		
    8c00:	0f 11       	rra	r15		
    8c02:	0e 10       	rrc	r14		
    8c04:	1f 42 6c 02 	mov	&0x026c,r15	
    8c08:	0d 4e       	mov	r14,	r13	
    8c0a:	0d 8f       	sub	r15,	r13	
    8c0c:	0f 4d       	mov	r13,	r15	
    8c0e:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    8c12:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    8c16:	31 50 06 00 	add	#6,	r1	;#0x0006
    8c1a:	34 41       	pop	r4		
    8c1c:	38 41       	pop	r8		
    8c1e:	39 41       	pop	r9		
    8c20:	3a 41       	pop	r10		
    8c22:	3b 41       	pop	r11		
    8c24:	30 41       	ret			

00008c26 <adc10_sample_avcc>:
    8c26:	0b 12       	push	r11		
    8c28:	0a 12       	push	r10		
    8c2a:	04 12       	push	r4		
    8c2c:	04 41       	mov	r1,	r4	
    8c2e:	34 50 06 00 	add	#6,	r4	;#0x0006
    8c32:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8c36:	b2 40 00 b0 	mov	#-20480,&0x01b2	;#0xb000
    8c3a:	b2 01 
    8c3c:	b2 40 78 30 	mov	#12408,	&0x01b0	;#0x3078
    8c40:	b0 01 
    8c42:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8c46:	0f 43       	clr	r15		
    8c48:	b0 12 44 9b 	call	#0x9b44	
    8c4c:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c50:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8c54:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c58:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8c5c:	1f 42 b4 01 	mov	&0x01b4,r15	
    8c60:	0a 4f       	mov	r15,	r10	
    8c62:	0b 43       	clr	r11		
    8c64:	84 4a f6 ff 	mov	r10,	-10(r4)	;0xfff6(r4)
    8c68:	84 4b f8 ff 	mov	r11,	-8(r4)	;0xfff8(r4)
    8c6c:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c70:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8c74:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c78:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c7c:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8c80:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c84:	1a 44 f6 ff 	mov	-10(r4),r10	;0xfff6(r4)
    8c88:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8c8c:	0c 4a       	mov	r10,	r12	
    8c8e:	0d 4b       	mov	r11,	r13	
    8c90:	0e 4c       	mov	r12,	r14	
    8c92:	0f 4d       	mov	r13,	r15	
    8c94:	0e 5e       	rla	r14		
    8c96:	0f 6f       	rlc	r15		
    8c98:	0e 5e       	rla	r14		
    8c9a:	0f 6f       	rlc	r15		
    8c9c:	0c 4e       	mov	r14,	r12	
    8c9e:	0d 4f       	mov	r15,	r13	
    8ca0:	0c 5a       	add	r10,	r12	
    8ca2:	0d 6b       	addc	r11,	r13	
    8ca4:	0e 4c       	mov	r12,	r14	
    8ca6:	0f 4d       	mov	r13,	r15	
    8ca8:	0e 5e       	rla	r14		
    8caa:	0f 6f       	rlc	r15		
    8cac:	0e 5e       	rla	r14		
    8cae:	0f 6f       	rlc	r15		
    8cb0:	0e 5c       	add	r12,	r14	
    8cb2:	0f 6d       	addc	r13,	r15	
    8cb4:	0f 93       	tst	r15		
    8cb6:	04 38       	jl	$+10     	;abs 0x8cc0
    8cb8:	1f 93       	cmp	#1,	r15	;r3 As==01
    8cba:	05 34       	jge	$+12     	;abs 0x8cc6
    8cbc:	0e 93       	tst	r14		
    8cbe:	03 2c       	jc	$+8      	;abs 0x8cc6
    8cc0:	3e 50 ff 01 	add	#511,	r14	;#0x01ff
    8cc4:	0f 63       	adc	r15		
    8cc6:	8e 10       	swpb	r14		
    8cc8:	8f 10       	swpb	r15		
    8cca:	4e ef       	xor.b	r15,	r14	
    8ccc:	0e ef       	xor	r15,	r14	
    8cce:	8f 11       	sxt	r15		
    8cd0:	0f 11       	rra	r15		
    8cd2:	0e 10       	rrc	r14		
    8cd4:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    8cd8:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    8cdc:	31 50 06 00 	add	#6,	r1	;#0x0006
    8ce0:	34 41       	pop	r4		
    8ce2:	3a 41       	pop	r10		
    8ce4:	3b 41       	pop	r11		
    8ce6:	30 41       	ret			

00008ce8 <CC2500_HW_GDO0_IRQ_ON_ASSERT>:
    8ce8:	04 12       	push	r4		
    8cea:	04 41       	mov	r1,	r4	
    8cec:	24 53       	incd	r4		
    8cee:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8cf2:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8cf6:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8cfa:	34 41       	pop	r4		
    8cfc:	30 41       	ret			

00008cfe <CC2500_HW_GDO2_IRQ_ON_ASSERT>:
    8cfe:	04 12       	push	r4		
    8d00:	04 41       	mov	r1,	r4	
    8d02:	24 53       	incd	r4		
    8d04:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8d08:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d0c:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8d10:	34 41       	pop	r4		
    8d12:	30 41       	ret			

00008d14 <CC2500_HW_GDO0_DINT>:
    8d14:	04 12       	push	r4		
    8d16:	04 41       	mov	r1,	r4	
    8d18:	24 53       	incd	r4		
    8d1a:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d1e:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d22:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d26:	34 41       	pop	r4		
    8d28:	30 41       	ret			

00008d2a <CC2500_HW_GDO2_DINT>:
    8d2a:	04 12       	push	r4		
    8d2c:	04 41       	mov	r1,	r4	
    8d2e:	24 53       	incd	r4		
    8d30:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d34:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d38:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d3c:	34 41       	pop	r4		
    8d3e:	30 41       	ret			

00008d40 <CC2500_HW_GDO0_EINT>:
    8d40:	04 12       	push	r4		
    8d42:	04 41       	mov	r1,	r4	
    8d44:	24 53       	incd	r4		
    8d46:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d4a:	7f d0 40 00 	bis.b	#64,	r15	;#0x0040
    8d4e:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d52:	34 41       	pop	r4		
    8d54:	30 41       	ret			

00008d56 <CC2500_HW_GDO0_CLEAR_FLAG>:
    8d56:	04 12       	push	r4		
    8d58:	04 41       	mov	r1,	r4	
    8d5a:	24 53       	incd	r4		
    8d5c:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8d60:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d64:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8d68:	34 41       	pop	r4		
    8d6a:	30 41       	ret			

00008d6c <CC2500_HW_GDO2_CLEAR_FLAG>:
    8d6c:	04 12       	push	r4		
    8d6e:	04 41       	mov	r1,	r4	
    8d70:	24 53       	incd	r4		
    8d72:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8d76:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d7a:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8d7e:	34 41       	pop	r4		
    8d80:	30 41       	ret			

00008d82 <CONFIG_GDO0_PIN_AS_INPUT>:
    8d82:	04 12       	push	r4		
    8d84:	04 41       	mov	r1,	r4	
    8d86:	24 53       	incd	r4		
    8d88:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8d8c:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d90:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8d94:	34 41       	pop	r4		
    8d96:	30 41       	ret			

00008d98 <CC2500_HW_INIT>:
    8d98:	04 12       	push	r4		
    8d9a:	04 41       	mov	r1,	r4	
    8d9c:	24 53       	incd	r4		
    8d9e:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8da2:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8da6:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8daa:	5f 42 2a 00 	mov.b	&0x002a,r15	
    8dae:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8db2:	c2 4f 2a 00 	mov.b	r15,	&0x002a	
    8db6:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8dba:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dbe:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8dc2:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8dc6:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dca:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8dce:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8dd2:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dd6:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8dda:	5f 42 2f 00 	mov.b	&0x002f,r15	
    8dde:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    8de2:	c2 4f 2f 00 	mov.b	r15,	&0x002f	
    8de6:	34 41       	pop	r4		
    8de8:	30 41       	ret			

00008dea <CC2500_SPI_TX>:
    8dea:	04 12       	push	r4		
    8dec:	04 41       	mov	r1,	r4	
    8dee:	24 53       	incd	r4		
    8df0:	21 83       	decd	r1		
    8df2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8df6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8dfa:	b0 12 d2 9d 	call	#0x9dd2	
    8dfe:	4f 4f       	mov.b	r15,	r15	
    8e00:	c2 4f 8c 02 	mov.b	r15,	&0x028c	
    8e04:	21 53       	incd	r1		
    8e06:	34 41       	pop	r4		
    8e08:	30 41       	ret			

00008e0a <CC2500_SPI_STROBE>:
    8e0a:	04 12       	push	r4		
    8e0c:	04 41       	mov	r1,	r4	
    8e0e:	24 53       	incd	r4		
    8e10:	21 83       	decd	r1		
    8e12:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e16:	b0 12 b6 9e 	call	#0x9eb6	
    8e1a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e1e:	b0 12 ea 8d 	call	#0x8dea	
    8e22:	b0 12 cc 9e 	call	#0x9ecc	
    8e26:	21 53       	incd	r1		
    8e28:	34 41       	pop	r4		
    8e2a:	30 41       	ret			

00008e2c <CC2500_SPI_WREG>:
    8e2c:	04 12       	push	r4		
    8e2e:	04 41       	mov	r1,	r4	
    8e30:	24 53       	incd	r4		
    8e32:	21 82       	sub	#4,	r1	;r2 As==10
    8e34:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8e38:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8e3c:	b0 12 b6 9e 	call	#0x9eb6	
    8e40:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8e44:	b0 12 ea 8d 	call	#0x8dea	
    8e48:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e4c:	b0 12 ea 8d 	call	#0x8dea	
    8e50:	b0 12 cc 9e 	call	#0x9ecc	
    8e54:	21 52       	add	#4,	r1	;r2 As==10
    8e56:	34 41       	pop	r4		
    8e58:	30 41       	ret			

00008e5a <CC2500_SPI_RREG>:
    8e5a:	04 12       	push	r4		
    8e5c:	04 41       	mov	r1,	r4	
    8e5e:	24 53       	incd	r4		
    8e60:	21 82       	sub	#4,	r1	;r2 As==10
    8e62:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e66:	b0 12 b6 9e 	call	#0x9eb6	
    8e6a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e6e:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8e72:	b0 12 ea 8d 	call	#0x8dea	
    8e76:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8e7a:	b0 12 d2 9d 	call	#0x9dd2	
    8e7e:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8e82:	b0 12 cc 9e 	call	#0x9ecc	
    8e86:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8e8a:	21 52       	add	#4,	r1	;r2 As==10
    8e8c:	34 41       	pop	r4		
    8e8e:	30 41       	ret			

00008e90 <CC2500_SPI_ROREG>:
    8e90:	04 12       	push	r4		
    8e92:	04 41       	mov	r1,	r4	
    8e94:	24 53       	incd	r4		
    8e96:	21 82       	sub	#4,	r1	;r2 As==10
    8e98:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e9c:	b0 12 b6 9e 	call	#0x9eb6	
    8ea0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ea4:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8ea8:	b0 12 ea 8d 	call	#0x8dea	
    8eac:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8eb0:	b0 12 d2 9d 	call	#0x9dd2	
    8eb4:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8eb8:	b0 12 cc 9e 	call	#0x9ecc	
    8ebc:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8ec0:	21 52       	add	#4,	r1	;r2 As==10
    8ec2:	34 41       	pop	r4		
    8ec4:	30 41       	ret			

00008ec6 <CC2500_SPI_TX_BYTE>:
    8ec6:	04 12       	push	r4		
    8ec8:	04 41       	mov	r1,	r4	
    8eca:	24 53       	incd	r4		
    8ecc:	21 82       	sub	#4,	r1	;r2 As==10
    8ece:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8ed2:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8ed6:	b0 12 b6 9e 	call	#0x9eb6	
    8eda:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8ede:	b0 12 ea 8d 	call	#0x8dea	
    8ee2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ee6:	b0 12 ea 8d 	call	#0x8dea	
    8eea:	b0 12 cc 9e 	call	#0x9ecc	
    8eee:	21 52       	add	#4,	r1	;r2 As==10
    8ef0:	34 41       	pop	r4		
    8ef2:	30 41       	ret			

00008ef4 <CC2500_SPI_RX_BYTE>:
    8ef4:	04 12       	push	r4		
    8ef6:	04 41       	mov	r1,	r4	
    8ef8:	24 53       	incd	r4		
    8efa:	21 82       	sub	#4,	r1	;r2 As==10
    8efc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8f00:	b0 12 b6 9e 	call	#0x9eb6	
    8f04:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f08:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8f0c:	b0 12 ea 8d 	call	#0x8dea	
    8f10:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8f14:	b0 12 d2 9d 	call	#0x9dd2	
    8f18:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8f1c:	b0 12 cc 9e 	call	#0x9ecc	
    8f20:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8f24:	21 52       	add	#4,	r1	;r2 As==10
    8f26:	34 41       	pop	r4		
    8f28:	30 41       	ret			

00008f2a <CC2500_SPI_TX_BURST>:
    8f2a:	04 12       	push	r4		
    8f2c:	04 41       	mov	r1,	r4	
    8f2e:	24 53       	incd	r4		
    8f30:	31 82       	sub	#8,	r1	;r2 As==11
    8f32:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8f36:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8f3a:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
    8f3e:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8f42:	b0 12 b6 9e 	call	#0x9eb6	
    8f46:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8f4a:	3f d0 40 00 	bis	#64,	r15	;#0x0040
    8f4e:	b0 12 ea 8d 	call	#0x8dea	
    8f52:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8f56:	0a 3c       	jmp	$+22     	;abs 0x8f6c
    8f58:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8f5c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8f60:	6f 4f       	mov.b	@r15,	r15	
    8f62:	8f 11       	sxt	r15		
    8f64:	b0 12 ea 8d 	call	#0x8dea	
    8f68:	d4 53 f6 ff 	inc.b	-10(r4)	;0xfff6(r4)
    8f6c:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8f70:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    8f74:	f1 3b       	jl	$-28     	;abs 0x8f58
    8f76:	b0 12 cc 9e 	call	#0x9ecc	
    8f7a:	31 52       	add	#8,	r1	;r2 As==11
    8f7c:	34 41       	pop	r4		
    8f7e:	30 41       	ret			

00008f80 <CC2500_SPI_RX_BURST>:
    8f80:	0b 12       	push	r11		
    8f82:	04 12       	push	r4		
    8f84:	04 41       	mov	r1,	r4	
    8f86:	24 52       	add	#4,	r4	;r2 As==10
    8f88:	31 82       	sub	#8,	r1	;r2 As==11
    8f8a:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    8f8e:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    8f92:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
    8f96:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8f9a:	b0 12 b6 9e 	call	#0x9eb6	
    8f9e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    8fa2:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8fa6:	b0 12 ea 8d 	call	#0x8dea	
    8faa:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8fae:	0e 3c       	jmp	$+30     	;abs 0x8fcc
    8fb0:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8fb4:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8fb8:	0b 5f       	add	r15,	r11	
    8fba:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8fbe:	b0 12 d2 9d 	call	#0x9dd2	
    8fc2:	4f 4f       	mov.b	r15,	r15	
    8fc4:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
    8fc8:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    8fcc:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8fd0:	1f 94 fa ff 	cmp	-6(r4),	r15	;0xfffa(r4)
    8fd4:	ed 3b       	jl	$-36     	;abs 0x8fb0
    8fd6:	b0 12 cc 9e 	call	#0x9ecc	
    8fda:	31 52       	add	#8,	r1	;r2 As==11
    8fdc:	34 41       	pop	r4		
    8fde:	3b 41       	pop	r11		
    8fe0:	30 41       	ret			

00008fe2 <CC2500_SPI_RX_FIFO_BYTE>:
    8fe2:	04 12       	push	r4		
    8fe4:	04 41       	mov	r1,	r4	
    8fe6:	24 53       	incd	r4		
    8fe8:	21 83       	decd	r1		
    8fea:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    8fee:	b0 12 f4 8e 	call	#0x8ef4	
    8ff2:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8ff6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8ffa:	21 53       	incd	r1		
    8ffc:	34 41       	pop	r4		
    8ffe:	30 41       	ret			

00009000 <cc2500_wait_status>:
    9000:	04 12       	push	r4		
    9002:	04 41       	mov	r1,	r4	
    9004:	24 53       	incd	r4		
    9006:	21 82       	sub	#4,	r1	;r2 As==10
    9008:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    900c:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    9010:	b0 12 0a 8e 	call	#0x8e0a	
    9014:	5f 42 8c 02 	mov.b	&0x028c,r15	
    9018:	4f 4f       	mov.b	r15,	r15	
    901a:	4f 4f       	mov.b	r15,	r15	
    901c:	12 c3       	clrc			
    901e:	4f 10       	rrc.b	r15		
    9020:	12 c3       	clrc			
    9022:	4f 10       	rrc.b	r15		
    9024:	12 c3       	clrc			
    9026:	4f 10       	rrc.b	r15		
    9028:	12 c3       	clrc			
    902a:	4f 10       	rrc.b	r15		
    902c:	4e 4f       	mov.b	r15,	r14	
    902e:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    9032:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
    9036:	d4 94 fa ff 	cmp.b	-6(r4),	-4(r4)	;0xfffa(r4), 0xfffc(r4)
    903a:	fc ff 
    903c:	e7 23       	jnz	$-48     	;abs 0x900c
    903e:	21 52       	add	#4,	r1	;r2 As==10
    9040:	34 41       	pop	r4		
    9042:	30 41       	ret			

00009044 <cc2500_gdo0_set_signal>:
    9044:	04 12       	push	r4		
    9046:	04 41       	mov	r1,	r4	
    9048:	24 53       	incd	r4		
    904a:	21 82       	sub	#4,	r1	;r2 As==10
    904c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9050:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9054:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    9058:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    905c:	d2 44 fa ff 	mov.b	-6(r4),	&0x0288	;0xfffa(r4)
    9060:	88 02 
    9062:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9066:	0e 4f       	mov	r15,	r14	
    9068:	2f 43       	mov	#2,	r15	;r3 As==10
    906a:	b0 12 2c 8e 	call	#0x8e2c	
    906e:	21 52       	add	#4,	r1	;r2 As==10
    9070:	34 41       	pop	r4		
    9072:	30 41       	ret			

00009074 <cc2500_gdo2_set_signal>:
    9074:	04 12       	push	r4		
    9076:	04 41       	mov	r1,	r4	
    9078:	24 53       	incd	r4		
    907a:	21 82       	sub	#4,	r1	;r2 As==10
    907c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9080:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9084:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    9088:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    908c:	d2 44 fa ff 	mov.b	-6(r4),	&0x0284	;0xfffa(r4)
    9090:	84 02 
    9092:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9096:	0e 4f       	mov	r15,	r14	
    9098:	0f 43       	clr	r15		
    909a:	b0 12 2c 8e 	call	#0x8e2c	
    909e:	21 52       	add	#4,	r1	;r2 As==10
    90a0:	34 41       	pop	r4		
    90a2:	30 41       	ret			

000090a4 <cc2500_set_fifo_threshold>:
    90a4:	04 12       	push	r4		
    90a6:	04 41       	mov	r1,	r4	
    90a8:	24 53       	incd	r4		
    90aa:	21 82       	sub	#4,	r1	;r2 As==10
    90ac:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    90b0:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    90b4:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    90b8:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    90bc:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    90c0:	0e 4f       	mov	r15,	r14	
    90c2:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    90c6:	b0 12 2c 8e 	call	#0x8e2c	
    90ca:	21 52       	add	#4,	r1	;r2 As==10
    90cc:	34 41       	pop	r4		
    90ce:	30 41       	ret			

000090d0 <cc2500_check_tx_underflow>:
    90d0:	04 12       	push	r4		
    90d2:	04 41       	mov	r1,	r4	
    90d4:	24 53       	incd	r4		
    90d6:	21 83       	decd	r1		
    90d8:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    90dc:	b0 12 0a 8e 	call	#0x8e0a	
    90e0:	5f 42 8c 02 	mov.b	&0x028c,r15	
    90e4:	4f 4f       	mov.b	r15,	r15	
    90e6:	4f 4f       	mov.b	r15,	r15	
    90e8:	12 c3       	clrc			
    90ea:	4f 10       	rrc.b	r15		
    90ec:	12 c3       	clrc			
    90ee:	4f 10       	rrc.b	r15		
    90f0:	12 c3       	clrc			
    90f2:	4f 10       	rrc.b	r15		
    90f4:	12 c3       	clrc			
    90f6:	4f 10       	rrc.b	r15		
    90f8:	4f 4f       	mov.b	r15,	r15	
    90fa:	0e 4f       	mov	r15,	r14	
    90fc:	3e f0 07 00 	and	#7,	r14	;#0x0007
    9100:	1f 43       	mov	#1,	r15	;r3 As==01
    9102:	3e 90 07 00 	cmp	#7,	r14	;#0x0007
    9106:	01 24       	jz	$+4      	;abs 0x910a
    9108:	0f 43       	clr	r15		
    910a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    910e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9112:	21 53       	incd	r1		
    9114:	34 41       	pop	r4		
    9116:	30 41       	ret			

00009118 <cc2500_check_rx_overflow>:
    9118:	04 12       	push	r4		
    911a:	04 41       	mov	r1,	r4	
    911c:	24 53       	incd	r4		
    911e:	21 83       	decd	r1		
    9120:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    9124:	b0 12 0a 8e 	call	#0x8e0a	
    9128:	5f 42 8c 02 	mov.b	&0x028c,r15	
    912c:	4f 4f       	mov.b	r15,	r15	
    912e:	4f 4f       	mov.b	r15,	r15	
    9130:	12 c3       	clrc			
    9132:	4f 10       	rrc.b	r15		
    9134:	12 c3       	clrc			
    9136:	4f 10       	rrc.b	r15		
    9138:	12 c3       	clrc			
    913a:	4f 10       	rrc.b	r15		
    913c:	12 c3       	clrc			
    913e:	4f 10       	rrc.b	r15		
    9140:	4f 4f       	mov.b	r15,	r15	
    9142:	0e 4f       	mov	r15,	r14	
    9144:	3e f0 07 00 	and	#7,	r14	;#0x0007
    9148:	5f 43       	mov.b	#1,	r15	;r3 As==01
    914a:	3e 90 06 00 	cmp	#6,	r14	;#0x0006
    914e:	01 24       	jz	$+4      	;abs 0x9152
    9150:	4f 43       	clr.b	r15		
    9152:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9156:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    915a:	8f 11       	sxt	r15		
    915c:	21 53       	incd	r1		
    915e:	34 41       	pop	r4		
    9160:	30 41       	ret			

00009162 <cc2500_check_fifo_xflow_flush>:
    9162:	04 12       	push	r4		
    9164:	04 41       	mov	r1,	r4	
    9166:	24 53       	incd	r4		
    9168:	b0 12 d0 90 	call	#0x90d0	
    916c:	0f 93       	tst	r15		
    916e:	04 24       	jz	$+10     	;abs 0x9178
    9170:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    9174:	b0 12 0a 8e 	call	#0x8e0a	
    9178:	b0 12 18 91 	call	#0x9118	
    917c:	0f 93       	tst	r15		
    917e:	04 24       	jz	$+10     	;abs 0x9188
    9180:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    9184:	b0 12 0a 8e 	call	#0x8e0a	
    9188:	34 41       	pop	r4		
    918a:	30 41       	ret			

0000918c <cc2500_configure>:
    918c:	04 12       	push	r4		
    918e:	04 41       	mov	r1,	r4	
    9190:	24 53       	incd	r4		
    9192:	21 83       	decd	r1		
    9194:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9198:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    919c:	6f 4f       	mov.b	@r15,	r15	
    919e:	4f 4f       	mov.b	r15,	r15	
    91a0:	0e 4f       	mov	r15,	r14	
    91a2:	3f 40 0b 00 	mov	#11,	r15	;#0x000b
    91a6:	b0 12 2c 8e 	call	#0x8e2c	
    91aa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91ae:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    91b2:	4f 4f       	mov.b	r15,	r15	
    91b4:	0e 4f       	mov	r15,	r14	
    91b6:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    91ba:	b0 12 2c 8e 	call	#0x8e2c	
    91be:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91c2:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    91c6:	4f 4f       	mov.b	r15,	r15	
    91c8:	0e 4f       	mov	r15,	r14	
    91ca:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    91ce:	b0 12 2c 8e 	call	#0x8e2c	
    91d2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91d6:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    91da:	4f 4f       	mov.b	r15,	r15	
    91dc:	0e 4f       	mov	r15,	r14	
    91de:	3f 40 0e 00 	mov	#14,	r15	;#0x000e
    91e2:	b0 12 2c 8e 	call	#0x8e2c	
    91e6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91ea:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    91ee:	4f 4f       	mov.b	r15,	r15	
    91f0:	0e 4f       	mov	r15,	r14	
    91f2:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    91f6:	b0 12 2c 8e 	call	#0x8e2c	
    91fa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91fe:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    9202:	4f 4f       	mov.b	r15,	r15	
    9204:	0e 4f       	mov	r15,	r14	
    9206:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    920a:	b0 12 2c 8e 	call	#0x8e2c	
    920e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9212:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    9216:	4f 4f       	mov.b	r15,	r15	
    9218:	0e 4f       	mov	r15,	r14	
    921a:	3f 40 11 00 	mov	#17,	r15	;#0x0011
    921e:	b0 12 2c 8e 	call	#0x8e2c	
    9222:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9226:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    922a:	4f 4f       	mov.b	r15,	r15	
    922c:	0e 4f       	mov	r15,	r14	
    922e:	3f 40 12 00 	mov	#18,	r15	;#0x0012
    9232:	b0 12 2c 8e 	call	#0x8e2c	
    9236:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    923a:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    923e:	4f 4f       	mov.b	r15,	r15	
    9240:	0e 4f       	mov	r15,	r14	
    9242:	3f 40 13 00 	mov	#19,	r15	;#0x0013
    9246:	b0 12 2c 8e 	call	#0x8e2c	
    924a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    924e:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    9252:	4f 4f       	mov.b	r15,	r15	
    9254:	0e 4f       	mov	r15,	r14	
    9256:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    925a:	b0 12 2c 8e 	call	#0x8e2c	
    925e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9262:	5f 4f 0a 00 	mov.b	10(r15),r15	;0x000a(r15)
    9266:	4f 4f       	mov.b	r15,	r15	
    9268:	0e 4f       	mov	r15,	r14	
    926a:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    926e:	b0 12 2c 8e 	call	#0x8e2c	
    9272:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9276:	5f 4f 0b 00 	mov.b	11(r15),r15	;0x000b(r15)
    927a:	4f 4f       	mov.b	r15,	r15	
    927c:	0e 4f       	mov	r15,	r14	
    927e:	3f 40 15 00 	mov	#21,	r15	;#0x0015
    9282:	b0 12 2c 8e 	call	#0x8e2c	
    9286:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    928a:	5f 4f 0c 00 	mov.b	12(r15),r15	;0x000c(r15)
    928e:	4f 4f       	mov.b	r15,	r15	
    9290:	0e 4f       	mov	r15,	r14	
    9292:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    9296:	b0 12 2c 8e 	call	#0x8e2c	
    929a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    929e:	5f 4f 0d 00 	mov.b	13(r15),r15	;0x000d(r15)
    92a2:	4f 4f       	mov.b	r15,	r15	
    92a4:	0e 4f       	mov	r15,	r14	
    92a6:	3f 40 22 00 	mov	#34,	r15	;#0x0022
    92aa:	b0 12 2c 8e 	call	#0x8e2c	
    92ae:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92b2:	5f 4f 0e 00 	mov.b	14(r15),r15	;0x000e(r15)
    92b6:	4f 4f       	mov.b	r15,	r15	
    92b8:	0e 4f       	mov	r15,	r14	
    92ba:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    92be:	b0 12 2c 8e 	call	#0x8e2c	
    92c2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92c6:	5f 4f 0f 00 	mov.b	15(r15),r15	;0x000f(r15)
    92ca:	4f 4f       	mov.b	r15,	r15	
    92cc:	0e 4f       	mov	r15,	r14	
    92ce:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    92d2:	b0 12 2c 8e 	call	#0x8e2c	
    92d6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92da:	5f 4f 10 00 	mov.b	16(r15),r15	;0x0010(r15)
    92de:	4f 4f       	mov.b	r15,	r15	
    92e0:	0e 4f       	mov	r15,	r14	
    92e2:	3f 40 1a 00 	mov	#26,	r15	;#0x001a
    92e6:	b0 12 2c 8e 	call	#0x8e2c	
    92ea:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92ee:	5f 4f 11 00 	mov.b	17(r15),r15	;0x0011(r15)
    92f2:	4f 4f       	mov.b	r15,	r15	
    92f4:	0e 4f       	mov	r15,	r14	
    92f6:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    92fa:	b0 12 2c 8e 	call	#0x8e2c	
    92fe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9302:	5f 4f 12 00 	mov.b	18(r15),r15	;0x0012(r15)
    9306:	4f 4f       	mov.b	r15,	r15	
    9308:	0e 4f       	mov	r15,	r14	
    930a:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    930e:	b0 12 2c 8e 	call	#0x8e2c	
    9312:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9316:	5f 4f 13 00 	mov.b	19(r15),r15	;0x0013(r15)
    931a:	4f 4f       	mov.b	r15,	r15	
    931c:	0e 4f       	mov	r15,	r14	
    931e:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    9322:	b0 12 2c 8e 	call	#0x8e2c	
    9326:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    932a:	5f 4f 14 00 	mov.b	20(r15),r15	;0x0014(r15)
    932e:	4f 4f       	mov.b	r15,	r15	
    9330:	0e 4f       	mov	r15,	r14	
    9332:	3f 40 23 00 	mov	#35,	r15	;#0x0023
    9336:	b0 12 2c 8e 	call	#0x8e2c	
    933a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    933e:	5f 4f 15 00 	mov.b	21(r15),r15	;0x0015(r15)
    9342:	4f 4f       	mov.b	r15,	r15	
    9344:	0e 4f       	mov	r15,	r14	
    9346:	3f 40 24 00 	mov	#36,	r15	;#0x0024
    934a:	b0 12 2c 8e 	call	#0x8e2c	
    934e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9352:	5f 4f 16 00 	mov.b	22(r15),r15	;0x0016(r15)
    9356:	4f 4f       	mov.b	r15,	r15	
    9358:	0e 4f       	mov	r15,	r14	
    935a:	3f 40 25 00 	mov	#37,	r15	;#0x0025
    935e:	b0 12 2c 8e 	call	#0x8e2c	
    9362:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9366:	5f 4f 17 00 	mov.b	23(r15),r15	;0x0017(r15)
    936a:	4f 4f       	mov.b	r15,	r15	
    936c:	0e 4f       	mov	r15,	r14	
    936e:	3f 40 26 00 	mov	#38,	r15	;#0x0026
    9372:	b0 12 2c 8e 	call	#0x8e2c	
    9376:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    937a:	5f 4f 18 00 	mov.b	24(r15),r15	;0x0018(r15)
    937e:	4f 4f       	mov.b	r15,	r15	
    9380:	0e 4f       	mov	r15,	r14	
    9382:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    9386:	b0 12 2c 8e 	call	#0x8e2c	
    938a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    938e:	5f 4f 19 00 	mov.b	25(r15),r15	;0x0019(r15)
    9392:	4f 4f       	mov.b	r15,	r15	
    9394:	0e 4f       	mov	r15,	r14	
    9396:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    939a:	b0 12 2c 8e 	call	#0x8e2c	
    939e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93a2:	5f 4f 1a 00 	mov.b	26(r15),r15	;0x001a(r15)
    93a6:	4f 4f       	mov.b	r15,	r15	
    93a8:	0e 4f       	mov	r15,	r14	
    93aa:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    93ae:	b0 12 2c 8e 	call	#0x8e2c	
    93b2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93b6:	5f 4f 1b 00 	mov.b	27(r15),r15	;0x001b(r15)
    93ba:	4f 4f       	mov.b	r15,	r15	
    93bc:	0e 4f       	mov	r15,	r14	
    93be:	3f 40 2e 00 	mov	#46,	r15	;#0x002e
    93c2:	b0 12 2c 8e 	call	#0x8e2c	
    93c6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93ca:	5f 4f 1c 00 	mov.b	28(r15),r15	;0x001c(r15)
    93ce:	4f 4f       	mov.b	r15,	r15	
    93d0:	0e 4f       	mov	r15,	r14	
    93d2:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    93d6:	b0 12 2c 8e 	call	#0x8e2c	
    93da:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93de:	5f 4f 1d 00 	mov.b	29(r15),r15	;0x001d(r15)
    93e2:	4f 4f       	mov.b	r15,	r15	
    93e4:	0e 4f       	mov	r15,	r14	
    93e6:	0f 43       	clr	r15		
    93e8:	b0 12 2c 8e 	call	#0x8e2c	
    93ec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93f0:	5f 4f 1e 00 	mov.b	30(r15),r15	;0x001e(r15)
    93f4:	4f 4f       	mov.b	r15,	r15	
    93f6:	0e 4f       	mov	r15,	r14	
    93f8:	2f 43       	mov	#2,	r15	;r3 As==10
    93fa:	b0 12 2c 8e 	call	#0x8e2c	
    93fe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9402:	5f 4f 1f 00 	mov.b	31(r15),r15	;0x001f(r15)
    9406:	4f 4f       	mov.b	r15,	r15	
    9408:	0e 4f       	mov	r15,	r14	
    940a:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    940e:	b0 12 2c 8e 	call	#0x8e2c	
    9412:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9416:	5f 4f 20 00 	mov.b	32(r15),r15	;0x0020(r15)
    941a:	4f 4f       	mov.b	r15,	r15	
    941c:	0e 4f       	mov	r15,	r14	
    941e:	3f 42       	mov	#8,	r15	;r2 As==11
    9420:	b0 12 2c 8e 	call	#0x8e2c	
    9424:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9428:	5f 4f 21 00 	mov.b	33(r15),r15	;0x0021(r15)
    942c:	4f 4f       	mov.b	r15,	r15	
    942e:	0e 4f       	mov	r15,	r14	
    9430:	3f 40 09 00 	mov	#9,	r15	;#0x0009
    9434:	b0 12 2c 8e 	call	#0x8e2c	
    9438:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    943c:	5f 4f 22 00 	mov.b	34(r15),r15	;0x0022(r15)
    9440:	4f 4f       	mov.b	r15,	r15	
    9442:	0e 4f       	mov	r15,	r14	
    9444:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9448:	b0 12 2c 8e 	call	#0x8e2c	
    944c:	3e 40 fe 00 	mov	#254,	r14	;#0x00fe
    9450:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    9454:	b0 12 2c 8e 	call	#0x8e2c	
    9458:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    945c:	b0 12 a4 90 	call	#0x90a4	
    9460:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9462:	b0 12 44 90 	call	#0x9044	
    9466:	b0 12 e8 8c 	call	#0x8ce8	
    946a:	b0 12 14 8d 	call	#0x8d14	
    946e:	7f 40 06 00 	mov.b	#6,	r15	;#0x0006
    9472:	b0 12 74 90 	call	#0x9074	
    9476:	b0 12 fe 8c 	call	#0x8cfe	
    947a:	b0 12 2a 8d 	call	#0x8d2a	
    947e:	21 53       	incd	r1		
    9480:	34 41       	pop	r4		
    9482:	30 41       	ret			

00009484 <cc2500_set_channel>:
    9484:	04 12       	push	r4		
    9486:	04 41       	mov	r1,	r4	
    9488:	24 53       	incd	r4		
    948a:	21 83       	decd	r1		
    948c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9490:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9494:	0e 4f       	mov	r15,	r14	
    9496:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    949a:	b0 12 2c 8e 	call	#0x8e2c	
    949e:	21 53       	incd	r1		
    94a0:	34 41       	pop	r4		
    94a2:	30 41       	ret			

000094a4 <cc2500_calibrate>:
    94a4:	04 12       	push	r4		
    94a6:	04 41       	mov	r1,	r4	
    94a8:	24 53       	incd	r4		
    94aa:	b0 12 44 97 	call	#0x9744	
    94ae:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    94b2:	b0 12 0a 8e 	call	#0x8e0a	
    94b6:	4f 43       	clr.b	r15		
    94b8:	b0 12 00 90 	call	#0x9000	
    94bc:	34 41       	pop	r4		
    94be:	30 41       	ret			

000094c0 <cc2500_utx>:
    94c0:	04 12       	push	r4		
    94c2:	04 41       	mov	r1,	r4	
    94c4:	24 53       	incd	r4		
    94c6:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    94ca:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    94ce:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    94d2:	b0 12 44 97 	call	#0x9744	
    94d6:	b0 12 2a 8d 	call	#0x8d2a	
    94da:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    94de:	0e 4f       	mov	r15,	r14	
    94e0:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    94e4:	b0 12 c6 8e 	call	#0x8ec6	
    94e8:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    94ec:	0d 4f       	mov	r15,	r13	
    94ee:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    94f2:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    94f6:	b0 12 2a 8f 	call	#0x8f2a	
    94fa:	3f 40 35 00 	mov	#53,	r15	;#0x0035
    94fe:	b0 12 0a 8e 	call	#0x8e0a	
    9502:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    9506:	b0 12 90 8e 	call	#0x8e90	
    950a:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    950e:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9512:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    9516:	1f 93       	cmp	#1,	r15	;r3 As==01
    9518:	f4 37       	jge	$-22     	;abs 0x9502
    951a:	b0 12 56 8d 	call	#0x8d56	
    951e:	b0 12 6c 8d 	call	#0x8d6c	
    9522:	31 50 06 00 	add	#6,	r1	;#0x0006
    9526:	34 41       	pop	r4		
    9528:	30 41       	ret			

0000952a <cc2500_rx_register_buffer>:
    952a:	04 12       	push	r4		
    952c:	04 41       	mov	r1,	r4	
    952e:	24 53       	incd	r4		
    9530:	21 82       	sub	#4,	r1	;r2 As==10
    9532:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9536:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    953a:	92 44 fa ff 	mov	-6(r4),	&0x028a	;0xfffa(r4)
    953e:	8a 02 
    9540:	c2 43 6e 02 	mov.b	#0,	&0x026e	;r3 As==00
    9544:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9548:	0e 4f       	mov	r15,	r14	
    954a:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    954e:	b0 12 2c 8e 	call	#0x8e2c	
    9552:	21 52       	add	#4,	r1	;r2 As==10
    9554:	34 41       	pop	r4		
    9556:	30 41       	ret			

00009558 <cc2500_rx_enter>:
    9558:	04 12       	push	r4		
    955a:	04 41       	mov	r1,	r4	
    955c:	24 53       	incd	r4		
    955e:	b0 12 44 97 	call	#0x9744	
    9562:	c2 43 6e 02 	mov.b	#0,	&0x026e	;r3 As==00
    9566:	b0 12 56 8d 	call	#0x8d56	
    956a:	b0 12 6c 8d 	call	#0x8d6c	
    956e:	b0 12 40 8d 	call	#0x8d40	
    9572:	b0 12 2a 8d 	call	#0x8d2a	
    9576:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    957a:	b0 12 0a 8e 	call	#0x8e0a	
    957e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9580:	b0 12 00 90 	call	#0x9000	
    9584:	34 41       	pop	r4		
    9586:	30 41       	ret			

00009588 <cc2500_rx_pkt_eop>:
    9588:	0b 12       	push	r11		
    958a:	04 12       	push	r4		
    958c:	04 41       	mov	r1,	r4	
    958e:	24 52       	add	#4,	r4	;r2 As==10
    9590:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    9594:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    9598:	b0 12 90 8e 	call	#0x8e90	
    959c:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    95a0:	d4 44 f2 ff 	mov.b	-14(r4),-10(r4)	;0xfff2(r4), 0xfff6(r4)
    95a4:	f6 ff 
    95a6:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
    95aa:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    95ae:	b0 12 90 8e 	call	#0x8e90	
    95b2:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    95b6:	e4 93 f2 ff 	cmp.b	#2,	-14(r4)	;r3 As==10, 0xfff2(r4)
    95ba:	05 2c       	jc	$+12     	;abs 0x95c6
    95bc:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95c0:	1f 94 f6 ff 	cmp	-10(r4),r15	;0xfff6(r4)
    95c4:	ed 23       	jnz	$-36     	;abs 0x95a0
    95c6:	c4 93 f2 ff 	tst.b	-14(r4)	;0xfff2(r4)
    95ca:	68 24       	jz	$+210    	;abs 0x969c
    95cc:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95d0:	4f 93       	tst.b	r15		
    95d2:	59 38       	jl	$+180    	;abs 0x9686
    95d4:	b0 12 e2 8f 	call	#0x8fe2	
    95d8:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    95dc:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95e0:	0e 4f       	mov	r15,	r14	
    95e2:	3e 53       	add	#-1,	r14	;r3 As==11
    95e4:	1f 42 8a 02 	mov	&0x028a,r15	
    95e8:	0d 4e       	mov	r14,	r13	
    95ea:	0e 4f       	mov	r15,	r14	
    95ec:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    95f0:	b0 12 80 8f 	call	#0x8f80	
    95f4:	1e 42 8a 02 	mov	&0x028a,r14	
    95f8:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    95fc:	0f 5e       	add	r14,	r15	
    95fe:	6f 4f       	mov.b	@r15,	r15	
    9600:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9604:	c4 43 fb ff 	mov.b	#0,	-5(r4)	;r3 As==00, 0xfffb(r4)
    9608:	b4 90 80 00 	cmp	#128,	-6(r4)	;#0x0080, 0xfffa(r4)
    960c:	fa ff 
    960e:	0e 38       	jl	$+30     	;abs 0x962c
    9610:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9614:	3f 50 00 ff 	add	#-256,	r15	;#0xff00
    9618:	0f 93       	tst	r15		
    961a:	01 34       	jge	$+4      	;abs 0x961e
    961c:	1f 53       	inc	r15		
    961e:	0f 11       	rra	r15		
    9620:	0e 4f       	mov	r15,	r14	
    9622:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    9626:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    962a:	0b 3c       	jmp	$+24     	;abs 0x9642
    962c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9630:	0f 93       	tst	r15		
    9632:	01 34       	jge	$+4      	;abs 0x9636
    9634:	1f 53       	inc	r15		
    9636:	0f 11       	rra	r15		
    9638:	0e 4f       	mov	r15,	r14	
    963a:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    963e:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    9642:	1e 42 8a 02 	mov	&0x028a,r14	
    9646:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    964a:	1f 53       	inc	r15		
    964c:	0f 5e       	add	r14,	r15	
    964e:	6f 4f       	mov.b	@r15,	r15	
    9650:	4f 93       	tst.b	r15		
    9652:	0e 34       	jge	$+30     	;abs 0x9670
    9654:	1c 42 86 02 	mov	&0x0286,r12	
    9658:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    965c:	4e 4f       	mov.b	r15,	r14	
    965e:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9662:	1b 42 8a 02 	mov	&0x028a,r11	
    9666:	4d 4e       	mov.b	r14,	r13	
    9668:	0e 4f       	mov	r15,	r14	
    966a:	0f 4b       	mov	r11,	r15	
    966c:	8c 12       	call	r12		
    966e:	1f 3c       	jmp	$+64     	;abs 0x96ae
    9670:	b0 12 62 91 	call	#0x9162	
    9674:	1c 42 86 02 	mov	&0x0286,r12	
    9678:	1f 42 8a 02 	mov	&0x028a,r15	
    967c:	4d 43       	clr.b	r13		
    967e:	3e 40 fd ff 	mov	#-3,	r14	;#0xfffd
    9682:	8c 12       	call	r12		
    9684:	14 3c       	jmp	$+42     	;abs 0x96ae
    9686:	b0 12 62 91 	call	#0x9162	
    968a:	1c 42 86 02 	mov	&0x0286,r12	
    968e:	1f 42 8a 02 	mov	&0x028a,r15	
    9692:	4d 43       	clr.b	r13		
    9694:	3e 40 fe ff 	mov	#-2,	r14	;#0xfffe
    9698:	8c 12       	call	r12		
    969a:	09 3c       	jmp	$+20     	;abs 0x96ae
    969c:	b0 12 62 91 	call	#0x9162	
    96a0:	1c 42 86 02 	mov	&0x0286,r12	
    96a4:	1f 42 8a 02 	mov	&0x028a,r15	
    96a8:	4d 43       	clr.b	r13		
    96aa:	3e 43       	mov	#-1,	r14	;r3 As==11
    96ac:	8c 12       	call	r12		
    96ae:	b0 12 56 8d 	call	#0x8d56	
    96b2:	b0 12 6c 8d 	call	#0x8d6c	
    96b6:	31 50 0a 00 	add	#10,	r1	;#0x000a
    96ba:	34 41       	pop	r4		
    96bc:	3b 41       	pop	r11		
    96be:	30 41       	ret			

000096c0 <cc2500_rx_register_cb>:
    96c0:	04 12       	push	r4		
    96c2:	04 41       	mov	r1,	r4	
    96c4:	24 53       	incd	r4		
    96c6:	21 83       	decd	r1		
    96c8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    96cc:	92 44 fc ff 	mov	-4(r4),	&0x0286	;0xfffc(r4)
    96d0:	86 02 
    96d2:	21 53       	incd	r1		
    96d4:	34 41       	pop	r4		
    96d6:	30 41       	ret			

000096d8 <cc2500_packet_status>:
    96d8:	04 12       	push	r4		
    96da:	04 41       	mov	r1,	r4	
    96dc:	24 53       	incd	r4		
    96de:	21 83       	decd	r1		
    96e0:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    96e4:	b0 12 90 8e 	call	#0x8e90	
    96e8:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    96ec:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    96f0:	21 53       	incd	r1		
    96f2:	34 41       	pop	r4		
    96f4:	30 41       	ret			

000096f6 <cc2500_cca>:
    96f6:	04 12       	push	r4		
    96f8:	04 41       	mov	r1,	r4	
    96fa:	24 53       	incd	r4		
    96fc:	21 83       	decd	r1		
    96fe:	b0 12 d8 96 	call	#0x96d8	
    9702:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9706:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    970a:	4f 4f       	mov.b	r15,	r15	
    970c:	12 c3       	clrc			
    970e:	4f 10       	rrc.b	r15		
    9710:	12 c3       	clrc			
    9712:	4f 10       	rrc.b	r15		
    9714:	12 c3       	clrc			
    9716:	4f 10       	rrc.b	r15		
    9718:	12 c3       	clrc			
    971a:	4f 10       	rrc.b	r15		
    971c:	4f 4f       	mov.b	r15,	r15	
    971e:	1f f3       	and	#1,	r15	;r3 As==01
    9720:	21 53       	incd	r1		
    9722:	34 41       	pop	r4		
    9724:	30 41       	ret			

00009726 <cc2500_get_rssi>:
    9726:	04 12       	push	r4		
    9728:	04 41       	mov	r1,	r4	
    972a:	24 53       	incd	r4		
    972c:	21 83       	decd	r1		
    972e:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    9732:	b0 12 90 8e 	call	#0x8e90	
    9736:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    973a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    973e:	21 53       	incd	r1		
    9740:	34 41       	pop	r4		
    9742:	30 41       	ret			

00009744 <cc2500_idle>:
    9744:	04 12       	push	r4		
    9746:	04 41       	mov	r1,	r4	
    9748:	24 53       	incd	r4		
    974a:	b0 12 14 8d 	call	#0x8d14	
    974e:	b0 12 2a 8d 	call	#0x8d2a	
    9752:	b0 12 62 91 	call	#0x9162	
    9756:	3f 40 36 00 	mov	#54,	r15	;#0x0036
    975a:	b0 12 0a 8e 	call	#0x8e0a	
    975e:	4f 43       	clr.b	r15		
    9760:	b0 12 00 90 	call	#0x9000	
    9764:	34 41       	pop	r4		
    9766:	30 41       	ret			

00009768 <cc2500_sleep>:
    9768:	04 12       	push	r4		
    976a:	04 41       	mov	r1,	r4	
    976c:	24 53       	incd	r4		
    976e:	3f 40 39 00 	mov	#57,	r15	;#0x0039
    9772:	b0 12 0a 8e 	call	#0x8e0a	
    9776:	34 41       	pop	r4		
    9778:	30 41       	ret			

0000977a <cc2500_reset>:
    977a:	04 12       	push	r4		
    977c:	04 41       	mov	r1,	r4	
    977e:	24 53       	incd	r4		
    9780:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9784:	b0 12 0a 8e 	call	#0x8e0a	
    9788:	4f 43       	clr.b	r15		
    978a:	b0 12 00 90 	call	#0x9000	
    978e:	34 41       	pop	r4		
    9790:	30 41       	ret			

00009792 <cc2500_wakeup>:
    9792:	04 12       	push	r4		
    9794:	04 41       	mov	r1,	r4	
    9796:	24 53       	incd	r4		
    9798:	b0 12 b6 9e 	call	#0x9eb6	
    979c:	03 43       	nop			
    979e:	b0 12 0c 9e 	call	#0x9e0c	
    97a2:	0f 93       	tst	r15		
    97a4:	fc 23       	jnz	$-6      	;abs 0x979e
    97a6:	b0 12 cc 9e 	call	#0x9ecc	
    97aa:	b0 12 44 97 	call	#0x9744	
    97ae:	4f 43       	clr.b	r15		
    97b0:	b0 12 00 90 	call	#0x9000	
    97b4:	34 41       	pop	r4		
    97b6:	30 41       	ret			

000097b8 <cc2500_variables_bootstrap>:
    97b8:	04 12       	push	r4		
    97ba:	04 41       	mov	r1,	r4	
    97bc:	24 53       	incd	r4		
    97be:	c2 43 8c 02 	mov.b	#0,	&0x028c	;r3 As==00
    97c2:	82 43 8a 02 	mov	#0,	&0x028a	;r3 As==00
    97c6:	c2 43 6e 02 	mov.b	#0,	&0x026e	;r3 As==00
    97ca:	c2 43 70 02 	mov.b	#0,	&0x0270	;r3 As==00
    97ce:	34 41       	pop	r4		
    97d0:	30 41       	ret			

000097d2 <CC_ASSERT>:
    97d2:	04 12       	push	r4		
    97d4:	04 41       	mov	r1,	r4	
    97d6:	24 53       	incd	r4		
    97d8:	21 83       	decd	r1		
    97da:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    97de:	21 53       	incd	r1		
    97e0:	34 41       	pop	r4		
    97e2:	30 41       	ret			

000097e4 <cc2500_init>:
    97e4:	04 12       	push	r4		
    97e6:	04 41       	mov	r1,	r4	
    97e8:	24 53       	incd	r4		
    97ea:	21 83       	decd	r1		
    97ec:	b0 12 b8 97 	call	#0x97b8	
    97f0:	b0 12 98 8d 	call	#0x8d98	
    97f4:	b0 12 82 8d 	call	#0x8d82	
    97f8:	b0 12 b6 9e 	call	#0x9eb6	
    97fc:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    9800:	b0 12 54 9b 	call	#0x9b54	
    9804:	b0 12 cc 9e 	call	#0x9ecc	
    9808:	3f 40 28 00 	mov	#40,	r15	;#0x0028
    980c:	b0 12 54 9b 	call	#0x9b54	
    9810:	b0 12 b6 9e 	call	#0x9eb6	
    9814:	03 43       	nop			
    9816:	b0 12 0c 9e 	call	#0x9e0c	
    981a:	0f 93       	tst	r15		
    981c:	fc 23       	jnz	$-6      	;abs 0x9816
    981e:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9822:	b0 12 d2 9d 	call	#0x9dd2	
    9826:	03 43       	nop			
    9828:	b0 12 0c 9e 	call	#0x9e0c	
    982c:	0f 93       	tst	r15		
    982e:	fc 23       	jnz	$-6      	;abs 0x9828
    9830:	b0 12 cc 9e 	call	#0x9ecc	
    9834:	3e 40 a5 00 	mov	#165,	r14	;#0x00a5
    9838:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    983c:	b0 12 2c 8e 	call	#0x8e2c	
    9840:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9844:	b0 12 5a 8e 	call	#0x8e5a	
    9848:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    984c:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    9850:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9854:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    9858:	1f 43       	mov	#1,	r15	;r3 As==01
    985a:	3e 90 a5 00 	cmp	#165,	r14	;#0x00a5
    985e:	01 24       	jz	$+4      	;abs 0x9862
    9860:	0f 43       	clr	r15		
    9862:	b0 12 d2 97 	call	#0x97d2	
    9866:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    986a:	b0 12 90 8e 	call	#0x8e90	
    986e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9872:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    9876:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    987a:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    987e:	1f 43       	mov	#1,	r15	;r3 As==01
    9880:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    9884:	01 24       	jz	$+4      	;abs 0x9888
    9886:	0f 43       	clr	r15		
    9888:	b0 12 d2 97 	call	#0x97d2	
    988c:	3f 40 31 00 	mov	#49,	r15	;#0x0031
    9890:	b0 12 90 8e 	call	#0x8e90	
    9894:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9898:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    989c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    98a0:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    98a4:	1f 43       	mov	#1,	r15	;r3 As==01
    98a6:	3e 90 03 00 	cmp	#3,	r14	;#0x0003
    98aa:	01 2c       	jc	$+4      	;abs 0x98ae
    98ac:	0f 43       	clr	r15		
    98ae:	b0 12 d2 97 	call	#0x97d2	
    98b2:	3f 40 14 b1 	mov	#-20204,r15	;#0xb114
    98b6:	b0 12 8c 91 	call	#0x918c	
    98ba:	21 53       	incd	r1		
    98bc:	34 41       	pop	r4		
    98be:	30 41       	ret			

000098c0 <cc2500_gdox_signal_handler>:
    98c0:	04 12       	push	r4		
    98c2:	04 41       	mov	r1,	r4	
    98c4:	24 53       	incd	r4		
    98c6:	21 83       	decd	r1		
    98c8:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    98cc:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    98d0:	1f f3       	and	#1,	r15	;r3 As==01
    98d2:	4f 4f       	mov.b	r15,	r15	
    98d4:	4f 93       	tst.b	r15		
    98d6:	02 24       	jz	$+6      	;abs 0x98dc
    98d8:	b0 12 88 95 	call	#0x9588	
    98dc:	21 53       	incd	r1		
    98de:	34 41       	pop	r4		
    98e0:	30 41       	ret			

000098e2 <port2_irq_handler>:
    98e2:	0f 12       	push	r15		
    98e4:	0e 12       	push	r14		
    98e6:	0d 12       	push	r13		
    98e8:	0c 12       	push	r12		
    98ea:	04 12       	push	r4		
    98ec:	04 41       	mov	r1,	r4	
    98ee:	34 50 0a 00 	add	#10,	r4	;#0x000a
    98f2:	21 83       	decd	r1		
    98f4:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    98f8:	c4 43 f5 ff 	mov.b	#0,	-11(r4)	;r3 As==00, 0xfff5(r4)
    98fc:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9900:	4f 4f       	mov.b	r15,	r15	
    9902:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9906:	4e 4e       	mov.b	r14,	r14	
    9908:	3e f0 40 00 	and	#64,	r14	;#0x0040
    990c:	0f fe       	and	r14,	r15	
    990e:	0f 93       	tst	r15		
    9910:	0a 24       	jz	$+22     	;abs 0x9926
    9912:	d4 d3 f4 ff 	bis.b	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    9916:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    991a:	5f 42 2b 00 	mov.b	&0x002b,r15	
    991e:	7f f0 40 00 	and.b	#64,	r15	;#0x0040
    9922:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    9926:	5f 42 2b 00 	mov.b	&0x002b,r15	
    992a:	4f 4f       	mov.b	r15,	r15	
    992c:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9930:	4e 4e       	mov.b	r14,	r14	
    9932:	3e f0 80 00 	and	#128,	r14	;#0x0080
    9936:	0f fe       	and	r14,	r15	
    9938:	0f 93       	tst	r15		
    993a:	0a 24       	jz	$+22     	;abs 0x9950
    993c:	e4 d3 f4 ff 	bis.b	#2,	-12(r4)	;r3 As==10, 0xfff4(r4)
    9940:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    9944:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9948:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    994c:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    9950:	c4 93 f4 ff 	tst.b	-12(r4)	;0xfff4(r4)
    9954:	04 24       	jz	$+10     	;abs 0x995e
    9956:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    995a:	b0 12 c0 98 	call	#0x98c0	
    995e:	c4 93 f5 ff 	tst.b	-11(r4)	;0xfff5(r4)
    9962:	03 24       	jz	$+8      	;abs 0x996a
    9964:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9968:	00 00 
    996a:	c2 43 2b 00 	mov.b	#0,	&0x002b	;r3 As==00
    996e:	21 53       	incd	r1		
    9970:	34 41       	pop	r4		
    9972:	3c 41       	pop	r12		
    9974:	3d 41       	pop	r13		
    9976:	3e 41       	pop	r14		
    9978:	3f 41       	pop	r15		
    997a:	00 13       	reti			

0000997c <get_mclk_freq_mhz>:
    997c:	04 12       	push	r4		
    997e:	04 41       	mov	r1,	r4	
    9980:	24 53       	incd	r4		
    9982:	1f 42 72 02 	mov	&0x0272,r15	
    9986:	34 41       	pop	r4		
    9988:	30 41       	ret			

0000998a <set_mcu_speed>:
    998a:	04 12       	push	r4		
    998c:	04 41       	mov	r1,	r4	
    998e:	24 53       	incd	r4		
    9990:	21 83       	decd	r1		
    9992:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9996:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    999a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    999e:	3f 92       	cmp	#8,	r15	;r2 As==11
    99a0:	16 24       	jz	$+46     	;abs 0x99ce
    99a2:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    99a6:	03 34       	jge	$+8      	;abs 0x99ae
    99a8:	1f 93       	cmp	#1,	r15	;r3 As==01
    99aa:	08 24       	jz	$+18     	;abs 0x99bc
    99ac:	2b 3c       	jmp	$+88     	;abs 0x9a04
    99ae:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    99b2:	16 24       	jz	$+46     	;abs 0x99e0
    99b4:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    99b8:	1c 24       	jz	$+58     	;abs 0x99f2
    99ba:	24 3c       	jmp	$+74     	;abs 0x9a04
    99bc:	5f 42 ff 10 	mov.b	&0x10ff,r15	
    99c0:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99c4:	5f 42 fe 10 	mov.b	&0x10fe,r15	
    99c8:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    99cc:	1b 3c       	jmp	$+56     	;abs 0x9a04
    99ce:	5f 42 fd 10 	mov.b	&0x10fd,r15	
    99d2:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99d6:	5f 42 fc 10 	mov.b	&0x10fc,r15	
    99da:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    99de:	12 3c       	jmp	$+38     	;abs 0x9a04
    99e0:	5f 42 fb 10 	mov.b	&0x10fb,r15	
    99e4:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99e8:	5f 42 fa 10 	mov.b	&0x10fa,r15	
    99ec:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    99f0:	09 3c       	jmp	$+20     	;abs 0x9a04
    99f2:	5f 42 f9 10 	mov.b	&0x10f9,r15	
    99f6:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99fa:	5f 42 f8 10 	mov.b	&0x10f8,r15	
    99fe:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    9a02:	03 43       	nop			
    9a04:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    9a08:	2f 93       	cmp	#2,	r15	;r3 As==10
    9a0a:	0e 24       	jz	$+30     	;abs 0x9a28
    9a0c:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    9a10:	03 34       	jge	$+8      	;abs 0x9a18
    9a12:	1f 93       	cmp	#1,	r15	;r3 As==01
    9a14:	06 24       	jz	$+14     	;abs 0x9a22
    9a16:	12 3c       	jmp	$+38     	;abs 0x9a3c
    9a18:	2f 92       	cmp	#4,	r15	;r2 As==10
    9a1a:	09 24       	jz	$+20     	;abs 0x9a2e
    9a1c:	3f 92       	cmp	#8,	r15	;r2 As==11
    9a1e:	0a 24       	jz	$+22     	;abs 0x9a34
    9a20:	0d 3c       	jmp	$+28     	;abs 0x9a3c
    9a22:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
    9a26:	0a 3c       	jmp	$+22     	;abs 0x9a3c
    9a28:	e2 43 58 00 	mov.b	#2,	&0x0058	;r3 As==10
    9a2c:	07 3c       	jmp	$+16     	;abs 0x9a3c
    9a2e:	e2 42 58 00 	mov.b	#4,	&0x0058	;r2 As==10
    9a32:	04 3c       	jmp	$+10     	;abs 0x9a3c
    9a34:	f2 40 06 00 	mov.b	#6,	&0x0058	;#0x0006
    9a38:	58 00 
    9a3a:	03 43       	nop			
    9a3c:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9a40:	82 4f 72 02 	mov	r15,	&0x0272	
    9a44:	21 53       	incd	r1		
    9a46:	34 41       	pop	r4		
    9a48:	30 41       	ret			

00009a4a <set_mcu_speed_dco_mclk_1MHz_smclk_1MHz>:
    9a4a:	04 12       	push	r4		
    9a4c:	04 41       	mov	r1,	r4	
    9a4e:	24 53       	incd	r4		
    9a50:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9a52:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9a54:	b0 12 8a 99 	call	#0x998a	
    9a58:	34 41       	pop	r4		
    9a5a:	30 41       	ret			

00009a5c <set_mcu_speed_dco_mclk_8MHz_smclk_8MHz>:
    9a5c:	04 12       	push	r4		
    9a5e:	04 41       	mov	r1,	r4	
    9a60:	24 53       	incd	r4		
    9a62:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9a64:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a66:	b0 12 8a 99 	call	#0x998a	
    9a6a:	34 41       	pop	r4		
    9a6c:	30 41       	ret			

00009a6e <set_mcu_speed_dco_mclk_8MHz_smclk_4MHz>:
    9a6e:	04 12       	push	r4		
    9a70:	04 41       	mov	r1,	r4	
    9a72:	24 53       	incd	r4		
    9a74:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9a76:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a78:	b0 12 8a 99 	call	#0x998a	
    9a7c:	34 41       	pop	r4		
    9a7e:	30 41       	ret			

00009a80 <set_mcu_speed_dco_mclk_8MHz_smclk_2MHz>:
    9a80:	04 12       	push	r4		
    9a82:	04 41       	mov	r1,	r4	
    9a84:	24 53       	incd	r4		
    9a86:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9a88:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a8a:	b0 12 8a 99 	call	#0x998a	
    9a8e:	34 41       	pop	r4		
    9a90:	30 41       	ret			

00009a92 <set_mcu_speed_dco_mclk_8MHz_smclk_1MHz>:
    9a92:	04 12       	push	r4		
    9a94:	04 41       	mov	r1,	r4	
    9a96:	24 53       	incd	r4		
    9a98:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9a9a:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a9c:	b0 12 8a 99 	call	#0x998a	
    9aa0:	34 41       	pop	r4		
    9aa2:	30 41       	ret			

00009aa4 <set_mcu_speed_dco_mclk_12MHz_smclk_12MHz>:
    9aa4:	04 12       	push	r4		
    9aa6:	04 41       	mov	r1,	r4	
    9aa8:	24 53       	incd	r4		
    9aaa:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9aac:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9ab0:	b0 12 8a 99 	call	#0x998a	
    9ab4:	34 41       	pop	r4		
    9ab6:	30 41       	ret			

00009ab8 <set_mcu_speed_dco_mclk_12MHz_smclk_6MHz>:
    9ab8:	04 12       	push	r4		
    9aba:	04 41       	mov	r1,	r4	
    9abc:	24 53       	incd	r4		
    9abe:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9ac0:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9ac4:	b0 12 8a 99 	call	#0x998a	
    9ac8:	34 41       	pop	r4		
    9aca:	30 41       	ret			

00009acc <set_mcu_speed_dco_mclk_12MHz_smclk_3MHz>:
    9acc:	04 12       	push	r4		
    9ace:	04 41       	mov	r1,	r4	
    9ad0:	24 53       	incd	r4		
    9ad2:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9ad4:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9ad8:	b0 12 8a 99 	call	#0x998a	
    9adc:	34 41       	pop	r4		
    9ade:	30 41       	ret			

00009ae0 <set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz>:
    9ae0:	04 12       	push	r4		
    9ae2:	04 41       	mov	r1,	r4	
    9ae4:	24 53       	incd	r4		
    9ae6:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9ae8:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9aec:	b0 12 8a 99 	call	#0x998a	
    9af0:	34 41       	pop	r4		
    9af2:	30 41       	ret			

00009af4 <set_mcu_speed_dco_mclk_16MHz_smclk_16MHz>:
    9af4:	04 12       	push	r4		
    9af6:	04 41       	mov	r1,	r4	
    9af8:	24 53       	incd	r4		
    9afa:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9afc:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b00:	b0 12 8a 99 	call	#0x998a	
    9b04:	34 41       	pop	r4		
    9b06:	30 41       	ret			

00009b08 <set_mcu_speed_dco_mclk_16MHz_smclk_8MHz>:
    9b08:	04 12       	push	r4		
    9b0a:	04 41       	mov	r1,	r4	
    9b0c:	24 53       	incd	r4		
    9b0e:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9b10:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b14:	b0 12 8a 99 	call	#0x998a	
    9b18:	34 41       	pop	r4		
    9b1a:	30 41       	ret			

00009b1c <set_mcu_speed_dco_mclk_16MHz_smclk_4MHz>:
    9b1c:	04 12       	push	r4		
    9b1e:	04 41       	mov	r1,	r4	
    9b20:	24 53       	incd	r4		
    9b22:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9b24:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b28:	b0 12 8a 99 	call	#0x998a	
    9b2c:	34 41       	pop	r4		
    9b2e:	30 41       	ret			

00009b30 <set_mcu_speed_dco_mclk_16MHz_smclk_2MHz>:
    9b30:	04 12       	push	r4		
    9b32:	04 41       	mov	r1,	r4	
    9b34:	24 53       	incd	r4		
    9b36:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9b38:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b3c:	b0 12 8a 99 	call	#0x998a	
    9b40:	34 41       	pop	r4		
    9b42:	30 41       	ret			

00009b44 <loop_4_cycles>:
    9b44:	04 12       	push	r4		
    9b46:	04 41       	mov	r1,	r4	
    9b48:	24 53       	incd	r4		
    9b4a:	3e 53       	add	#-1,	r14	;r3 As==11
    9b4c:	3f 63       	addc	#-1,	r15	;r3 As==11
    9b4e:	fd 2f       	jc	$-4      	;abs 0x9b4a
    9b50:	34 41       	pop	r4		
    9b52:	30 41       	ret			

00009b54 <delay_usec>:
    9b54:	04 12       	push	r4		
    9b56:	04 41       	mov	r1,	r4	
    9b58:	24 53       	incd	r4		
    9b5a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9b5e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9b62:	1f 42 72 02 	mov	&0x0272,r15	
    9b66:	3f 92       	cmp	#8,	r15	;r2 As==11
    9b68:	18 24       	jz	$+50     	;abs 0x9b9a
    9b6a:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9b6e:	03 2c       	jc	$+8      	;abs 0x9b76
    9b70:	1f 93       	cmp	#1,	r15	;r3 As==01
    9b72:	08 24       	jz	$+18     	;abs 0x9b84
    9b74:	2d 3c       	jmp	$+92     	;abs 0x9bd0
    9b76:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9b7a:	17 24       	jz	$+48     	;abs 0x9baa
    9b7c:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9b80:	1e 24       	jz	$+62     	;abs 0x9bbe
    9b82:	26 3c       	jmp	$+78     	;abs 0x9bd0
    9b84:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9b88:	12 c3       	clrc			
    9b8a:	0f 10       	rrc	r15		
    9b8c:	12 c3       	clrc			
    9b8e:	0f 10       	rrc	r15		
    9b90:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9b94:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9b98:	26 3c       	jmp	$+78     	;abs 0x9be6
    9b9a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9b9e:	0f 5f       	rla	r15		
    9ba0:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9ba4:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9ba8:	1e 3c       	jmp	$+62     	;abs 0x9be6
    9baa:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9bae:	0f 4e       	mov	r14,	r15	
    9bb0:	0f 5f       	rla	r15		
    9bb2:	0f 5e       	add	r14,	r15	
    9bb4:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bb8:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bbc:	14 3c       	jmp	$+42     	;abs 0x9be6
    9bbe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bc2:	0f 5f       	rla	r15		
    9bc4:	0f 5f       	rla	r15		
    9bc6:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bca:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bce:	0b 3c       	jmp	$+24     	;abs 0x9be6
    9bd0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bd4:	12 c3       	clrc			
    9bd6:	0f 10       	rrc	r15		
    9bd8:	12 c3       	clrc			
    9bda:	0f 10       	rrc	r15		
    9bdc:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9be0:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9be4:	03 43       	nop			
    9be6:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9bea:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9bee:	b0 12 44 9b 	call	#0x9b44	
    9bf2:	31 50 06 00 	add	#6,	r1	;#0x0006
    9bf6:	34 41       	pop	r4		
    9bf8:	30 41       	ret			

00009bfa <delay_ms>:
    9bfa:	04 12       	push	r4		
    9bfc:	04 41       	mov	r1,	r4	
    9bfe:	24 53       	incd	r4		
    9c00:	31 82       	sub	#8,	r1	;r2 As==11
    9c02:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9c06:	1f 42 72 02 	mov	&0x0272,r15	
    9c0a:	3f 92       	cmp	#8,	r15	;r2 As==11
    9c0c:	13 24       	jz	$+40     	;abs 0x9c34
    9c0e:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9c12:	03 2c       	jc	$+8      	;abs 0x9c1a
    9c14:	1f 93       	cmp	#1,	r15	;r3 As==01
    9c16:	08 24       	jz	$+18     	;abs 0x9c28
    9c18:	1f 3c       	jmp	$+64     	;abs 0x9c58
    9c1a:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9c1e:	10 24       	jz	$+34     	;abs 0x9c40
    9c20:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9c24:	13 24       	jz	$+40     	;abs 0x9c4c
    9c26:	18 3c       	jmp	$+50     	;abs 0x9c58
    9c28:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c2c:	f8 ff 
    9c2e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c32:	18 3c       	jmp	$+50     	;abs 0x9c64
    9c34:	b4 40 d0 07 	mov	#2000,	-8(r4)	;#0x07d0, 0xfff8(r4)
    9c38:	f8 ff 
    9c3a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c3e:	12 3c       	jmp	$+38     	;abs 0x9c64
    9c40:	b4 40 b8 0b 	mov	#3000,	-8(r4)	;#0x0bb8, 0xfff8(r4)
    9c44:	f8 ff 
    9c46:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c4a:	0c 3c       	jmp	$+26     	;abs 0x9c64
    9c4c:	b4 40 a0 0f 	mov	#4000,	-8(r4)	;#0x0fa0, 0xfff8(r4)
    9c50:	f8 ff 
    9c52:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c56:	06 3c       	jmp	$+14     	;abs 0x9c64
    9c58:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c5c:	f8 ff 
    9c5e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c62:	03 43       	nop			
    9c64:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    9c68:	08 3c       	jmp	$+18     	;abs 0x9c7a
    9c6a:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9c6e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9c72:	b0 12 44 9b 	call	#0x9b44	
    9c76:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    9c7a:	94 94 fc ff 	cmp	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    9c7e:	f6 ff 
    9c80:	f4 2b       	jnc	$-22     	;abs 0x9c6a
    9c82:	31 52       	add	#8,	r1	;r2 As==11
    9c84:	34 41       	pop	r4		
    9c86:	30 41       	ret			

00009c88 <led_green_off>:
    9c88:	04 12       	push	r4		
    9c8a:	04 41       	mov	r1,	r4	
    9c8c:	24 53       	incd	r4		
    9c8e:	5f 42 21 00 	mov.b	&0x0021,r15	
    9c92:	7f f0 fd ff 	and.b	#-3,	r15	;#0xfffd
    9c96:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9c9a:	34 41       	pop	r4		
    9c9c:	30 41       	ret			

00009c9e <led_green_on>:
    9c9e:	04 12       	push	r4		
    9ca0:	04 41       	mov	r1,	r4	
    9ca2:	24 53       	incd	r4		
    9ca4:	5f 42 21 00 	mov.b	&0x0021,r15	
    9ca8:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9caa:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cae:	34 41       	pop	r4		
    9cb0:	30 41       	ret			

00009cb2 <led_green_switch>:
    9cb2:	04 12       	push	r4		
    9cb4:	04 41       	mov	r1,	r4	
    9cb6:	24 53       	incd	r4		
    9cb8:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cbc:	6f e3       	xor.b	#2,	r15	;r3 As==10
    9cbe:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cc2:	34 41       	pop	r4		
    9cc4:	30 41       	ret			

00009cc6 <led_red_off>:
    9cc6:	04 12       	push	r4		
    9cc8:	04 41       	mov	r1,	r4	
    9cca:	24 53       	incd	r4		
    9ccc:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cd0:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9cd4:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cd8:	34 41       	pop	r4		
    9cda:	30 41       	ret			

00009cdc <led_red_on>:
    9cdc:	04 12       	push	r4		
    9cde:	04 41       	mov	r1,	r4	
    9ce0:	24 53       	incd	r4		
    9ce2:	5f 42 21 00 	mov.b	&0x0021,r15	
    9ce6:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9ce8:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cec:	34 41       	pop	r4		
    9cee:	30 41       	ret			

00009cf0 <led_red_switch>:
    9cf0:	04 12       	push	r4		
    9cf2:	04 41       	mov	r1,	r4	
    9cf4:	24 53       	incd	r4		
    9cf6:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cfa:	5f e3       	xor.b	#1,	r15	;r3 As==01
    9cfc:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d00:	34 41       	pop	r4		
    9d02:	30 41       	ret			

00009d04 <leds_off>:
    9d04:	04 12       	push	r4		
    9d06:	04 41       	mov	r1,	r4	
    9d08:	24 53       	incd	r4		
    9d0a:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d0e:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d12:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d16:	34 41       	pop	r4		
    9d18:	30 41       	ret			

00009d1a <leds_on>:
    9d1a:	04 12       	push	r4		
    9d1c:	04 41       	mov	r1,	r4	
    9d1e:	24 53       	incd	r4		
    9d20:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d24:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d28:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d2c:	34 41       	pop	r4		
    9d2e:	30 41       	ret			

00009d30 <leds_init>:
    9d30:	04 12       	push	r4		
    9d32:	04 41       	mov	r1,	r4	
    9d34:	24 53       	incd	r4		
    9d36:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d3a:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d3e:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d42:	5f 42 22 00 	mov.b	&0x0022,r15	
    9d46:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d4a:	c2 4f 22 00 	mov.b	r15,	&0x0022	
    9d4e:	5f 42 26 00 	mov.b	&0x0026,r15	
    9d52:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d56:	c2 4f 26 00 	mov.b	r15,	&0x0026	
    9d5a:	b0 12 04 9d 	call	#0x9d04	
    9d5e:	34 41       	pop	r4		
    9d60:	30 41       	ret			

00009d62 <spi_init>:
    9d62:	04 12       	push	r4		
    9d64:	04 41       	mov	r1,	r4	
    9d66:	24 53       	incd	r4		
    9d68:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d6c:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9d6e:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d72:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d76:	7f d2       	bis.b	#8,	r15	;r2 As==11
    9d78:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d7c:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d80:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9d82:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d86:	5f 42 19 00 	mov.b	&0x0019,r15	
    9d8a:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9d8c:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9d90:	d2 43 69 00 	mov.b	#1,	&0x0069	;r3 As==01
    9d94:	f2 40 81 ff 	mov.b	#-127,	&0x0069	;#0xff81
    9d98:	69 00 
    9d9a:	f2 40 a9 ff 	mov.b	#-87,	&0x0068	;#0xffa9
    9d9e:	68 00 
    9da0:	e2 43 6a 00 	mov.b	#2,	&0x006a	;r3 As==10
    9da4:	c2 43 6b 00 	mov.b	#0,	&0x006b	;r3 As==00
    9da8:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9dac:	7f d0 0e 00 	bis.b	#14,	r15	;#0x000e
    9db0:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    9db4:	5f 42 69 00 	mov.b	&0x0069,r15	
    9db8:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9dbc:	c2 4f 69 00 	mov.b	r15,	&0x0069	
    9dc0:	34 41       	pop	r4		
    9dc2:	30 41       	ret			

00009dc4 <spi_clear_rx_IFG>:
    9dc4:	04 12       	push	r4		
    9dc6:	04 41       	mov	r1,	r4	
    9dc8:	24 53       	incd	r4		
    9dca:	e2 c2 03 00 	bic.b	#4,	&0x0003	;r2 As==10
    9dce:	34 41       	pop	r4		
    9dd0:	30 41       	ret			

00009dd2 <spi_tx_rx>:
    9dd2:	04 12       	push	r4		
    9dd4:	04 41       	mov	r1,	r4	
    9dd6:	24 53       	incd	r4		
    9dd8:	21 82       	sub	#4,	r1	;r2 As==10
    9dda:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9dde:	b0 12 c4 9d 	call	#0x9dc4	
    9de2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9de6:	4f 4f       	mov.b	r15,	r15	
    9de8:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9dec:	5f 42 03 00 	mov.b	&0x0003,r15	
    9df0:	4f 4f       	mov.b	r15,	r15	
    9df2:	2f f2       	and	#4,	r15	;r2 As==10
    9df4:	0f 93       	tst	r15		
    9df6:	fa 27       	jz	$-10     	;abs 0x9dec
    9df8:	5f 42 6e 00 	mov.b	&0x006e,r15	
    9dfc:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9e00:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9e04:	8f 11       	sxt	r15		
    9e06:	21 52       	add	#4,	r1	;r2 As==10
    9e08:	34 41       	pop	r4		
    9e0a:	30 41       	ret			

00009e0c <spi_check_miso_high>:
    9e0c:	04 12       	push	r4		
    9e0e:	04 41       	mov	r1,	r4	
    9e10:	24 53       	incd	r4		
    9e12:	5f 42 18 00 	mov.b	&0x0018,r15	
    9e16:	4f 4f       	mov.b	r15,	r15	
    9e18:	2f f2       	and	#4,	r15	;r2 As==10
    9e1a:	34 41       	pop	r4		
    9e1c:	30 41       	ret			

00009e1e <spi_tx_burst>:
    9e1e:	04 12       	push	r4		
    9e20:	04 41       	mov	r1,	r4	
    9e22:	24 53       	incd	r4		
    9e24:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9e28:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9e2c:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9e30:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9e34:	11 3c       	jmp	$+36     	;abs 0x9e58
    9e36:	b0 12 c4 9d 	call	#0x9dc4	
    9e3a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9e3e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9e42:	6f 4f       	mov.b	@r15,	r15	
    9e44:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9e48:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e4c:	4f 4f       	mov.b	r15,	r15	
    9e4e:	2f f2       	and	#4,	r15	;r2 As==10
    9e50:	0f 93       	tst	r15		
    9e52:	fa 27       	jz	$-10     	;abs 0x9e48
    9e54:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9e58:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9e5c:	f8 ff 
    9e5e:	eb 3b       	jl	$-40     	;abs 0x9e36
    9e60:	31 50 06 00 	add	#6,	r1	;#0x0006
    9e64:	34 41       	pop	r4		
    9e66:	30 41       	ret			

00009e68 <spi_rx_burst>:
    9e68:	04 12       	push	r4		
    9e6a:	04 41       	mov	r1,	r4	
    9e6c:	24 53       	incd	r4		
    9e6e:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9e72:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9e76:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9e7a:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9e7e:	13 3c       	jmp	$+40     	;abs 0x9ea6
    9e80:	f2 40 55 00 	mov.b	#85,	&0x006f	;#0x0055
    9e84:	6f 00 
    9e86:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e8a:	4f 4f       	mov.b	r15,	r15	
    9e8c:	2f f2       	and	#4,	r15	;r2 As==10
    9e8e:	0f 93       	tst	r15		
    9e90:	fa 27       	jz	$-10     	;abs 0x9e86
    9e92:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9e96:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9e9a:	5e 42 6e 00 	mov.b	&0x006e,r14	
    9e9e:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    9ea2:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9ea6:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9eaa:	f8 ff 
    9eac:	e9 3b       	jl	$-44     	;abs 0x9e80
    9eae:	31 50 06 00 	add	#6,	r1	;#0x0006
    9eb2:	34 41       	pop	r4		
    9eb4:	30 41       	ret			

00009eb6 <spi_select_radio>:
    9eb6:	04 12       	push	r4		
    9eb8:	04 41       	mov	r1,	r4	
    9eba:	24 53       	incd	r4		
    9ebc:	5f 42 19 00 	mov.b	&0x0019,r15	
    9ec0:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9ec4:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9ec8:	34 41       	pop	r4		
    9eca:	30 41       	ret			

00009ecc <spi_deselect_radio>:
    9ecc:	04 12       	push	r4		
    9ece:	04 41       	mov	r1,	r4	
    9ed0:	24 53       	incd	r4		
    9ed2:	5f 42 19 00 	mov.b	&0x0019,r15	
    9ed6:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9ed8:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9edc:	34 41       	pop	r4		
    9ede:	30 41       	ret			

00009ee0 <Timer_A>:
    9ee0:	0f 12       	push	r15		
    9ee2:	0e 12       	push	r14		
    9ee4:	0d 12       	push	r13		
    9ee6:	0c 12       	push	r12		
    9ee8:	04 12       	push	r4		
    9eea:	04 41       	mov	r1,	r4	
    9eec:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9ef0:	1f 42 74 02 	mov	&0x0274,r15	
    9ef4:	0f 93       	tst	r15		
    9ef6:	03 24       	jz	$+8      	;abs 0x9efe
    9ef8:	1f 42 74 02 	mov	&0x0274,r15	
    9efc:	8f 12       	call	r15		
    9efe:	1f 42 76 02 	mov	&0x0276,r15	
    9f02:	1f 93       	cmp	#1,	r15	;r3 As==01
    9f04:	03 20       	jnz	$+8      	;abs 0x9f0c
    9f06:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9f0a:	00 00 
    9f0c:	34 41       	pop	r4		
    9f0e:	3c 41       	pop	r12		
    9f10:	3d 41       	pop	r13		
    9f12:	3e 41       	pop	r14		
    9f14:	3f 41       	pop	r15		
    9f16:	00 13       	reti			

00009f18 <timerA_init>:
    9f18:	04 12       	push	r4		
    9f1a:	04 41       	mov	r1,	r4	
    9f1c:	24 53       	incd	r4		
    9f1e:	82 43 74 02 	mov	#0,	&0x0274	;r3 As==00
    9f22:	82 43 76 02 	mov	#0,	&0x0276	;r3 As==00
    9f26:	b0 12 b6 9f 	call	#0x9fb6	
    9f2a:	34 41       	pop	r4		
    9f2c:	30 41       	ret			

00009f2e <timerA_register_cb>:
    9f2e:	04 12       	push	r4		
    9f30:	04 41       	mov	r1,	r4	
    9f32:	24 53       	incd	r4		
    9f34:	21 83       	decd	r1		
    9f36:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f3a:	92 44 fc ff 	mov	-4(r4),	&0x0274	;0xfffc(r4)
    9f3e:	74 02 
    9f40:	21 53       	incd	r1		
    9f42:	34 41       	pop	r4		
    9f44:	30 41       	ret			

00009f46 <timerA_set_wakeup>:
    9f46:	04 12       	push	r4		
    9f48:	04 41       	mov	r1,	r4	
    9f4a:	24 53       	incd	r4		
    9f4c:	21 83       	decd	r1		
    9f4e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f52:	92 44 fc ff 	mov	-4(r4),	&0x0276	;0xfffc(r4)
    9f56:	76 02 
    9f58:	21 53       	incd	r1		
    9f5a:	34 41       	pop	r4		
    9f5c:	30 41       	ret			

00009f5e <timerA_start_ticks>:
    9f5e:	04 12       	push	r4		
    9f60:	04 41       	mov	r1,	r4	
    9f62:	24 53       	incd	r4		
    9f64:	21 83       	decd	r1		
    9f66:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f6a:	5f 42 53 00 	mov.b	&0x0053,r15	
    9f6e:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9f72:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    9f76:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    9f7a:	62 01 
    9f7c:	82 43 70 01 	mov	#0,	&0x0170	;r3 As==00
    9f80:	92 44 fc ff 	mov	-4(r4),	&0x0172	;0xfffc(r4)
    9f84:	72 01 
    9f86:	b2 40 10 01 	mov	#272,	&0x0160	;#0x0110
    9f8a:	60 01 
    9f8c:	21 53       	incd	r1		
    9f8e:	34 41       	pop	r4		
    9f90:	30 41       	ret			

00009f92 <timerA_start_milliseconds>:
    9f92:	04 12       	push	r4		
    9f94:	04 41       	mov	r1,	r4	
    9f96:	24 53       	incd	r4		
    9f98:	21 83       	decd	r1		
    9f9a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f9e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9fa2:	0f 4e       	mov	r14,	r15	
    9fa4:	0f 5f       	rla	r15		
    9fa6:	0f 5e       	add	r14,	r15	
    9fa8:	0f 5f       	rla	r15		
    9faa:	0f 5f       	rla	r15		
    9fac:	b0 12 5e 9f 	call	#0x9f5e	
    9fb0:	21 53       	incd	r1		
    9fb2:	34 41       	pop	r4		
    9fb4:	30 41       	ret			

00009fb6 <timerA_stop>:
    9fb6:	04 12       	push	r4		
    9fb8:	04 41       	mov	r1,	r4	
    9fba:	24 53       	incd	r4		
    9fbc:	82 43 60 01 	mov	#0,	&0x0160	;r3 As==00
    9fc0:	34 41       	pop	r4		
    9fc2:	30 41       	ret			

00009fc4 <Timer_B>:
    9fc4:	0f 12       	push	r15		
    9fc6:	0e 12       	push	r14		
    9fc8:	0d 12       	push	r13		
    9fca:	0c 12       	push	r12		
    9fcc:	04 12       	push	r4		
    9fce:	04 41       	mov	r1,	r4	
    9fd0:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9fd4:	1f 42 78 02 	mov	&0x0278,r15	
    9fd8:	0f 93       	tst	r15		
    9fda:	03 24       	jz	$+8      	;abs 0x9fe2
    9fdc:	1f 42 78 02 	mov	&0x0278,r15	
    9fe0:	8f 12       	call	r15		
    9fe2:	1f 42 7a 02 	mov	&0x027a,r15	
    9fe6:	1f 93       	cmp	#1,	r15	;r3 As==01
    9fe8:	03 20       	jnz	$+8      	;abs 0x9ff0
    9fea:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9fee:	00 00 
    9ff0:	34 41       	pop	r4		
    9ff2:	3c 41       	pop	r12		
    9ff4:	3d 41       	pop	r13		
    9ff6:	3e 41       	pop	r14		
    9ff8:	3f 41       	pop	r15		
    9ffa:	00 13       	reti			

00009ffc <timerB_init>:
    9ffc:	04 12       	push	r4		
    9ffe:	04 41       	mov	r1,	r4	
    a000:	24 53       	incd	r4		
    a002:	82 43 78 02 	mov	#0,	&0x0278	;r3 As==00
    a006:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
    a00a:	b0 12 9a a0 	call	#0xa09a	
    a00e:	34 41       	pop	r4		
    a010:	30 41       	ret			

0000a012 <timerB_register_cb>:
    a012:	04 12       	push	r4		
    a014:	04 41       	mov	r1,	r4	
    a016:	24 53       	incd	r4		
    a018:	21 83       	decd	r1		
    a01a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a01e:	92 44 fc ff 	mov	-4(r4),	&0x0278	;0xfffc(r4)
    a022:	78 02 
    a024:	21 53       	incd	r1		
    a026:	34 41       	pop	r4		
    a028:	30 41       	ret			

0000a02a <timerB_set_wakeup>:
    a02a:	04 12       	push	r4		
    a02c:	04 41       	mov	r1,	r4	
    a02e:	24 53       	incd	r4		
    a030:	21 83       	decd	r1		
    a032:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a036:	92 44 fc ff 	mov	-4(r4),	&0x027a	;0xfffc(r4)
    a03a:	7a 02 
    a03c:	21 53       	incd	r1		
    a03e:	34 41       	pop	r4		
    a040:	30 41       	ret			

0000a042 <timerB_start_ticks>:
    a042:	04 12       	push	r4		
    a044:	04 41       	mov	r1,	r4	
    a046:	24 53       	incd	r4		
    a048:	21 83       	decd	r1		
    a04a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a04e:	5f 42 53 00 	mov.b	&0x0053,r15	
    a052:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    a056:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    a05a:	b2 40 10 00 	mov	#16,	&0x0182	;#0x0010
    a05e:	82 01 
    a060:	82 43 90 01 	mov	#0,	&0x0190	;r3 As==00
    a064:	92 44 fc ff 	mov	-4(r4),	&0x0192	;0xfffc(r4)
    a068:	92 01 
    a06a:	b2 40 10 01 	mov	#272,	&0x0180	;#0x0110
    a06e:	80 01 
    a070:	21 53       	incd	r1		
    a072:	34 41       	pop	r4		
    a074:	30 41       	ret			

0000a076 <timerB_start_milliseconds>:
    a076:	04 12       	push	r4		
    a078:	04 41       	mov	r1,	r4	
    a07a:	24 53       	incd	r4		
    a07c:	21 83       	decd	r1		
    a07e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a082:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    a086:	0f 4e       	mov	r14,	r15	
    a088:	0f 5f       	rla	r15		
    a08a:	0f 5e       	add	r14,	r15	
    a08c:	0f 5f       	rla	r15		
    a08e:	0f 5f       	rla	r15		
    a090:	b0 12 42 a0 	call	#0xa042	
    a094:	21 53       	incd	r1		
    a096:	34 41       	pop	r4		
    a098:	30 41       	ret			

0000a09a <timerB_stop>:
    a09a:	04 12       	push	r4		
    a09c:	04 41       	mov	r1,	r4	
    a09e:	24 53       	incd	r4		
    a0a0:	82 43 80 01 	mov	#0,	&0x0180	;r3 As==00
    a0a4:	34 41       	pop	r4		
    a0a6:	30 41       	ret			

0000a0a8 <uart_init>:
    a0a8:	04 12       	push	r4		
    a0aa:	04 41       	mov	r1,	r4	
    a0ac:	24 53       	incd	r4		
    a0ae:	21 83       	decd	r1		
    a0b0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a0b4:	5f 42 1b 00 	mov.b	&0x001b,r15	
    a0b8:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    a0bc:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    a0c0:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a0c4:	7f d0 10 00 	bis.b	#16,	r15	;#0x0010
    a0c8:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    a0cc:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a0d0:	7f f0 df ff 	and.b	#-33,	r15	;#0xffdf
    a0d4:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    a0d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a0dc:	1f 93       	cmp	#1,	r15	;r3 As==01
    a0de:	03 24       	jz	$+8      	;abs 0xa0e6
    a0e0:	3f 92       	cmp	#8,	r15	;r2 As==11
    a0e2:	12 24       	jz	$+38     	;abs 0xa108
    a0e4:	23 3c       	jmp	$+72     	;abs 0xa12c
    a0e6:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a0ea:	61 00 
    a0ec:	f2 40 68 00 	mov.b	#104,	&0x0062	;#0x0068
    a0f0:	62 00 
    a0f2:	c2 43 63 00 	mov.b	#0,	&0x0063	;r3 As==00
    a0f6:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    a0fa:	5f 42 61 00 	mov.b	&0x0061,r15	
    a0fe:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a102:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    a106:	13 3c       	jmp	$+40     	;abs 0xa12e
    a108:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a10c:	61 00 
    a10e:	f2 40 41 00 	mov.b	#65,	&0x0062	;#0x0041
    a112:	62 00 
    a114:	f2 40 03 00 	mov.b	#3,	&0x0063	;#0x0003
    a118:	63 00 
    a11a:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    a11e:	5f 42 61 00 	mov.b	&0x0061,r15	
    a122:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a126:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    a12a:	01 3c       	jmp	$+4      	;abs 0xa12e
    a12c:	03 43       	nop			
    a12e:	82 43 7c 02 	mov	#0,	&0x027c	;r3 As==00
    a132:	21 53       	incd	r1		
    a134:	34 41       	pop	r4		
    a136:	30 41       	ret			

0000a138 <uart_stop>:
    a138:	04 12       	push	r4		
    a13a:	04 41       	mov	r1,	r4	
    a13c:	24 53       	incd	r4		
    a13e:	34 41       	pop	r4		
    a140:	30 41       	ret			

0000a142 <putchar>:
    a142:	04 12       	push	r4		
    a144:	04 41       	mov	r1,	r4	
    a146:	24 53       	incd	r4		
    a148:	21 83       	decd	r1		
    a14a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a14e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a152:	4f 4f       	mov.b	r15,	r15	
    a154:	c2 4f 67 00 	mov.b	r15,	&0x0067	
    a158:	03 43       	nop			
    a15a:	5f 42 03 00 	mov.b	&0x0003,r15	
    a15e:	4f 4f       	mov.b	r15,	r15	
    a160:	2f f3       	and	#2,	r15	;r3 As==10
    a162:	0f 93       	tst	r15		
    a164:	fa 27       	jz	$-10     	;abs 0xa15a
    a166:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a16a:	4f 4f       	mov.b	r15,	r15	
    a16c:	4f 4f       	mov.b	r15,	r15	
    a16e:	21 53       	incd	r1		
    a170:	34 41       	pop	r4		
    a172:	30 41       	ret			

0000a174 <uart_getchar>:
    a174:	04 12       	push	r4		
    a176:	04 41       	mov	r1,	r4	
    a178:	24 53       	incd	r4		
    a17a:	21 83       	decd	r1		
    a17c:	5f 42 66 00 	mov.b	&0x0066,r15	
    a180:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    a184:	c4 43 fd ff 	mov.b	#0,	-3(r4)	;r3 As==00, 0xfffd(r4)
    a188:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a18c:	21 53       	incd	r1		
    a18e:	34 41       	pop	r4		
    a190:	30 41       	ret			

0000a192 <uart_eint>:
    a192:	04 12       	push	r4		
    a194:	04 41       	mov	r1,	r4	
    a196:	24 53       	incd	r4		
    a198:	5f 42 01 00 	mov.b	&0x0001,r15	
    a19c:	5f d3       	bis.b	#1,	r15	;r3 As==01
    a19e:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    a1a2:	34 41       	pop	r4		
    a1a4:	30 41       	ret			

0000a1a6 <uart_dint>:
    a1a6:	04 12       	push	r4		
    a1a8:	04 41       	mov	r1,	r4	
    a1aa:	24 53       	incd	r4		
    a1ac:	5f 42 01 00 	mov.b	&0x0001,r15	
    a1b0:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a1b4:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    a1b8:	34 41       	pop	r4		
    a1ba:	30 41       	ret			

0000a1bc <uart_register_cb>:
    a1bc:	04 12       	push	r4		
    a1be:	04 41       	mov	r1,	r4	
    a1c0:	24 53       	incd	r4		
    a1c2:	21 83       	decd	r1		
    a1c4:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a1c8:	92 44 fc ff 	mov	-4(r4),	&0x027c	;0xfffc(r4)
    a1cc:	7c 02 
    a1ce:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    a1d2:	03 20       	jnz	$+8      	;abs 0xa1da
    a1d4:	b0 12 a6 a1 	call	#0xa1a6	
    a1d8:	02 3c       	jmp	$+6      	;abs 0xa1de
    a1da:	b0 12 92 a1 	call	#0xa192	
    a1de:	21 53       	incd	r1		
    a1e0:	34 41       	pop	r4		
    a1e2:	30 41       	ret			

0000a1e4 <usart0irq>:
    a1e4:	0f 12       	push	r15		
    a1e6:	0e 12       	push	r14		
    a1e8:	0d 12       	push	r13		
    a1ea:	0c 12       	push	r12		
    a1ec:	04 12       	push	r4		
    a1ee:	04 41       	mov	r1,	r4	
    a1f0:	34 50 0a 00 	add	#10,	r4	;#0x000a
    a1f4:	21 83       	decd	r1		
    a1f6:	5f 42 65 00 	mov.b	&0x0065,r15	
    a1fa:	4f 4f       	mov.b	r15,	r15	
    a1fc:	2f f2       	and	#4,	r15	;r2 As==10
    a1fe:	0f 93       	tst	r15		
    a200:	0a 24       	jz	$+22     	;abs 0xa216
    a202:	5f 42 66 00 	mov.b	&0x0066,r15	
    a206:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    a20a:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    a20e:	5f 53       	inc.b	r15		
    a210:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    a214:	0a 3c       	jmp	$+22     	;abs 0xa22a
    a216:	1e 42 7c 02 	mov	&0x027c,r14	
    a21a:	5f 42 66 00 	mov.b	&0x0066,r15	
    a21e:	8e 12       	call	r14		
    a220:	0f 93       	tst	r15		
    a222:	03 24       	jz	$+8      	;abs 0xa22a
    a224:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    a228:	00 00 
    a22a:	21 53       	incd	r1		
    a22c:	34 41       	pop	r4		
    a22e:	3c 41       	pop	r12		
    a230:	3d 41       	pop	r13		
    a232:	3e 41       	pop	r14		
    a234:	3f 41       	pop	r15		
    a236:	00 13       	reti			

0000a238 <flash_init>:
    a238:	04 12       	push	r4		
    a23a:	04 41       	mov	r1,	r4	
    a23c:	24 53       	incd	r4		
    a23e:	b0 12 7c 99 	call	#0x997c	
    a242:	3f 92       	cmp	#8,	r15	;r2 As==11
    a244:	11 24       	jz	$+36     	;abs 0xa268
    a246:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    a24a:	03 34       	jge	$+8      	;abs 0xa252
    a24c:	1f 93       	cmp	#1,	r15	;r3 As==01
    a24e:	08 24       	jz	$+18     	;abs 0xa260
    a250:	17 3c       	jmp	$+48     	;abs 0xa280
    a252:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    a256:	0c 24       	jz	$+26     	;abs 0xa270
    a258:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    a25c:	0d 24       	jz	$+28     	;abs 0xa278
    a25e:	10 3c       	jmp	$+34     	;abs 0xa280
    a260:	b2 40 83 a5 	mov	#-23165,&0x012a	;#0xa583
    a264:	2a 01 
    a266:	0c 3c       	jmp	$+26     	;abs 0xa280
    a268:	b2 40 96 a5 	mov	#-23146,&0x012a	;#0xa596
    a26c:	2a 01 
    a26e:	08 3c       	jmp	$+18     	;abs 0xa280
    a270:	b2 40 a1 a5 	mov	#-23135,&0x012a	;#0xa5a1
    a274:	2a 01 
    a276:	04 3c       	jmp	$+10     	;abs 0xa280
    a278:	b2 40 ac a5 	mov	#-23124,&0x012a	;#0xa5ac
    a27c:	2a 01 
    a27e:	03 43       	nop			
    a280:	34 41       	pop	r4		
    a282:	30 41       	ret			

0000a284 <flash_write_byte>:
    a284:	04 12       	push	r4		
    a286:	04 41       	mov	r1,	r4	
    a288:	24 53       	incd	r4		
    a28a:	21 82       	sub	#4,	r1	;r2 As==10
    a28c:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a290:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    a294:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a298:	6f 4f       	mov.b	@r15,	r15	
    a29a:	5f 94 fc ff 	cmp.b	-4(r4),	r15	;0xfffc(r4)
    a29e:	02 20       	jnz	$+6      	;abs 0xa2a4
    a2a0:	0f 43       	clr	r15		
    a2a2:	1f 3c       	jmp	$+64     	;abs 0xa2e2
    a2a4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2a8:	6f 4f       	mov.b	@r15,	r15	
    a2aa:	7f 93       	cmp.b	#-1,	r15	;r3 As==11
    a2ac:	02 24       	jz	$+6      	;abs 0xa2b2
    a2ae:	3f 43       	mov	#-1,	r15	;r3 As==11
    a2b0:	18 3c       	jmp	$+50     	;abs 0xa2e2
    a2b2:	b0 12 38 a2 	call	#0xa238	
    a2b6:	b0 12 ac a3 	call	#0xa3ac	
    a2ba:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a2be:	2c 01 
    a2c0:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a2c4:	28 01 
    a2c6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2ca:	df 44 fc ff 	mov.b	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a2ce:	00 00 
    a2d0:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a2d4:	28 01 
    a2d6:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a2da:	2c 01 
    a2dc:	b0 12 c8 a3 	call	#0xa3c8	
    a2e0:	0f 43       	clr	r15		
    a2e2:	21 52       	add	#4,	r1	;r2 As==10
    a2e4:	34 41       	pop	r4		
    a2e6:	30 41       	ret			

0000a2e8 <flash_write_word>:
    a2e8:	04 12       	push	r4		
    a2ea:	04 41       	mov	r1,	r4	
    a2ec:	24 53       	incd	r4		
    a2ee:	21 82       	sub	#4,	r1	;r2 As==10
    a2f0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a2f4:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    a2f8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2fc:	2f 4f       	mov	@r15,	r15	
    a2fe:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    a302:	02 20       	jnz	$+6      	;abs 0xa308
    a304:	0f 43       	clr	r15		
    a306:	1f 3c       	jmp	$+64     	;abs 0xa346
    a308:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a30c:	2f 4f       	mov	@r15,	r15	
    a30e:	3f 93       	cmp	#-1,	r15	;r3 As==11
    a310:	02 24       	jz	$+6      	;abs 0xa316
    a312:	3f 43       	mov	#-1,	r15	;r3 As==11
    a314:	18 3c       	jmp	$+50     	;abs 0xa346
    a316:	b0 12 38 a2 	call	#0xa238	
    a31a:	b0 12 ac a3 	call	#0xa3ac	
    a31e:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a322:	2c 01 
    a324:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a328:	28 01 
    a32a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a32e:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a332:	00 00 
    a334:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a338:	28 01 
    a33a:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a33e:	2c 01 
    a340:	b0 12 c8 a3 	call	#0xa3c8	
    a344:	0f 43       	clr	r15		
    a346:	21 52       	add	#4,	r1	;r2 As==10
    a348:	34 41       	pop	r4		
    a34a:	30 41       	ret			

0000a34c <flash_erase_segment>:
    a34c:	04 12       	push	r4		
    a34e:	04 41       	mov	r1,	r4	
    a350:	24 53       	incd	r4		
    a352:	21 83       	decd	r1		
    a354:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a358:	b0 12 38 a2 	call	#0xa238	
    a35c:	b0 12 ac a3 	call	#0xa3ac	
    a360:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a364:	2c 01 
    a366:	b2 40 02 a5 	mov	#-23294,&0x0128	;#0xa502
    a36a:	28 01 
    a36c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a370:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    a374:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a378:	28 01 
    a37a:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a37e:	2c 01 
    a380:	b0 12 c8 a3 	call	#0xa3c8	
    a384:	21 53       	incd	r1		
    a386:	34 41       	pop	r4		
    a388:	30 41       	ret			

0000a38a <flash_erase_info_memory>:
    a38a:	04 12       	push	r4		
    a38c:	04 41       	mov	r1,	r4	
    a38e:	24 53       	incd	r4		
    a390:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    a394:	b0 12 4c a3 	call	#0xa34c	
    a398:	3f 40 40 10 	mov	#4160,	r15	;#0x1040
    a39c:	b0 12 4c a3 	call	#0xa34c	
    a3a0:	3f 40 80 10 	mov	#4224,	r15	;#0x1080
    a3a4:	b0 12 4c a3 	call	#0xa34c	
    a3a8:	34 41       	pop	r4		
    a3aa:	30 41       	ret			

0000a3ac <watchdog_stop>:
    a3ac:	04 12       	push	r4		
    a3ae:	04 41       	mov	r1,	r4	
    a3b0:	24 53       	incd	r4		
    a3b2:	1f 42 20 01 	mov	&0x0120,r15	
    a3b6:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    a3ba:	82 4f 7e 02 	mov	r15,	&0x027e	
    a3be:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    a3c2:	20 01 
    a3c4:	34 41       	pop	r4		
    a3c6:	30 41       	ret			

0000a3c8 <watchdog_restore>:
    a3c8:	04 12       	push	r4		
    a3ca:	04 41       	mov	r1,	r4	
    a3cc:	24 53       	incd	r4		
    a3ce:	1f 42 7e 02 	mov	&0x027e,r15	
    a3d2:	3f d0 00 5a 	bis	#23040,	r15	;#0x5a00
    a3d6:	82 4f 20 01 	mov	r15,	&0x0120	
    a3da:	34 41       	pop	r4		
    a3dc:	30 41       	ret			

0000a3de <__mulsi3>:
    a3de:	0b 12       	push	r11		
    a3e0:	0a 12       	push	r10		
    a3e2:	0b 43       	clr	r11		
    a3e4:	0a 43       	clr	r10		
    a3e6:	08 3c       	jmp	$+18     	;abs 0xa3f8
    a3e8:	12 c3       	clrc			
    a3ea:	0d 10       	rrc	r13		
    a3ec:	0c 10       	rrc	r12		
    a3ee:	02 28       	jnc	$+6      	;abs 0xa3f4
    a3f0:	0a 5e       	add	r14,	r10	
    a3f2:	0b 6f       	addc	r15,	r11	
    a3f4:	0e 5e       	rla	r14		
    a3f6:	0f 6f       	rlc	r15		
    a3f8:	0c 93       	tst	r12		
    a3fa:	f6 23       	jnz	$-18     	;abs 0xa3e8
    a3fc:	0d 93       	tst	r13		
    a3fe:	f4 23       	jnz	$-22     	;abs 0xa3e8
    a400:	0e 4a       	mov	r10,	r14	
    a402:	0f 4b       	mov	r11,	r15	
    a404:	3a 41       	pop	r10		
    a406:	3b 41       	pop	r11		
    a408:	30 41       	ret			

0000a40a <__divhi3>:
    a40a:	0d 43       	clr	r13		
    a40c:	0f 93       	tst	r15		
    a40e:	04 34       	jge	$+10     	;abs 0xa418
    a410:	3d 40 03 00 	mov	#3,	r13	;#0x0003
    a414:	3f e3       	inv	r15		
    a416:	1f 53       	inc	r15		
    a418:	0e 93       	tst	r14		
    a41a:	03 34       	jge	$+8      	;abs 0xa422
    a41c:	5d e3       	xor.b	#1,	r13	;r3 As==01
    a41e:	3e e3       	inv	r14		
    a420:	1e 53       	inc	r14		
    a422:	0d 12       	push	r13		
    a424:	b0 12 44 a4 	call	#0xa444	
    a428:	3d 41       	pop	r13		
    a42a:	6d b3       	bit.b	#2,	r13	;r3 As==10
    a42c:	02 24       	jz	$+6      	;abs 0xa432
    a42e:	3e e3       	inv	r14		
    a430:	1e 53       	inc	r14		
    a432:	5d b3       	bit.b	#1,	r13	;r3 As==01
    a434:	02 24       	jz	$+6      	;abs 0xa43a
    a436:	3f e3       	inv	r15		
    a438:	1f 53       	inc	r15		
    a43a:	30 41       	ret			

0000a43c <__modhi3>:
    a43c:	b0 12 0a a4 	call	#0xa40a	
    a440:	0f 4e       	mov	r14,	r15	
    a442:	30 41       	ret			

0000a444 <__udivhi3>:
    a444:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    a448:	0d 4e       	mov	r14,	r13	
    a44a:	0e 43       	clr	r14		
    a44c:	0f 5f       	rla	r15		
    a44e:	0e 6e       	rlc	r14		
    a450:	0e 9d       	cmp	r13,	r14	
    a452:	02 28       	jnc	$+6      	;abs 0xa458
    a454:	0e 8d       	sub	r13,	r14	
    a456:	1f d3       	bis	#1,	r15	;r3 As==01
    a458:	1c 83       	dec	r12		
    a45a:	f8 23       	jnz	$-14     	;abs 0xa44c
    a45c:	30 41       	ret			

0000a45e <__umodhi3>:
    a45e:	b0 12 44 a4 	call	#0xa444	
    a462:	0f 4e       	mov	r14,	r15	
    a464:	30 41       	ret			

0000a466 <memcpy>:
    a466:	0b 12       	push	r11		
    a468:	0a 12       	push	r10		
    a46a:	09 12       	push	r9		
    a46c:	08 12       	push	r8		
    a46e:	07 12       	push	r7		
    a470:	0d 93       	tst	r13		
    a472:	70 24       	jz	$+226    	;abs 0xa554
    a474:	0f 9e       	cmp	r14,	r15	
    a476:	6e 24       	jz	$+222    	;abs 0xa554
    a478:	34 2c       	jc	$+106    	;abs 0xa4e2
    a47a:	0c 4e       	mov	r14,	r12	
    a47c:	0c df       	bis	r15,	r12	
    a47e:	1c f3       	and	#1,	r12	;r3 As==01
    a480:	1b 24       	jz	$+56     	;abs 0xa4b8
    a482:	0c 4e       	mov	r14,	r12	
    a484:	0c ef       	xor	r15,	r12	
    a486:	1c f3       	and	#1,	r12	;r3 As==01
    a488:	07 20       	jnz	$+16     	;abs 0xa498
    a48a:	2d 93       	cmp	#2,	r13	;r3 As==10
    a48c:	07 28       	jnc	$+16     	;abs 0xa49c
    a48e:	0b 4e       	mov	r14,	r11	
    a490:	1b f3       	and	#1,	r11	;r3 As==01
    a492:	2c 43       	mov	#2,	r12	;r3 As==10
    a494:	0c 8b       	sub	r11,	r12	
    a496:	03 3c       	jmp	$+8      	;abs 0xa49e
    a498:	0c 4d       	mov	r13,	r12	
    a49a:	01 3c       	jmp	$+4      	;abs 0xa49e
    a49c:	1c 43       	mov	#1,	r12	;r3 As==01
    a49e:	0d 8c       	sub	r12,	r13	
    a4a0:	0a 4c       	mov	r12,	r10	
    a4a2:	09 4e       	mov	r14,	r9	
    a4a4:	0b 4f       	mov	r15,	r11	
    a4a6:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    a4aa:	1b 53       	inc	r11		
    a4ac:	3a 53       	add	#-1,	r10	;r3 As==11
    a4ae:	fb 23       	jnz	$-8      	;abs 0xa4a6
    a4b0:	0a 4f       	mov	r15,	r10	
    a4b2:	0a 5c       	add	r12,	r10	
    a4b4:	0e 5c       	add	r12,	r14	
    a4b6:	01 3c       	jmp	$+4      	;abs 0xa4ba
    a4b8:	0a 4f       	mov	r15,	r10	
    a4ba:	0b 4d       	mov	r13,	r11	
    a4bc:	12 c3       	clrc			
    a4be:	0b 10       	rrc	r11		
    a4c0:	0b 24       	jz	$+24     	;abs 0xa4d8
    a4c2:	09 4b       	mov	r11,	r9	
    a4c4:	08 4e       	mov	r14,	r8	
    a4c6:	0c 4a       	mov	r10,	r12	
    a4c8:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    a4cc:	2c 53       	incd	r12		
    a4ce:	39 53       	add	#-1,	r9	;r3 As==11
    a4d0:	fb 23       	jnz	$-8      	;abs 0xa4c8
    a4d2:	0b 5b       	rla	r11		
    a4d4:	0e 5b       	add	r11,	r14	
    a4d6:	0a 5b       	add	r11,	r10	
    a4d8:	1d f3       	and	#1,	r13	;r3 As==01
    a4da:	3c 24       	jz	$+122    	;abs 0xa554
    a4dc:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    a4e0:	39 3c       	jmp	$+116    	;abs 0xa554
    a4e2:	0e 5d       	add	r13,	r14	
    a4e4:	0c 4f       	mov	r15,	r12	
    a4e6:	0c 5d       	add	r13,	r12	
    a4e8:	0b 4c       	mov	r12,	r11	
    a4ea:	0b de       	bis	r14,	r11	
    a4ec:	1b f3       	and	#1,	r11	;r3 As==01
    a4ee:	1b 24       	jz	$+56     	;abs 0xa526
    a4f0:	0b 4c       	mov	r12,	r11	
    a4f2:	0b ee       	xor	r14,	r11	
    a4f4:	1b f3       	and	#1,	r11	;r3 As==01
    a4f6:	06 20       	jnz	$+14     	;abs 0xa504
    a4f8:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    a4fc:	03 28       	jnc	$+8      	;abs 0xa504
    a4fe:	0b 4e       	mov	r14,	r11	
    a500:	1b f3       	and	#1,	r11	;r3 As==01
    a502:	01 3c       	jmp	$+4      	;abs 0xa506
    a504:	0b 4d       	mov	r13,	r11	
    a506:	0d 8b       	sub	r11,	r13	
    a508:	09 4e       	mov	r14,	r9	
    a50a:	0a 4c       	mov	r12,	r10	
    a50c:	08 4b       	mov	r11,	r8	
    a50e:	08 8c       	sub	r12,	r8	
    a510:	3a 53       	add	#-1,	r10	;r3 As==11
    a512:	39 53       	add	#-1,	r9	;r3 As==11
    a514:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    a518:	07 4a       	mov	r10,	r7	
    a51a:	07 58       	add	r8,	r7	
    a51c:	f9 23       	jnz	$-12     	;abs 0xa510
    a51e:	3b e3       	inv	r11		
    a520:	1b 53       	inc	r11		
    a522:	0c 5b       	add	r11,	r12	
    a524:	0e 5b       	add	r11,	r14	
    a526:	0b 4d       	mov	r13,	r11	
    a528:	12 c3       	clrc			
    a52a:	0b 10       	rrc	r11		
    a52c:	0e 24       	jz	$+30     	;abs 0xa54a
    a52e:	0a 4b       	mov	r11,	r10	
    a530:	08 4e       	mov	r14,	r8	
    a532:	09 4c       	mov	r12,	r9	
    a534:	28 83       	decd	r8		
    a536:	29 83       	decd	r9		
    a538:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    a53c:	3a 53       	add	#-1,	r10	;r3 As==11
    a53e:	fa 23       	jnz	$-10     	;abs 0xa534
    a540:	0a 8b       	sub	r11,	r10	
    a542:	0b 4a       	mov	r10,	r11	
    a544:	0b 5b       	rla	r11		
    a546:	0e 5b       	add	r11,	r14	
    a548:	0c 5b       	add	r11,	r12	
    a54a:	1d f3       	and	#1,	r13	;r3 As==01
    a54c:	03 24       	jz	$+8      	;abs 0xa554
    a54e:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    a552:	ff ff 
    a554:	37 41       	pop	r7		
    a556:	38 41       	pop	r8		
    a558:	39 41       	pop	r9		
    a55a:	3a 41       	pop	r10		
    a55c:	3b 41       	pop	r11		
    a55e:	30 41       	ret			

0000a560 <printf>:
    a560:	0d 41       	mov	r1,	r13	
    a562:	2d 53       	incd	r13		
    a564:	3e 4d       	mov	@r13+,	r14	
    a566:	3f 40 42 a1 	mov	#-24254,r15	;#0xa142
    a56a:	b0 12 d2 a7 	call	#0xa7d2	
    a56e:	30 41       	ret			

0000a570 <vprintf>:
    a570:	0d 4e       	mov	r14,	r13	
    a572:	0e 4f       	mov	r15,	r14	
    a574:	3f 40 42 a1 	mov	#-24254,r15	;#0xa142
    a578:	b0 12 d2 a7 	call	#0xa7d2	
    a57c:	30 41       	ret			

0000a57e <append>:
    a57e:	1e 42 82 02 	mov	&0x0282,r14	
    a582:	1e 93       	cmp	#1,	r14	;r3 As==01
    a584:	0b 38       	jl	$+24     	;abs 0xa59c
    a586:	1d 42 80 02 	mov	&0x0280,r13	
    a58a:	cd 4f 00 00 	mov.b	r15,	0(r13)	;0x0000(r13)
    a58e:	1d 53       	inc	r13		
    a590:	82 4d 80 02 	mov	r13,	&0x0280	
    a594:	3e 53       	add	#-1,	r14	;r3 As==11
    a596:	82 4e 82 02 	mov	r14,	&0x0282	
    a59a:	30 41       	ret			
    a59c:	3f 43       	mov	#-1,	r15	;r3 As==11
    a59e:	30 41       	ret			

0000a5a0 <call_vuprintf>:
    a5a0:	0b 12       	push	r11		
    a5a2:	0a 12       	push	r10		
    a5a4:	21 83       	decd	r1		
    a5a6:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    a5aa:	1a 42 80 02 	mov	&0x0280,r10	
    a5ae:	1b 42 82 02 	mov	&0x0282,r11	
    a5b2:	0d 4e       	mov	r14,	r13	
    a5b4:	0e 4f       	mov	r15,	r14	
    a5b6:	3f 40 7e a5 	mov	#-23170,r15	;#0xa57e
    a5ba:	b0 12 d2 a7 	call	#0xa7d2	
    a5be:	0f 9b       	cmp	r11,	r15	
    a5c0:	05 38       	jl	$+12     	;abs 0xa5cc
    a5c2:	0e 4a       	mov	r10,	r14	
    a5c4:	0e 5b       	add	r11,	r14	
    a5c6:	ce 43 ff ff 	mov.b	#0,	-1(r14)	;r3 As==00, 0xffff(r14)
    a5ca:	04 3c       	jmp	$+10     	;abs 0xa5d4
    a5cc:	1e 42 80 02 	mov	&0x0280,r14	
    a5d0:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    a5d4:	21 53       	incd	r1		
    a5d6:	3a 41       	pop	r10		
    a5d8:	3b 41       	pop	r11		
    a5da:	30 41       	ret			

0000a5dc <sprintf>:
    a5dc:	92 41 02 00 	mov	2(r1),	&0x0280	;0x0002(r1)
    a5e0:	80 02 
    a5e2:	b2 40 ff 7f 	mov	#32767,	&0x0282	;#0x7fff
    a5e6:	82 02 
    a5e8:	0e 41       	mov	r1,	r14	
    a5ea:	3e 50 06 00 	add	#6,	r14	;#0x0006
    a5ee:	1f 41 04 00 	mov	4(r1),	r15	;0x0004(r1)
    a5f2:	b0 12 a0 a5 	call	#0xa5a0	
    a5f6:	30 41       	ret			

0000a5f8 <snprintf>:
    a5f8:	92 41 02 00 	mov	2(r1),	&0x0280	;0x0002(r1)
    a5fc:	80 02 
    a5fe:	92 41 04 00 	mov	4(r1),	&0x0282	;0x0004(r1)
    a602:	82 02 
    a604:	0e 41       	mov	r1,	r14	
    a606:	3e 52       	add	#8,	r14	;r2 As==11
    a608:	1f 41 06 00 	mov	6(r1),	r15	;0x0006(r1)
    a60c:	b0 12 a0 a5 	call	#0xa5a0	
    a610:	30 41       	ret			

0000a612 <vsprintf>:
    a612:	0c 4e       	mov	r14,	r12	
    a614:	82 4f 80 02 	mov	r15,	&0x0280	
    a618:	b2 40 ff 7f 	mov	#32767,	&0x0282	;#0x7fff
    a61c:	82 02 
    a61e:	0e 4d       	mov	r13,	r14	
    a620:	0f 4c       	mov	r12,	r15	
    a622:	b0 12 a0 a5 	call	#0xa5a0	
    a626:	30 41       	ret			

0000a628 <vsnprintf>:
    a628:	82 4f 80 02 	mov	r15,	&0x0280	
    a62c:	82 4e 82 02 	mov	r14,	&0x0282	
    a630:	0e 4c       	mov	r12,	r14	
    a632:	0f 4d       	mov	r13,	r15	
    a634:	b0 12 a0 a5 	call	#0xa5a0	
    a638:	30 41       	ret			

0000a63a <print_field>:
    a63a:	0b 12       	push	r11		
    a63c:	0a 12       	push	r10		
    a63e:	09 12       	push	r9		
    a640:	08 12       	push	r8		
    a642:	07 12       	push	r7		
    a644:	06 12       	push	r6		
    a646:	05 12       	push	r5		
    a648:	04 12       	push	r4		
    a64a:	31 82       	sub	#8,	r1	;r2 As==11
    a64c:	08 4f       	mov	r15,	r8	
    a64e:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a652:	09 4d       	mov	r13,	r9	
    a654:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    a658:	1d 41 1c 00 	mov	28(r1),	r13	;0x001c(r1)
    a65c:	4c 4d       	mov.b	r13,	r12	
    a65e:	04 4d       	mov	r13,	r4	
    a660:	84 10       	swpb	r4		
    a662:	45 44       	mov.b	r4,	r5	
    a664:	4e 4f       	mov.b	r15,	r14	
    a666:	7e b0 40 00 	bit.b	#64,	r14	;#0x0040
    a66a:	11 24       	jz	$+36     	;abs 0xa68e
    a66c:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a670:	00 00 
    a672:	0e 4f       	mov	r15,	r14	
    a674:	8e 10       	swpb	r14		
    a676:	5e f3       	and.b	#1,	r14	;r3 As==01
    a678:	03 24       	jz	$+8      	;abs 0xa680
    a67a:	7e 40 58 00 	mov.b	#88,	r14	;#0x0058
    a67e:	02 3c       	jmp	$+6      	;abs 0xa684
    a680:	7e 40 78 00 	mov.b	#120,	r14	;#0x0078
    a684:	c1 4e 01 00 	mov.b	r14,	1(r1)	;0x0001(r1)
    a688:	0c 41       	mov	r1,	r12	
    a68a:	2c 53       	incd	r12		
    a68c:	0f 3c       	jmp	$+32     	;abs 0xa6ac
    a68e:	7e f0 20 00 	and.b	#32,	r14	;#0x0020
    a692:	04 24       	jz	$+10     	;abs 0xa69c
    a694:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a698:	00 00 
    a69a:	04 3c       	jmp	$+10     	;abs 0xa6a4
    a69c:	4c 93       	tst.b	r12		
    a69e:	05 24       	jz	$+12     	;abs 0xa6aa
    a6a0:	c1 4d 00 00 	mov.b	r13,	0(r1)	;0x0000(r1)
    a6a4:	0c 41       	mov	r1,	r12	
    a6a6:	1c 53       	inc	r12		
    a6a8:	01 3c       	jmp	$+4      	;abs 0xa6ac
    a6aa:	0c 41       	mov	r1,	r12	
    a6ac:	0a 4c       	mov	r12,	r10	
    a6ae:	8c 10       	swpb	r12		
    a6b0:	8c 11       	sxt	r12		
    a6b2:	8c 10       	swpb	r12		
    a6b4:	8c 11       	sxt	r12		
    a6b6:	0b 4c       	mov	r12,	r11	
    a6b8:	06 41       	mov	r1,	r6	
    a6ba:	0c 41       	mov	r1,	r12	
    a6bc:	8c 10       	swpb	r12		
    a6be:	8c 11       	sxt	r12		
    a6c0:	8c 10       	swpb	r12		
    a6c2:	8c 11       	sxt	r12		
    a6c4:	07 4c       	mov	r12,	r7	
    a6c6:	0a 86       	sub	r6,	r10	
    a6c8:	0b 77       	subc	r7,	r11	
    a6ca:	0e 4f       	mov	r15,	r14	
    a6cc:	8e 10       	swpb	r14		
    a6ce:	c1 4e 02 00 	mov.b	r14,	2(r1)	;0x0002(r1)
    a6d2:	6e f2       	and.b	#4,	r14	;r2 As==10
    a6d4:	02 24       	jz	$+6      	;abs 0xa6da
    a6d6:	07 45       	mov	r5,	r7	
    a6d8:	01 3c       	jmp	$+4      	;abs 0xa6dc
    a6da:	37 43       	mov	#-1,	r7	;r3 As==11
    a6dc:	4f 4f       	mov.b	r15,	r15	
    a6de:	7f b0 10 00 	bit.b	#16,	r15	;#0x0010
    a6e2:	3c 20       	jnz	$+122    	;abs 0xa75c
    a6e4:	1d 41 04 00 	mov	4(r1),	r13	;0x0004(r1)
    a6e8:	3d 53       	add	#-1,	r13	;r3 As==11
    a6ea:	1d 53       	inc	r13		
    a6ec:	cd 93 00 00 	tst.b	0(r13)		;0x0000(r13)
    a6f0:	fc 23       	jnz	$-6      	;abs 0xa6ea
    a6f2:	1d 81 04 00 	sub	4(r1),	r13	;0x0004(r1)
    a6f6:	09 9a       	cmp	r10,	r9	
    a6f8:	02 28       	jnc	$+6      	;abs 0xa6fe
    a6fa:	09 8a       	sub	r10,	r9	
    a6fc:	01 3c       	jmp	$+4      	;abs 0xa700
    a6fe:	09 43       	clr	r9		
    a700:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a704:	05 24       	jz	$+12     	;abs 0xa710
    a706:	09 95       	cmp	r5,	r9	
    a708:	02 28       	jnc	$+6      	;abs 0xa70e
    a70a:	09 85       	sub	r5,	r9	
    a70c:	01 3c       	jmp	$+4      	;abs 0xa710
    a70e:	09 43       	clr	r9		
    a710:	05 4d       	mov	r13,	r5	
    a712:	07 9d       	cmp	r13,	r7	
    a714:	01 2c       	jc	$+4      	;abs 0xa718
    a716:	05 47       	mov	r7,	r5	
    a718:	4f 93       	tst.b	r15		
    a71a:	0d 38       	jl	$+28     	;abs 0xa736
    a71c:	f1 40 20 00 	mov.b	#32,	6(r1)	;#0x0020, 0x0006(r1)
    a720:	06 00 
    a722:	06 43       	clr	r6		
    a724:	0b 43       	clr	r11		
    a726:	0e 3c       	jmp	$+30     	;abs 0xa744
    a728:	0f 41       	mov	r1,	r15	
    a72a:	0f 56       	add	r6,	r15	
    a72c:	6f 4f       	mov.b	@r15,	r15	
    a72e:	8f 11       	sxt	r15		
    a730:	16 53       	inc	r6		
    a732:	88 12       	call	r8		
    a734:	01 3c       	jmp	$+4      	;abs 0xa738
    a736:	06 43       	clr	r6		
    a738:	06 9a       	cmp	r10,	r6	
    a73a:	f6 3b       	jl	$-18     	;abs 0xa728
    a73c:	0b 4a       	mov	r10,	r11	
    a73e:	f1 40 30 00 	mov.b	#48,	6(r1)	;#0x0030, 0x0006(r1)
    a742:	06 00 
    a744:	05 8b       	sub	r11,	r5	
    a746:	05 3c       	jmp	$+12     	;abs 0xa752
    a748:	5f 41 06 00 	mov.b	6(r1),	r15	;0x0006(r1)
    a74c:	8f 11       	sxt	r15		
    a74e:	88 12       	call	r8		
    a750:	1b 53       	inc	r11		
    a752:	0f 45       	mov	r5,	r15	
    a754:	0f 5b       	add	r11,	r15	
    a756:	0f 99       	cmp	r9,	r15	
    a758:	f7 2b       	jnc	$-16     	;abs 0xa748
    a75a:	0a 3c       	jmp	$+22     	;abs 0xa770
    a75c:	06 43       	clr	r6		
    a75e:	0b 43       	clr	r11		
    a760:	07 3c       	jmp	$+16     	;abs 0xa770
    a762:	1b 53       	inc	r11		
    a764:	0f 41       	mov	r1,	r15	
    a766:	0f 56       	add	r6,	r15	
    a768:	6f 4f       	mov.b	@r15,	r15	
    a76a:	8f 11       	sxt	r15		
    a76c:	16 53       	inc	r6		
    a76e:	88 12       	call	r8		
    a770:	06 9a       	cmp	r10,	r6	
    a772:	f7 3b       	jl	$-16     	;abs 0xa762
    a774:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a778:	02 24       	jz	$+6      	;abs 0xa77e
    a77a:	4a 44       	mov.b	r4,	r10	
    a77c:	08 3c       	jmp	$+18     	;abs 0xa78e
    a77e:	1a 41 04 00 	mov	4(r1),	r10	;0x0004(r1)
    a782:	0a 8b       	sub	r11,	r10	
    a784:	0d 3c       	jmp	$+28     	;abs 0xa7a0
    a786:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    a78a:	88 12       	call	r8		
    a78c:	7a 53       	add.b	#-1,	r10	;r3 As==11
    a78e:	4a 93       	tst.b	r10		
    a790:	fa 23       	jnz	$-10     	;abs 0xa786
    a792:	44 44       	mov.b	r4,	r4	
    a794:	0b 54       	add	r4,	r11	
    a796:	f3 3f       	jmp	$-24     	;abs 0xa77e
    a798:	37 53       	add	#-1,	r7	;r3 As==11
    a79a:	8f 11       	sxt	r15		
    a79c:	88 12       	call	r8		
    a79e:	1b 53       	inc	r11		
    a7a0:	0f 4a       	mov	r10,	r15	
    a7a2:	0f 5b       	add	r11,	r15	
    a7a4:	6f 4f       	mov.b	@r15,	r15	
    a7a6:	4f 93       	tst.b	r15		
    a7a8:	07 24       	jz	$+16     	;abs 0xa7b8
    a7aa:	07 93       	tst	r7		
    a7ac:	f5 23       	jnz	$-20     	;abs 0xa798
    a7ae:	04 3c       	jmp	$+10     	;abs 0xa7b8
    a7b0:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    a7b4:	88 12       	call	r8		
    a7b6:	1b 53       	inc	r11		
    a7b8:	0b 99       	cmp	r9,	r11	
    a7ba:	fa 2b       	jnc	$-10     	;abs 0xa7b0
    a7bc:	0f 4b       	mov	r11,	r15	
    a7be:	31 52       	add	#8,	r1	;r2 As==11
    a7c0:	34 41       	pop	r4		
    a7c2:	35 41       	pop	r5		
    a7c4:	36 41       	pop	r6		
    a7c6:	37 41       	pop	r7		
    a7c8:	38 41       	pop	r8		
    a7ca:	39 41       	pop	r9		
    a7cc:	3a 41       	pop	r10		
    a7ce:	3b 41       	pop	r11		
    a7d0:	30 41       	ret			

0000a7d2 <vuprintf>:
    a7d2:	0b 12       	push	r11		
    a7d4:	0a 12       	push	r10		
    a7d6:	09 12       	push	r9		
    a7d8:	08 12       	push	r8		
    a7da:	07 12       	push	r7		
    a7dc:	06 12       	push	r6		
    a7de:	05 12       	push	r5		
    a7e0:	04 12       	push	r4		
    a7e2:	31 50 b6 ff 	add	#-74,	r1	;#0xffb6
    a7e6:	81 4f 3a 00 	mov	r15,	58(r1)	;0x003a(r1)
    a7ea:	06 4e       	mov	r14,	r6	
    a7ec:	05 4d       	mov	r13,	r5	
    a7ee:	81 4e 3e 00 	mov	r14,	62(r1)	;0x003e(r1)
    a7f2:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a7f6:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a7fa:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a7fe:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a802:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a806:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    a80a:	07 43       	clr	r7		
    a80c:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c(r1)
    a810:	0e 41       	mov	r1,	r14	
    a812:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    a816:	81 4e 1c 00 	mov	r14,	28(r1)	;0x001c(r1)
    a81a:	30 40 4c ae 	br	#0xae4c	
    a81e:	0f 46       	mov	r6,	r15	
    a820:	1f 53       	inc	r15		
    a822:	81 4f 40 00 	mov	r15,	64(r1)	;0x0040(r1)
    a826:	07 93       	tst	r7		
    a828:	1e 20       	jnz	$+62     	;abs 0xa866
    a82a:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a82e:	13 20       	jnz	$+40     	;abs 0xa856
    a830:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    a834:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    a838:	81 46 3e 00 	mov	r6,	62(r1)	;0x003e(r1)
    a83c:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a840:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a844:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a848:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a84c:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a850:	30 40 42 ae 	br	#0xae42	
    a854:	05 47       	mov	r7,	r5	
    a856:	8e 11       	sxt	r14		
    a858:	0f 4e       	mov	r14,	r15	
    a85a:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    a85e:	91 53 2c 00 	inc	44(r1)		;0x002c(r1)
    a862:	30 40 28 ae 	br	#0xae28	
    a866:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    a86a:	c5 24       	jz	$+396    	;abs 0xa9f6
    a86c:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a870:	27 34       	jge	$+80     	;abs 0xa8c0
    a872:	7e 90 30 00 	cmp.b	#48,	r14	;#0x0030
    a876:	94 24       	jz	$+298    	;abs 0xa9a0
    a878:	7e 90 31 00 	cmp.b	#49,	r14	;#0x0031
    a87c:	1a 34       	jge	$+54     	;abs 0xa8b2
    a87e:	7e 90 2a 00 	cmp.b	#42,	r14	;#0x002a
    a882:	77 24       	jz	$+240    	;abs 0xa972
    a884:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a888:	0a 34       	jge	$+22     	;abs 0xa89e
    a88a:	7e 90 23 00 	cmp.b	#35,	r14	;#0x0023
    a88e:	42 24       	jz	$+134    	;abs 0xa914
    a890:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a894:	e0 27       	jz	$-62     	;abs 0xa856
    a896:	7e 90 20 00 	cmp.b	#32,	r14	;#0x0020
    a89a:	32 20       	jnz	$+102    	;abs 0xa900
    a89c:	56 3c       	jmp	$+174    	;abs 0xa94a
    a89e:	7e 90 2d 00 	cmp.b	#45,	r14	;#0x002d
    a8a2:	49 24       	jz	$+148    	;abs 0xa936
    a8a4:	7e 90 2e 00 	cmp.b	#46,	r14	;#0x002e
    a8a8:	5b 24       	jz	$+184    	;abs 0xa960
    a8aa:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a8ae:	28 20       	jnz	$+82     	;abs 0xa900
    a8b0:	47 3c       	jmp	$+144    	;abs 0xa940
    a8b2:	7e 90 3a 00 	cmp.b	#58,	r14	;#0x003a
    a8b6:	8c 38       	jl	$+282    	;abs 0xa9d0
    a8b8:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    a8bc:	21 20       	jnz	$+68     	;abs 0xa900
    a8be:	e9 3c       	jmp	$+468    	;abs 0xaa92
    a8c0:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    a8c4:	24 24       	jz	$+74     	;abs 0xa90e
    a8c6:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a8ca:	0a 34       	jge	$+22     	;abs 0xa8e0
    a8cc:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    a8d0:	e3 24       	jz	$+456    	;abs 0xaa98
    a8d2:	7e 90 6c 00 	cmp.b	#108,	r14	;#0x006c
    a8d6:	22 24       	jz	$+70     	;abs 0xa91c
    a8d8:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a8dc:	11 20       	jnz	$+36     	;abs 0xa900
    a8de:	dc 3c       	jmp	$+442    	;abs 0xaa98
    a8e0:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    a8e4:	98 24       	jz	$+306    	;abs 0xaa16
    a8e6:	7e 90 74 00 	cmp.b	#116,	r14	;#0x0074
    a8ea:	04 34       	jge	$+10     	;abs 0xa8f4
    a8ec:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a8f0:	07 20       	jnz	$+16     	;abs 0xa900
    a8f2:	b8 3c       	jmp	$+370    	;abs 0xaa64
    a8f4:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    a8f8:	d1 24       	jz	$+420    	;abs 0xaa9c
    a8fa:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    a8fe:	d2 24       	jz	$+422    	;abs 0xaaa4
    a900:	19 41 3e 00 	mov	62(r1),	r9	;0x003e(r1)
    a904:	18 41 2c 00 	mov	44(r1),	r8	;0x002c(r1)
    a908:	08 89       	sub	r9,	r8	
    a90a:	30 40 16 ae 	br	#0xae16	
    a90e:	b1 42 28 00 	mov	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    a912:	cb 3c       	jmp	$+408    	;abs 0xaaaa
    a914:	f1 d2 00 00 	bis.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    a918:	30 40 46 ae 	br	#0xae46	
    a91c:	69 41       	mov.b	@r1,	r9	
    a91e:	59 f3       	and.b	#1,	r9	;r3 As==01
    a920:	6e 41       	mov.b	@r1,	r14	
    a922:	04 24       	jz	$+10     	;abs 0xa92c
    a924:	7e f0 fe ff 	and.b	#-2,	r14	;#0xfffe
    a928:	6e d3       	bis.b	#2,	r14	;r3 As==10
    a92a:	01 3c       	jmp	$+4      	;abs 0xa92e
    a92c:	5e d3       	bis.b	#1,	r14	;r3 As==01
    a92e:	c1 4e 00 00 	mov.b	r14,	0(r1)	;0x0000(r1)
    a932:	30 40 46 ae 	br	#0xae46	
    a936:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a93a:	00 00 
    a93c:	30 40 46 ae 	br	#0xae46	
    a940:	f1 40 2b 00 	mov.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a944:	02 00 
    a946:	30 40 46 ae 	br	#0xae46	
    a94a:	f1 90 2b 00 	cmp.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a94e:	02 00 
    a950:	02 20       	jnz	$+6      	;abs 0xa956
    a952:	30 40 46 ae 	br	#0xae46	
    a956:	f1 40 20 00 	mov.b	#32,	2(r1)	;#0x0020, 0x0002(r1)
    a95a:	02 00 
    a95c:	30 40 46 ae 	br	#0xae46	
    a960:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a964:	02 24       	jz	$+6      	;abs 0xa96a
    a966:	30 40 2c ae 	br	#0xae2c	
    a96a:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    a96e:	30 40 46 ae 	br	#0xae46	
    a972:	0e 45       	mov	r5,	r14	
    a974:	2e 53       	incd	r14		
    a976:	2a 45       	mov	@r5,	r10	
    a978:	0a 93       	tst	r10		
    a97a:	03 38       	jl	$+8      	;abs 0xa982
    a97c:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a980:	0d 3c       	jmp	$+28     	;abs 0xa99c
    a982:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a986:	02 24       	jz	$+6      	;abs 0xa98c
    a988:	30 40 3c ae 	br	#0xae3c	
    a98c:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a990:	00 00 
    a992:	3a e3       	inv	r10		
    a994:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a998:	91 53 26 00 	inc	38(r1)		;0x0026(r1)
    a99c:	05 4e       	mov	r14,	r5	
    a99e:	27 3c       	jmp	$+80     	;abs 0xa9ee
    a9a0:	81 93 26 00 	tst	38(r1)		;0x0026(r1)
    a9a4:	15 20       	jnz	$+44     	;abs 0xa9d0
    a9a6:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a9aa:	12 20       	jnz	$+38     	;abs 0xa9d0
    a9ac:	69 41       	mov.b	@r1,	r9	
    a9ae:	79 f0 10 00 	and.b	#16,	r9	;#0x0010
    a9b2:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a9b4:	01 24       	jz	$+4      	;abs 0xa9b8
    a9b6:	4e 43       	clr.b	r14		
    a9b8:	4e 4e       	mov.b	r14,	r14	
    a9ba:	0e 11       	rra	r14		
    a9bc:	0e 43       	clr	r14		
    a9be:	4e 10       	rrc.b	r14		
    a9c0:	6a 41       	mov.b	@r1,	r10	
    a9c2:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f
    a9c6:	4a de       	bis.b	r14,	r10	
    a9c8:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    a9cc:	30 40 46 ae 	br	#0xae46	
    a9d0:	1a 41 26 00 	mov	38(r1),	r10	;0x0026(r1)
    a9d4:	0a 5a       	rla	r10		
    a9d6:	0c 4a       	mov	r10,	r12	
    a9d8:	0c 5c       	rla	r12		
    a9da:	0c 5c       	rla	r12		
    a9dc:	0a 5c       	add	r12,	r10	
    a9de:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a9e2:	b1 50 d0 ff 	add	#-48,	38(r1)	;#0xffd0, 0x0026(r1)
    a9e6:	26 00 
    a9e8:	8e 11       	sxt	r14		
    a9ea:	81 5e 26 00 	add	r14,	38(r1)	;0x0026(r1)
    a9ee:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    a9f2:	30 40 46 ae 	br	#0xae46	
    a9f6:	07 45       	mov	r5,	r7	
    a9f8:	27 53       	incd	r7		
    a9fa:	6e 45       	mov.b	@r5,	r14	
    a9fc:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    aa00:	03 20       	jnz	$+8      	;abs 0xaa08
    aa02:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    aa06:	26 27       	jz	$-434    	;abs 0xa854
    aa08:	c1 4e 04 00 	mov.b	r14,	4(r1)	;0x0004(r1)
    aa0c:	c1 43 05 00 	mov.b	#0,	5(r1)	;r3 As==00, 0x0005(r1)
    aa10:	0e 41       	mov	r1,	r14	
    aa12:	2e 52       	add	#4,	r14	;r2 As==10
    aa14:	03 3c       	jmp	$+8      	;abs 0xaa1c
    aa16:	07 45       	mov	r5,	r7	
    aa18:	27 53       	incd	r7		
    aa1a:	2e 45       	mov	@r5,	r14	
    aa1c:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    aa20:	07 24       	jz	$+16     	;abs 0xaa30
    aa22:	e1 d2 01 00 	bis.b	#4,	1(r1)	;r2 As==10, 0x0001(r1)
    aa26:	1f 41 26 00 	mov	38(r1),	r15	;0x0026(r1)
    aa2a:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
    aa2e:	06 3c       	jmp	$+14     	;abs 0xaa3c
    aa30:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    aa34:	03 24       	jz	$+8      	;abs 0xaa3c
    aa36:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    aa3a:	30 00 
    aa3c:	0e 93       	tst	r14		
    aa3e:	02 20       	jnz	$+6      	;abs 0xaa44
    aa40:	3e 40 38 b1 	mov	#-20168,r14	;#0xb138
    aa44:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa48:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa4c:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    aa50:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    aa54:	b0 12 3a a6 	call	#0xa63a	
    aa58:	21 52       	add	#4,	r1	;r2 As==10
    aa5a:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    aa5e:	05 47       	mov	r7,	r5	
    aa60:	30 40 28 ae 	br	#0xae28	
    aa64:	07 45       	mov	r5,	r7	
    aa66:	27 53       	incd	r7		
    aa68:	29 45       	mov	@r5,	r9	
    aa6a:	81 49 1e 00 	mov	r9,	30(r1)	;0x001e(r1)
    aa6e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    aa70:	09 93       	tst	r9		
    aa72:	01 20       	jnz	$+4      	;abs 0xaa76
    aa74:	4e 43       	clr.b	r14		
    aa76:	4e 5e       	rla.b	r14		
    aa78:	4e 5e       	rla.b	r14		
    aa7a:	4e 5e       	rla.b	r14		
    aa7c:	6a 41       	mov.b	@r1,	r10	
    aa7e:	7a f0 f7 ff 	and.b	#-9,	r10	;#0xfff7
    aa82:	4a de       	bis.b	r14,	r10	
    aa84:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    aa88:	05 47       	mov	r7,	r5	
    aa8a:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    aa8e:	28 00 
    aa90:	53 3c       	jmp	$+168    	;abs 0xab38
    aa92:	d1 d3 01 00 	bis.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    aa96:	06 3c       	jmp	$+14     	;abs 0xaaa4
    aa98:	e1 d2 00 00 	bis.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    aa9c:	b1 40 0a 00 	mov	#10,	40(r1)	;#0x000a, 0x0028(r1)
    aaa0:	28 00 
    aaa2:	03 3c       	jmp	$+8      	;abs 0xaaaa
    aaa4:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    aaa8:	28 00 
    aaaa:	6b 41       	mov.b	@r1,	r11	
    aaac:	6b b3       	bit.b	#2,	r11	;r3 As==10
    aaae:	24 24       	jz	$+74     	;abs 0xaaf8
    aab0:	0c 45       	mov	r5,	r12	
    aab2:	3c 52       	add	#8,	r12	;r2 As==11
    aab4:	28 45       	mov	@r5,	r8	
    aab6:	17 45 02 00 	mov	2(r5),	r7	;0x0002(r5)
    aaba:	16 45 04 00 	mov	4(r5),	r6	;0x0004(r5)
    aabe:	1b 45 06 00 	mov	6(r5),	r11	;0x0006(r5)
    aac2:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    aac6:	81 47 20 00 	mov	r7,	32(r1)	;0x0020(r1)
    aaca:	81 46 22 00 	mov	r6,	34(r1)	;0x0022(r1)
    aace:	81 4b 24 00 	mov	r11,	36(r1)	;0x0024(r1)
    aad2:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    aad6:	08 93       	tst	r8		
    aad8:	06 20       	jnz	$+14     	;abs 0xaae6
    aada:	07 93       	tst	r7		
    aadc:	04 20       	jnz	$+10     	;abs 0xaae6
    aade:	06 93       	tst	r6		
    aae0:	02 20       	jnz	$+6      	;abs 0xaae6
    aae2:	0b 93       	tst	r11		
    aae4:	02 24       	jz	$+6      	;abs 0xaaea
    aae6:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    aaea:	0b 5b       	rla	r11		
    aaec:	0b 43       	clr	r11		
    aaee:	0b 6b       	rlc	r11		
    aaf0:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    aaf4:	05 4c       	mov	r12,	r5	
    aaf6:	20 3c       	jmp	$+66     	;abs 0xab38
    aaf8:	5b f3       	and.b	#1,	r11	;r3 As==01
    aafa:	07 45       	mov	r5,	r7	
    aafc:	0d 24       	jz	$+28     	;abs 0xab18
    aafe:	27 52       	add	#4,	r7	;r2 As==10
    ab00:	28 45       	mov	@r5,	r8	
    ab02:	1b 45 02 00 	mov	2(r5),	r11	;0x0002(r5)
    ab06:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    ab0a:	81 4b 20 00 	mov	r11,	32(r1)	;0x0020(r1)
    ab0e:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    ab12:	08 93       	tst	r8		
    ab14:	09 20       	jnz	$+20     	;abs 0xab28
    ab16:	06 3c       	jmp	$+14     	;abs 0xab24
    ab18:	27 53       	incd	r7		
    ab1a:	2b 45       	mov	@r5,	r11	
    ab1c:	81 4b 1e 00 	mov	r11,	30(r1)	;0x001e(r1)
    ab20:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    ab24:	0b 93       	tst	r11		
    ab26:	02 24       	jz	$+6      	;abs 0xab2c
    ab28:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    ab2c:	0b 5b       	rla	r11		
    ab2e:	0b 43       	clr	r11		
    ab30:	0b 6b       	rlc	r11		
    ab32:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    ab36:	05 47       	mov	r7,	r5	
    ab38:	f1 b2 00 00 	bit.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    ab3c:	12 24       	jz	$+38     	;abs 0xab62
    ab3e:	c1 93 2b 00 	tst.b	43(r1)		;0x002b(r1)
    ab42:	0f 20       	jnz	$+32     	;abs 0xab62
    ab44:	68 41       	mov.b	@r1,	r8	
    ab46:	b1 90 10 00 	cmp	#16,	40(r1)	;#0x0010, 0x0028(r1)
    ab4a:	28 00 
    ab4c:	03 20       	jnz	$+8      	;abs 0xab54
    ab4e:	78 d0 40 00 	bis.b	#64,	r8	;#0x0040
    ab52:	05 3c       	jmp	$+12     	;abs 0xab5e
    ab54:	b1 92 28 00 	cmp	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    ab58:	04 20       	jnz	$+10     	;abs 0xab62
    ab5a:	78 d0 20 00 	bis.b	#32,	r8	;#0x0020
    ab5e:	c1 48 00 00 	mov.b	r8,	0(r1)	;0x0000(r1)
    ab62:	68 41       	mov.b	@r1,	r8	
    ab64:	68 b2       	bit.b	#4,	r8	;r2 As==10
    ab66:	30 24       	jz	$+98     	;abs 0xabc8
    ab68:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    ab6c:	2d 24       	jz	$+92     	;abs 0xabc8
    ab6e:	f1 40 2d 00 	mov.b	#45,	2(r1)	;#0x002d, 0x0002(r1)
    ab72:	02 00 
    ab74:	68 b3       	bit.b	#2,	r8	;r3 As==10
    ab76:	11 24       	jz	$+36     	;abs 0xab9a
    ab78:	b1 e3 1e 00 	xor	#-1,	30(r1)	;r3 As==11, 0x001e(r1)
    ab7c:	b1 e3 20 00 	xor	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    ab80:	b1 e3 22 00 	xor	#-1,	34(r1)	;r3 As==11, 0x0022(r1)
    ab84:	b1 e3 24 00 	xor	#-1,	36(r1)	;r3 As==11, 0x0024(r1)
    ab88:	91 53 1e 00 	inc	30(r1)		;0x001e(r1)
    ab8c:	81 63 20 00 	adc	32(r1)		;0x0020(r1)
    ab90:	81 63 22 00 	adc	34(r1)		;0x0022(r1)
    ab94:	81 63 24 00 	adc	36(r1)		;0x0024(r1)
    ab98:	17 3c       	jmp	$+48     	;abs 0xabc8
    ab9a:	58 b3       	bit.b	#1,	r8	;r3 As==01
    ab9c:	0f 24       	jz	$+32     	;abs 0xabbc
    ab9e:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    aba2:	1b 41 20 00 	mov	32(r1),	r11	;0x0020(r1)
    aba6:	3a e3       	inv	r10		
    aba8:	3b e3       	inv	r11		
    abaa:	0e 4a       	mov	r10,	r14	
    abac:	0f 4b       	mov	r11,	r15	
    abae:	1e 53       	inc	r14		
    abb0:	0f 63       	adc	r15		
    abb2:	81 4e 1e 00 	mov	r14,	30(r1)	;0x001e(r1)
    abb6:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    abba:	06 3c       	jmp	$+14     	;abs 0xabc8
    abbc:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    abc0:	3a e3       	inv	r10		
    abc2:	1a 53       	inc	r10		
    abc4:	81 4a 1e 00 	mov	r10,	30(r1)	;0x001e(r1)
    abc8:	c1 43 1b 00 	mov.b	#0,	27(r1)	;r3 As==00, 0x001b(r1)
    abcc:	68 b3       	bit.b	#2,	r8	;r3 As==10
    abce:	6a 24       	jz	$+214    	;abs 0xaca4
    abd0:	16 41 1e 00 	mov	30(r1),	r6	;0x001e(r1)
    abd4:	91 41 20 00 	mov	32(r1),	60(r1)	;0x0020(r1), 0x003c(r1)
    abd8:	3c 00 
    abda:	18 41 22 00 	mov	34(r1),	r8	;0x0022(r1)
    abde:	14 41 24 00 	mov	36(r1),	r4	;0x0024(r1)
    abe2:	07 41       	mov	r1,	r7	
    abe4:	37 50 1a 00 	add	#26,	r7	;#0x001a
    abe8:	09 46       	mov	r6,	r9	
    abea:	91 41 28 00 	mov	40(r1),	50(r1)	;0x0028(r1), 0x0032(r1)
    abee:	32 00 
    abf0:	1b 41 28 00 	mov	40(r1),	r11	;0x0028(r1)
    abf4:	8b 10       	swpb	r11		
    abf6:	8b 11       	sxt	r11		
    abf8:	8b 10       	swpb	r11		
    abfa:	8b 11       	sxt	r11		
    abfc:	81 4b 34 00 	mov	r11,	52(r1)	;0x0034(r1)
    ac00:	81 4b 36 00 	mov	r11,	54(r1)	;0x0036(r1)
    ac04:	81 4b 38 00 	mov	r11,	56(r1)	;0x0038(r1)
    ac08:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac0c:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac10:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac14:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac18:	0c 49       	mov	r9,	r12	
    ac1a:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    ac1e:	0e 48       	mov	r8,	r14	
    ac20:	0f 44       	mov	r4,	r15	
    ac22:	b0 12 60 af 	call	#0xaf60	
    ac26:	31 52       	add	#8,	r1	;r2 As==11
    ac28:	0b 4c       	mov	r12,	r11	
    ac2a:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    ac2e:	05 34       	jge	$+12     	;abs 0xac3a
    ac30:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    ac34:	c7 4b 00 00 	mov.b	r11,	0(r7)	;0x0000(r7)
    ac38:	0c 3c       	jmp	$+26     	;abs 0xac52
    ac3a:	4b 4c       	mov.b	r12,	r11	
    ac3c:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ac40:	03 24       	jz	$+8      	;abs 0xac48
    ac42:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    ac46:	02 3c       	jmp	$+6      	;abs 0xac4c
    ac48:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    ac4c:	4a 5b       	add.b	r11,	r10	
    ac4e:	c7 4a 00 00 	mov.b	r10,	0(r7)	;0x0000(r7)
    ac52:	06 47       	mov	r7,	r6	
    ac54:	36 53       	add	#-1,	r6	;r3 As==11
    ac56:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac5a:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac5e:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac62:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac66:	0c 49       	mov	r9,	r12	
    ac68:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    ac6c:	0e 48       	mov	r8,	r14	
    ac6e:	0f 44       	mov	r4,	r15	
    ac70:	b0 12 3a af 	call	#0xaf3a	
    ac74:	31 52       	add	#8,	r1	;r2 As==11
    ac76:	09 4c       	mov	r12,	r9	
    ac78:	81 4d 3c 00 	mov	r13,	60(r1)	;0x003c(r1)
    ac7c:	08 4e       	mov	r14,	r8	
    ac7e:	04 4f       	mov	r15,	r4	
    ac80:	37 53       	add	#-1,	r7	;r3 As==11
    ac82:	0c 93       	tst	r12		
    ac84:	b2 23       	jnz	$-154    	;abs 0xabea
    ac86:	0d 93       	tst	r13		
    ac88:	b0 23       	jnz	$-158    	;abs 0xabea
    ac8a:	0e 93       	tst	r14		
    ac8c:	ae 23       	jnz	$-162    	;abs 0xabea
    ac8e:	0f 93       	tst	r15		
    ac90:	ac 23       	jnz	$-166    	;abs 0xabea
    ac92:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ac96:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    ac9a:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    ac9e:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024(r1)
    aca2:	6c 3c       	jmp	$+218    	;abs 0xad7c
    aca4:	58 b3       	bit.b	#1,	r8	;r3 As==01
    aca6:	3e 24       	jz	$+126    	;abs 0xad24
    aca8:	14 41 1e 00 	mov	30(r1),	r4	;0x001e(r1)
    acac:	17 41 20 00 	mov	32(r1),	r7	;0x0020(r1)
    acb0:	08 41       	mov	r1,	r8	
    acb2:	38 50 1a 00 	add	#26,	r8	;#0x001a
    acb6:	19 41 28 00 	mov	40(r1),	r9	;0x0028(r1)
    acba:	89 10       	swpb	r9		
    acbc:	89 11       	sxt	r9		
    acbe:	89 10       	swpb	r9		
    acc0:	89 11       	sxt	r9		
    acc2:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    acc6:	0d 49       	mov	r9,	r13	
    acc8:	0e 44       	mov	r4,	r14	
    acca:	0f 47       	mov	r7,	r15	
    accc:	b0 12 d2 ae 	call	#0xaed2	
    acd0:	0b 4e       	mov	r14,	r11	
    acd2:	3e 90 0a 00 	cmp	#10,	r14	;#0x000a
    acd6:	05 34       	jge	$+12     	;abs 0xace2
    acd8:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    acdc:	c8 4b 00 00 	mov.b	r11,	0(r8)	;0x0000(r8)
    ace0:	0c 3c       	jmp	$+26     	;abs 0xacfa
    ace2:	4b 4e       	mov.b	r14,	r11	
    ace4:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ace8:	03 24       	jz	$+8      	;abs 0xacf0
    acea:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    acee:	02 3c       	jmp	$+6      	;abs 0xacf4
    acf0:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    acf4:	4a 5b       	add.b	r11,	r10	
    acf6:	c8 4a 00 00 	mov.b	r10,	0(r8)	;0x0000(r8)
    acfa:	06 48       	mov	r8,	r6	
    acfc:	36 53       	add	#-1,	r6	;r3 As==11
    acfe:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    ad02:	0d 49       	mov	r9,	r13	
    ad04:	0e 44       	mov	r4,	r14	
    ad06:	0f 47       	mov	r7,	r15	
    ad08:	b0 12 9c ae 	call	#0xae9c	
    ad0c:	04 4e       	mov	r14,	r4	
    ad0e:	07 4f       	mov	r15,	r7	
    ad10:	38 53       	add	#-1,	r8	;r3 As==11
    ad12:	0e 93       	tst	r14		
    ad14:	d0 23       	jnz	$-94     	;abs 0xacb6
    ad16:	0f 93       	tst	r15		
    ad18:	ce 23       	jnz	$-98     	;abs 0xacb6
    ad1a:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ad1e:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    ad22:	2c 3c       	jmp	$+90     	;abs 0xad7c
    ad24:	17 41 1e 00 	mov	30(r1),	r7	;0x001e(r1)
    ad28:	08 41       	mov	r1,	r8	
    ad2a:	38 50 1a 00 	add	#26,	r8	;#0x001a
    ad2e:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    ad32:	0f 47       	mov	r7,	r15	
    ad34:	b0 12 5e a4 	call	#0xa45e	
    ad38:	0d 4f       	mov	r15,	r13	
    ad3a:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    ad3e:	05 34       	jge	$+12     	;abs 0xad4a
    ad40:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    ad44:	c8 4d 00 00 	mov.b	r13,	0(r8)	;0x0000(r8)
    ad48:	0c 3c       	jmp	$+26     	;abs 0xad62
    ad4a:	4d 4f       	mov.b	r15,	r13	
    ad4c:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ad50:	03 24       	jz	$+8      	;abs 0xad58
    ad52:	7c 40 37 00 	mov.b	#55,	r12	;#0x0037
    ad56:	02 3c       	jmp	$+6      	;abs 0xad5c
    ad58:	7c 40 57 00 	mov.b	#87,	r12	;#0x0057
    ad5c:	4c 5d       	add.b	r13,	r12	
    ad5e:	c8 4c 00 00 	mov.b	r12,	0(r8)	;0x0000(r8)
    ad62:	06 48       	mov	r8,	r6	
    ad64:	36 53       	add	#-1,	r6	;r3 As==11
    ad66:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    ad6a:	0f 47       	mov	r7,	r15	
    ad6c:	b0 12 44 a4 	call	#0xa444	
    ad70:	07 4f       	mov	r15,	r7	
    ad72:	38 53       	add	#-1,	r8	;r3 As==11
    ad74:	0f 93       	tst	r15		
    ad76:	db 23       	jnz	$-72     	;abs 0xad2e
    ad78:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ad7c:	b1 90 0a 00 	cmp	#10,	40(r1)	;#0x000a, 0x0028(r1)
    ad80:	28 00 
    ad82:	02 24       	jz	$+6      	;abs 0xad88
    ad84:	c1 43 02 00 	mov.b	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    ad88:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    ad8c:	2a 24       	jz	$+86     	;abs 0xade2
    ad8e:	0f 41       	mov	r1,	r15	
    ad90:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    ad94:	81 4f 42 00 	mov	r15,	66(r1)	;0x0042(r1)
    ad98:	1a 41 1c 00 	mov	28(r1),	r10	;0x001c(r1)
    ad9c:	8a 10       	swpb	r10		
    ad9e:	8a 11       	sxt	r10		
    ada0:	8a 10       	swpb	r10		
    ada2:	8a 11       	sxt	r10		
    ada4:	81 4a 44 00 	mov	r10,	68(r1)	;0x0044(r1)
    ada8:	81 46 46 00 	mov	r6,	70(r1)	;0x0046(r1)
    adac:	0a 46       	mov	r6,	r10	
    adae:	8a 10       	swpb	r10		
    adb0:	8a 11       	sxt	r10		
    adb2:	8a 10       	swpb	r10		
    adb4:	8a 11       	sxt	r10		
    adb6:	81 4a 48 00 	mov	r10,	72(r1)	;0x0048(r1)
    adba:	1c 41 42 00 	mov	66(r1),	r12	;0x0042(r1)
    adbe:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    adc2:	1c 81 46 00 	sub	70(r1),	r12	;0x0046(r1)
    adc6:	1d 71 48 00 	subc	72(r1),	r13	;0x0048(r1)
    adca:	2c 83       	decd	r12		
    adcc:	1c 91 26 00 	cmp	38(r1),	r12	;0x0026(r1)
    add0:	0e 2c       	jc	$+30     	;abs 0xadee
    add2:	e1 d3 01 00 	bis.b	#2,	1(r1)	;r3 As==10, 0x0001(r1)
    add6:	5e 41 26 00 	mov.b	38(r1),	r14	;0x0026(r1)
    adda:	4e 8c       	sub.b	r12,	r14	
    addc:	c1 4e 03 00 	mov.b	r14,	3(r1)	;0x0003(r1)
    ade0:	06 3c       	jmp	$+14     	;abs 0xadee
    ade2:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    ade6:	03 24       	jz	$+8      	;abs 0xadee
    ade8:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    adec:	30 00 
    adee:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    adf2:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    adf6:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    adfa:	0e 46       	mov	r6,	r14	
    adfc:	1e 53       	inc	r14		
    adfe:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    ae02:	b0 12 3a a6 	call	#0xa63a	
    ae06:	21 52       	add	#4,	r1	;r2 As==10
    ae08:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    ae0c:	0d 3c       	jmp	$+28     	;abs 0xae28
    ae0e:	7f 49       	mov.b	@r9+,	r15	
    ae10:	8f 11       	sxt	r15		
    ae12:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    ae16:	0e 49       	mov	r9,	r14	
    ae18:	0e 58       	add	r8,	r14	
    ae1a:	19 91 40 00 	cmp	64(r1),	r9	;0x0040(r1)
    ae1e:	f7 2b       	jnc	$-16     	;abs 0xae0e
    ae20:	81 49 3e 00 	mov	r9,	62(r1)	;0x003e(r1)
    ae24:	81 4e 2c 00 	mov	r14,	44(r1)	;0x002c(r1)
    ae28:	07 43       	clr	r7		
    ae2a:	0e 3c       	jmp	$+30     	;abs 0xae48
    ae2c:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    ae30:	30 00 
    ae32:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    ae36:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    ae3a:	03 3c       	jmp	$+8      	;abs 0xae42
    ae3c:	05 4e       	mov	r14,	r5	
    ae3e:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    ae42:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    ae46:	17 43       	mov	#1,	r7	;r3 As==01
    ae48:	16 41 40 00 	mov	64(r1),	r6	;0x0040(r1)
    ae4c:	6e 46       	mov.b	@r6,	r14	
    ae4e:	4e 93       	tst.b	r14		
    ae50:	02 24       	jz	$+6      	;abs 0xae56
    ae52:	30 40 1e a8 	br	#0xa81e	
    ae56:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    ae5a:	31 50 4a 00 	add	#74,	r1	;#0x004a
    ae5e:	34 41       	pop	r4		
    ae60:	35 41       	pop	r5		
    ae62:	36 41       	pop	r6		
    ae64:	37 41       	pop	r7		
    ae66:	38 41       	pop	r8		
    ae68:	39 41       	pop	r9		
    ae6a:	3a 41       	pop	r10		
    ae6c:	3b 41       	pop	r11		
    ae6e:	30 41       	ret			

0000ae70 <puts>:
    ae70:	0b 12       	push	r11		
    ae72:	0b 4f       	mov	r15,	r11	
    ae74:	6f 4b       	mov.b	@r11,	r15	
    ae76:	4f 93       	tst.b	r15		
    ae78:	06 24       	jz	$+14     	;abs 0xae86
    ae7a:	1b 53       	inc	r11		
    ae7c:	8f 11       	sxt	r15		
    ae7e:	b0 12 42 a1 	call	#0xa142	
    ae82:	0f 93       	tst	r15		
    ae84:	f7 37       	jge	$-16     	;abs 0xae74
    ae86:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    ae8a:	05 20       	jnz	$+12     	;abs 0xae96
    ae8c:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    ae90:	b0 12 42 a1 	call	#0xa142	
    ae94:	01 3c       	jmp	$+4      	;abs 0xae98
    ae96:	3f 43       	mov	#-1,	r15	;r3 As==11
    ae98:	3b 41       	pop	r11		
    ae9a:	30 41       	ret			

0000ae9c <__udivsi3>:
    ae9c:	0b 12       	push	r11		
    ae9e:	0a 12       	push	r10		
    aea0:	09 12       	push	r9		
    aea2:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    aea6:	0a 4c       	mov	r12,	r10	
    aea8:	0b 4d       	mov	r13,	r11	
    aeaa:	0c 43       	clr	r12		
    aeac:	0d 43       	clr	r13		
    aeae:	0e 5e       	rla	r14		
    aeb0:	0f 6f       	rlc	r15		
    aeb2:	0c 6c       	rlc	r12		
    aeb4:	0d 6d       	rlc	r13		
    aeb6:	0d 9b       	cmp	r11,	r13	
    aeb8:	06 28       	jnc	$+14     	;abs 0xaec6
    aeba:	02 20       	jnz	$+6      	;abs 0xaec0
    aebc:	0c 9a       	cmp	r10,	r12	
    aebe:	03 28       	jnc	$+8      	;abs 0xaec6
    aec0:	0c 8a       	sub	r10,	r12	
    aec2:	0d 7b       	subc	r11,	r13	
    aec4:	1e d3       	bis	#1,	r14	;r3 As==01
    aec6:	19 83       	dec	r9		
    aec8:	f2 23       	jnz	$-26     	;abs 0xaeae
    aeca:	39 41       	pop	r9		
    aecc:	3a 41       	pop	r10		
    aece:	3b 41       	pop	r11		
    aed0:	30 41       	ret			

0000aed2 <__umodsi3>:
    aed2:	b0 12 9c ae 	call	#0xae9c	
    aed6:	0e 4c       	mov	r12,	r14	
    aed8:	0f 4d       	mov	r13,	r15	
    aeda:	30 41       	ret			

0000aedc <__xabi_udivmod64>:
    aedc:	07 12       	push	r7		
    aede:	06 12       	push	r6		
    aee0:	05 12       	push	r5		
    aee2:	04 12       	push	r4		
    aee4:	30 12 40 00 	push	#64		;#0x0040
    aee8:	04 48       	mov	r8,	r4	
    aeea:	05 49       	mov	r9,	r5	
    aeec:	06 4a       	mov	r10,	r6	
    aeee:	07 4b       	mov	r11,	r7	
    aef0:	08 43       	clr	r8		
    aef2:	09 43       	clr	r9		
    aef4:	0a 43       	clr	r10		
    aef6:	0b 43       	clr	r11		
    aef8:	0c 5c       	rla	r12		
    aefa:	0d 6d       	rlc	r13		
    aefc:	0e 6e       	rlc	r14		
    aefe:	0f 6f       	rlc	r15		
    af00:	08 68       	rlc	r8		
    af02:	09 69       	rlc	r9		
    af04:	0a 6a       	rlc	r10		
    af06:	0b 6b       	rlc	r11		
    af08:	0b 97       	cmp	r7,	r11	
    af0a:	0e 28       	jnc	$+30     	;abs 0xaf28
    af0c:	08 20       	jnz	$+18     	;abs 0xaf1e
    af0e:	0a 96       	cmp	r6,	r10	
    af10:	0b 28       	jnc	$+24     	;abs 0xaf28
    af12:	05 20       	jnz	$+12     	;abs 0xaf1e
    af14:	09 95       	cmp	r5,	r9	
    af16:	08 28       	jnc	$+18     	;abs 0xaf28
    af18:	02 20       	jnz	$+6      	;abs 0xaf1e
    af1a:	08 94       	cmp	r4,	r8	
    af1c:	05 28       	jnc	$+12     	;abs 0xaf28
    af1e:	08 84       	sub	r4,	r8	
    af20:	09 75       	subc	r5,	r9	
    af22:	0a 76       	subc	r6,	r10	
    af24:	0b 77       	subc	r7,	r11	
    af26:	1c d3       	bis	#1,	r12	;r3 As==01
    af28:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    af2c:	e5 23       	jnz	$-52     	;abs 0xaef8
    af2e:	21 53       	incd	r1		
    af30:	34 41       	pop	r4		
    af32:	35 41       	pop	r5		
    af34:	36 41       	pop	r6		
    af36:	37 41       	pop	r7		
    af38:	30 41       	ret			

0000af3a <__udivdi3>:
    af3a:	0b 12       	push	r11		
    af3c:	0a 12       	push	r10		
    af3e:	09 12       	push	r9		
    af40:	08 12       	push	r8		
    af42:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    af46:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    af4a:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    af4e:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    af52:	b0 12 dc ae 	call	#0xaedc	
    af56:	38 41       	pop	r8		
    af58:	39 41       	pop	r9		
    af5a:	3a 41       	pop	r10		
    af5c:	3b 41       	pop	r11		
    af5e:	30 41       	ret			

0000af60 <__umoddi3>:
    af60:	0b 12       	push	r11		
    af62:	0a 12       	push	r10		
    af64:	09 12       	push	r9		
    af66:	08 12       	push	r8		
    af68:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    af6c:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    af70:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    af74:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    af78:	b0 12 dc ae 	call	#0xaedc	
    af7c:	0c 48       	mov	r8,	r12	
    af7e:	0d 49       	mov	r9,	r13	
    af80:	0e 4a       	mov	r10,	r14	
    af82:	0f 4b       	mov	r11,	r15	
    af84:	38 41       	pop	r8		
    af86:	39 41       	pop	r9		
    af88:	3a 41       	pop	r10		
    af8a:	3b 41       	pop	r11		
    af8c:	30 41       	ret			

0000af8e <__udivmoddi4>:
    af8e:	0b 12       	push	r11		
    af90:	0a 12       	push	r10		
    af92:	09 12       	push	r9		
    af94:	08 12       	push	r8		
    af96:	07 12       	push	r7		
    af98:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    af9c:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    afa0:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    afa4:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    afa8:	b0 12 dc ae 	call	#0xaedc	
    afac:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    afb0:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    afb4:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    afb8:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    afbc:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    afc0:	37 41       	pop	r7		
    afc2:	38 41       	pop	r8		
    afc4:	39 41       	pop	r9		
    afc6:	3a 41       	pop	r10		
    afc8:	3b 41       	pop	r11		
    afca:	30 41       	ret			

0000afcc <_unexpected_>:
    afcc:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	16 81 16 81 16 81 e2 98 16 81 48 8b 16 81 e4 a1     ..........H.....
    fff0:	16 81 e0 9e 16 81 16 81 16 81 c4 9f 16 81 00 80     ................
