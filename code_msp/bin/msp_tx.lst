
bin/msp_tx.elf:     file format elf32-msp430

SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000ac16 l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
0000028a l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 msp_tx.c
00000200 l     O .bss	00000002 node_id
00000202 l     O .bss	0000000e timer
00000210 l     O .bss	00000002 led_green_duration
00000212 l     O .bss	00000002 led_green_flag
00000214 l     O .bss	00000002 led_red_duration
00000216 l     O .bss	00000002 led_red_flag
00000218 l     O .bss	00000008 pt
00000220 l     O .bss	0000001c radio_tx_buffer
0000023c l     O .bss	0000001c radio_rx_buffer
00000258 l     O .bss	00000002 radio_rx_flag
0000025a l     O .bss	00000002 periodic_send_flag
0000025c l     O .bss	00000002 periodic_temp_flag
0000025e l     O .bss	00000002 current_buffer_pt
00000260 l     O .bss	00000002 uart_flag
00000262 l     O .bss	00000002 uart_data
00000264 l     O .bss	00000002 room_flag
00000266 l     O .bss	00000001 room
0000812a l     F .text	00000048 printhex
00008172 l     F .text	00000050 init_message
000081c2 l     F .text	00000076 set_node_id
000082a8 l     F .text	0000001c led_green_blink
000082c4 l     F .text	0000001c led_red_blink
000082e0 l     F .text	00000080 thread_led_green
00008360 l     F .text	000000b4 thread_led_red
00008414 l     F .text	00000078 radio_send_message
00008514 l     F .text	00000076 register_temperature
0000864e l     F .text	0000007a thread_uart
000086c8 l     F .text	0000008e thread_periodic_send
00008756 l     F .text	0000008a thread_periodic_temperature
00008126 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 adc10.c
00000268 l     O .bss	00000002 coeff_1
0000026a l     O .bss	00000002 coeff_2
00000000 l    df *ABS*	00000000 cc2500.c
000089de l     F .text	00000016 CC2500_HW_GDO0_IRQ_ON_ASSERT
000089f4 l     F .text	00000016 CC2500_HW_GDO2_IRQ_ON_ASSERT
00008a0a l     F .text	00000016 CC2500_HW_GDO0_DINT
00008a20 l     F .text	00000016 CC2500_HW_GDO2_DINT
00008a36 l     F .text	00000016 CC2500_HW_GDO0_EINT
00008a4c l     F .text	00000016 CC2500_HW_GDO0_CLEAR_FLAG
00008a62 l     F .text	00000016 CC2500_HW_GDO2_CLEAR_FLAG
00008a78 l     F .text	00000016 CONFIG_GDO0_PIN_AS_INPUT
00008a8e l     F .text	00000052 CC2500_HW_INIT
00008dc6 l     F .text	00000048 cc2500_check_tx_underflow
00008e0e l     F .text	0000004a cc2500_check_rx_overflow
00000000 l    df *ABS*	00000000 clock.c
00000270 l     O .bss	00000002 mclk_freq_mhz
00009680 l     F .text	000000c0 set_mcu_speed
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 timer.c
00000272 l     O .bss	00000002 timerA_cb
00000274 l     O .bss	00000002 timerA_wakeup
00000276 l     O .bss	00000002 timerB_cb
00000278 l     O .bss	00000002 timerB_wakeup
00000000 l    df *ABS*	00000000 uart.c
0000027a l     O .bss	00000002 uart_cb
00000000 l    df *ABS*	00000000 button.c
0000027c l     O .bss	00000002 cb
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 watchdog.c
0000027e l     O .bss	00000002 watchdog_backup
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vuprintf.c
0000a260 l     F .text	00000198 print_field
00000000 l    df *ABS*	00000000 puts.c
00009e38 g     F .text	00000032 putchar
00000057 g       *ABS*	00000000 __BCSCTL1
000097ea g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_16MHz
00000280 g     O .bss	00000001 cc2500_gdo2_cfg
00000174 g       *ABS*	00000000 __TACCR1
0000943a g     F .text	00000024 cc2500_idle
00000000 g       *ABS*	00000000 __data_size
00008126  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
000094ae g     F .text	0000001a cc2500_variables_bootstrap
000097c2 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_3MHz
00000024 g       *ABS*	00000000 __P1IES
0000884e g     F .text	000000ce adc10_sample_temp
0000004b g       *ABS*	00000000 __ADC10AE1
000095d8 g     F .text	0000009a port2_irq_handler
0000a242 g     F .text	00000010 printf
00000069 g       *ABS*	00000000 __UCB0CTL1
00008126  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00009bac g     F .text	00000016 spi_select_radio
00000060 g       *ABS*	00000000 __UCA0CTL0
000091b6 g     F .text	0000006a cc2500_utx
0000a0bc g     F .text	00000064 flash_write_byte
00009764 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_4MHz
00009d08 g     F .text	00000018 timerB_register_cb
0000012e g       *ABS*	00000000 __TAIV
00009b02 g     F .text	00000012 spi_check_miso_high
00009e2e g     F .text	0000000a uart_stop
00009f2e g     F .text	0000005c button_init
00008b22 g     F .text	0000002e CC2500_SPI_WREG
0000026e g     O .bss	00000001 cc2500_rx_length
00000000 g       .vectors	00000000 _efartext
00009ac8 g     F .text	0000003a spi_tx_rx
0000aac2 g     F .text	00000000 __udivhi3
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00008cd8 g     F .text	0000001e CC2500_SPI_RX_FIFO_BYTE
0000adb6 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
00009bd6 g     F .text	00000038 Timer_A
000094da g     F .text	000000dc cc2500_init
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
000093b6 g     F .text	00000018 cc2500_rx_register_cb
0000a1c2 g     F .text	00000022 flash_erase_info_memory
0000001d g       *ABS*	00000000 __P4OUT
0000008a g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
0000983a g     F .text	00000010 loop_4_cycles
00008000  w      .text	00000000 __watchdog_support
00008d6a g     F .text	00000030 cc2500_gdo2_set_signal
00008120  w      .text	00000000 __stop_progExec__
0000002d g       *ABS*	00000000 __P2IE
0000aa96 g     F .text	0000002c puts
00009e88 g     F .text	00000014 uart_eint
00008c76 g     F .text	00000062 CC2500_SPI_RX_BURST
00000192 g       *ABS*	00000000 __TBCCR0
00008126  w      .text	00000000 __isr_11
00009bc2 g     F .text	00000014 spi_deselect_radio
00000186 g       *ABS*	00000000 __TBCCTL2
000097ae g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_6MHz
0000aae4 g     F .text	00000000 __udivsi3
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00009a58 g     F .text	00000062 spi_init
00009d90 g     F .text	0000000e timerB_stop
00000049 g       *ABS*	00000000 __ADC10DTC1
00008c20 g     F .text	00000056 CC2500_SPI_TX_BURST
0000026c g     O .bss	00000001 cc2500_rx_offset
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
0000883e g     F .text	00000010 adc10irq
00009788 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_1MHz
0000abd6 g       .text	00000000 __udivmoddi4
0000919a g     F .text	0000001c cc2500_calibrate
00009812 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_4MHz
00008d9a g     F .text	0000002c cc2500_set_fifo_threshold
00008ae0 g     F .text	00000020 CC2500_SPI_TX
00000182 g       *ABS*	00000000 __TBCCTL0
00008cf6 g     F .text	00000044 cc2500_wait_status
0000927e g     F .text	00000138 cc2500_rx_pkt_eop
0000006d g       *ABS*	00000000 __UCB0STAT
0000883e g       .text	00000000 __isr_5
00008b50 g     F .text	00000036 CC2500_SPI_RREG
000087f6 g     F .text	00000032 adc10_calibrate
00000063 g       *ABS*	00000000 __UCA0BR1
0000aba8 g     F .text	00000000 __umoddi3
0000adb6 g       *ABS*	00000000 __data_load_start
00009a10 g     F .text	00000016 leds_on
00008126 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
000093ce g     F .text	0000001e cc2500_packet_status
000099a8 g     F .text	00000014 led_green_switch
0000a184 g     F .text	0000003e flash_erase_segment
000001bc g       *ABS*	00000000 __ADC10SA
0000a070 g     F .text	0000004c flash_init
00000166 g       *ABS*	00000000 __TACCTL2
00008286 g     F .text	00000022 timer_reached
0000ab82 g     F .text	00000000 __udivdi3
00000065 g       *ABS*	00000000 __UCA0STAT
0000997e g     F .text	00000016 led_green_off
0000945e g     F .text	00000012 cc2500_sleep
000093ec g     F .text	00000030 cc2500_cca
0000a02e g       .text	00000000 __isr_2
00000160 g       *ABS*	00000000 __TACTL
0000012c g       *ABS*	00000000 __FCTL3
00009c24 g     F .text	00000018 timerA_register_cb
00008126  w      .text	00000000 __isr_10
00000282 g     O .bss	00000002 radio_rx_cb
00009672 g     F .text	0000000e get_mclk_freq_mhz
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
00009c88 g     F .text	00000024 timerA_start_milliseconds
00009776 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_2MHz
00008bea g     F .text	00000036 CC2500_SPI_RX_BYTE
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
000000c3 g       *ABS*	00000000 __OA1CTL1
00000023 g       *ABS*	00000000 __P1IFG
00009b14 g     F .text	0000004a spi_tx_burst
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
000099d2 g     F .text	00000014 led_red_on
00000172 g       *ABS*	00000000 __TACCR0
000099fa g     F .text	00000016 leds_off
00000056 g       *ABS*	00000000 __DCOCTL
00000003 g       *ABS*	00000000 __IFG2
0000028a g     O .noinit	00000002 __wdt_clear_value
0000848c g     F .text	00000088 radio_cb
00009e6a g     F .text	0000001e uart_getchar
0000001b g       *ABS*	00000000 __P3SEL
00009cac g     F .text	0000000e timerA_stop
00009488 g     F .text	00000026 cc2500_wakeup
00009eda g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000a018 g     F .text	00000016 button_disable_interrupt
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
0000ab1a g     F .text	00000000 __umodsi3
000094c8 g     F .text	00000012 CC_ASSERT
0000a252 g     F .text	0000000e vprintf
00000028 g       *ABS*	00000000 __P2IN
00009c3c g     F .text	00000018 timerA_set_wakeup
0000a02e g     F .text	00000042 port1_irq_handler
00000118 g       *ABS*	00000000 __UCB0I2COA
00000184 g       *ABS*	00000000 __TBCCTL1
000001b4 g       *ABS*	00000000 __ADC10MEM
00000284 g     O .bss	00000001 cc2500_gdo0_cfg
000099bc g     F .text	00000016 led_red_off
0000aadc g     F .text	00000000 __umodhi3
00008126  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00000064 g       *ABS*	00000000 __UCA0MCTL
00009b5e g     F .text	0000004e spi_rx_burst
00009d9e g     F .text	00000090 uart_init
00008028  w      .text	00000000 __do_clear_bss
00009e9c g     F .text	00000016 uart_dint
0000858a g     F .text	000000c4 uart_cb
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
000097fe g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_8MHz
0000a1e4 g     F .text	0000001c watchdog_stop
00009740 g     F .text	00000012 set_mcu_speed_dco_mclk_1MHz_smclk_1MHz
000097d6 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz
00008828 g     F .text	00000016 adc10_stop
0000aae4 g       .text	00000000 __ext_udivmod32
00009cf2 g     F .text	00000016 timerB_init
00008d3a g     F .text	00000030 cc2500_gdo0_set_signal
00000027 g       *ABS*	00000000 __P1REN
0000a216 g       .text	00000000 __mulsi3
00009eb2 g     F .text	00000028 uart_register_cb
000000c0 g       *ABS*	00000000 __OA0CTL0
0000924e g     F .text	00000030 cc2500_rx_enter
00009826 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_2MHz
0000ac14  w      .text	00000000 _unexpected_
00008126  w      .text	00000000 __isr_8
000095d8 g       .text	00000000 __isr_3
0000a3f8 g     F .text	0000069e vuprintf
000099e6 g     F .text	00000014 led_red_switch
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
0000aac2 g       .text	00000000 __ext_udivmod16
00008000  w      .text	00000000 _reset_vector__
00008126 g       .text	00000000 __ctors_start
0000ab24 g       .text	00000000 __xabi_udivmod64
00008126  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
00000018 g       *ABS*	00000000 __P3IN
00008010  w      .text	00000000 __do_copy_data
00009fd0 g     F .text	0000001c button_is_pressed
00000200 g       .bss	00000000 __bss_start
0000803e g     F .text	000000e2 main
00000176 g       *ABS*	00000000 __TACCR2
000098f0 g     F .text	0000008e delay_ms
000000c2 g       *ABS*	00000000 __OA1CTL0
00009cba g       .text	00000000 __isr_13
0000984a g     F .text	000000a6 delay_usec
00000170 g       *ABS*	00000000 __TAR
0000001e g       *ABS*	00000000 __P4DIR
00009c0e g     F .text	00000016 timerA_init
00009eda g     F .text	00000054 usart0irq
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
00009d20 g     F .text	00000018 timerB_set_wakeup
0000002a g       *ABS*	00000000 __P2DIR
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
0000891c g     F .text	000000c2 adc10_sample_avcc
00009cba g     F .text	00000038 Timer_B
0000941c g     F .text	0000001e cc2500_get_rssi
00009470 g     F .text	00000018 cc2500_reset
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
00008b86 g     F .text	00000036 CC2500_SPI_ROREG
0000ad8a g     O .rodata	00000024 rfSettings_default_config
00009bd6 g       .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000800c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
00009c54 g     F .text	00000034 timerA_start_ticks
00000019 g       *ABS*	00000000 __P3OUT
000000c1 g       *ABS*	00000000 __OA0CTL1
0000979a g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_12MHz
00008b00 g     F .text	00000022 CC2500_SPI_STROBE
00008126 g       .text	00000000 __dtors_start
00008126  w      .text	00000000 __isr_6
00008126 g       .text	00000000 __ctors_end
00000062 g       *ABS*	00000000 __UCA0BR0
00000600 g       *ABS*	00000000 __stack
00009752 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_8MHz
00008126  w      .text	00000000 __isr_1
0000a004 g     F .text	00000014 button_enable_interrupt
00000200 g       .rodata	00000000 _edata
0000028c g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
00000286 g     O .bss	00000002 cc2500_rx_packet
00000048 g       *ABS*	00000000 __ADC10DTC0
0000011e g       *ABS*	00000000 __TBIV
000001b2 g       *ABS*	00000000 __ADC10CTL1
00000288 g     O .bss	00000001 cc2500_status_register
00009994 g     F .text	00000014 led_green_on
00008e82 g     F .text	000002f8 cc2500_configure
00008238 g     F .text	0000004e timer_tick_cb
0000a200 g     F .text	00000016 watchdog_restore
00000058 g       *ABS*	00000000 __BCSCTL2
00008120  w      .text	00000000 _endless_loop__
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00009fec g     F .text	00000018 button_register_cb
00000022 g       *ABS*	00000000 __P1DIR
0000917a g     F .text	00000020 cc2500_set_channel
00009f8a g     F .text	00000046 button_stop
00009220 g     F .text	0000002e cc2500_rx_register_buffer
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
00000164 g       *ABS*	00000000 __TACCTL1
0000006f g       *ABS*	00000000 __UCB0TXBUF
00009d38 g     F .text	00000034 timerB_start_ticks
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
00008010  w      .text	00000000 __low_level_init
00000011 g       *ABS*	00000000 __P4REN
000087e0 g     F .text	00000016 adc10_start
00000200 g       .rodata	00000000 __data_start
00009d6c g     F .text	00000024 timerB_start_milliseconds
000095b6 g     F .text	00000022 cc2500_gdox_signal_handler
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
00008bbc g     F .text	0000002e CC2500_SPI_TX_BYTE
00008e58 g     F .text	0000002a cc2500_check_fifo_xflow_flush
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00009aba g     F .text	0000000e spi_clear_rx_IFG
0000a120 g     F .text	00000064 flash_write_word
00009a26 g     F .text	00000032 leds_init



Disassembly of section .text:

00008000 <__watchdog_support>:
    8000:	55 42 20 01 	mov.b	&0x0120,r5	
    8004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    8008:	82 45 8a 02 	mov	r5,	&0x028a	

0000800c <__init_stack>:
    800c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

00008010 <__do_copy_data>:
    8010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    8014:	0f 93       	tst	r15		
    8016:	08 24       	jz	$+18     	;abs 0x8028
    8018:	92 42 8a 02 	mov	&0x028a,&0x0120	
    801c:	20 01 
    801e:	2f 83       	decd	r15		
    8020:	9f 4f b6 ad 	mov	-21066(r15),512(r15);0xadb6(r15), 0x0200(r15)
    8024:	00 02 
    8026:	f8 23       	jnz	$-14     	;abs 0x8018

00008028 <__do_clear_bss>:
    8028:	3f 40 8a 00 	mov	#138,	r15	;#0x008a
    802c:	0f 93       	tst	r15		
    802e:	07 24       	jz	$+16     	;abs 0x803e
    8030:	92 42 8a 02 	mov	&0x028a,&0x0120	
    8034:	20 01 
    8036:	1f 83       	dec	r15		
    8038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    803c:	f9 23       	jnz	$-12     	;abs 0x8030

0000803e <main>:
 * main

 */

int main(int argc, char *argv[])
{
    803e:	04 41       	mov	r1,	r4	
    8040:	24 53       	incd	r4		
    8042:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8046:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    804a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    watchdog_stop();
    804e:	b0 12 e4 a1 	call	#0xa1e4	

    TIMER_ID_INPUT = UINT_MAX;
    8052:	b2 43 0a 02 	mov	#-1,	&0x020a	;r3 As==11
    node_id = NODE_ID_UNDEFINED;
    8056:	82 43 00 02 	mov	#0,	&0x0200	;r3 As==00

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    805a:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    805e:	09 3c       	jmp	$+20     	;abs 0x8072
    {
        PT_INIT(&pt[i]);
    8060:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8064:	0f 5f       	rla	r15		
    8066:	3f 50 18 02 	add	#536,	r15	;#0x0218
    806a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    TIMER_ID_INPUT = UINT_MAX;
    node_id = NODE_ID_UNDEFINED;

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    806e:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    8072:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    8076:	f4 3b       	jl	$-22     	;abs 0x8060
    {
        PT_INIT(&pt[i]);
    }

    /* LEDs init */
    leds_init();
    8078:	b0 12 26 9a 	call	#0x9a26	
    led_green_flag = 0;
    807c:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    led_red_flag = 0;
    8080:	82 43 16 02 	mov	#0,	&0x0216	;r3 As==00

    /* clock init */
    set_mcu_speed_dco_mclk_16MHz_smclk_8MHz();
    8084:	b0 12 fe 97 	call	#0x97fe	

    /* timer init */
    timerA_init();
    8088:	b0 12 0e 9c 	call	#0x9c0e	
    timerA_register_cb(&timer_tick_cb);
    808c:	3f 40 38 82 	mov	#-32200,r15	;#0x8238
    8090:	b0 12 24 9c 	call	#0x9c24	
    timerA_start_milliseconds(TIMER_PERIOD_MS);
    8094:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8098:	b0 12 88 9c 	call	#0x9c88	

    /* UART init (serial link) */
    uart_init(UART_9600_SMCLK_8MHZ);
    809c:	3f 42       	mov	#8,	r15	;r2 As==11
    809e:	b0 12 9e 9d 	call	#0x9d9e	
    uart_register_cb(uart_cb);
    80a2:	3f 40 8a 85 	mov	#-31350,r15	;#0x858a
    80a6:	b0 12 b2 9e 	call	#0x9eb2	
    uart_flag = 0;
    80aa:	82 43 60 02 	mov	#0,	&0x0260	;r3 As==00
    uart_data = 0x0000;
    80ae:	82 43 62 02 	mov	#0,	&0x0262	;r3 As==00
    room = 0;
    80b2:	c2 43 66 02 	mov.b	#0,	&0x0266	;r3 As==00
    room_flag = 0;
    80b6:	82 43 64 02 	mov	#0,	&0x0264	;r3 As==00

    /* ADC10 init (temperature) */
    adc10_start();
    80ba:	b0 12 e0 87 	call	#0x87e0	
    current_buffer_pt=0;
    80be:	82 43 5e 02 	mov	#0,	&0x025e	;r3 As==00

    /* radio init */
    spi_init();
    80c2:	b0 12 58 9a 	call	#0x9a58	
    cc2500_init();
    80c6:	b0 12 da 94 	call	#0x94da	
    cc2500_rx_register_buffer(radio_tx_buffer, PKTLEN);
    80ca:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    80ce:	3f 40 20 02 	mov	#544,	r15	;#0x0220
    80d2:	b0 12 20 92 	call	#0x9220	
    cc2500_rx_register_cb(radio_cb);
    80d6:	3f 40 8c 84 	mov	#-31604,r15	;#0x848c
    80da:	b0 12 b6 93 	call	#0x93b6	
    cc2500_rx_enter();
    80de:	b0 12 4e 92 	call	#0x924e	
    radio_rx_flag = 0;
    80e2:	82 43 58 02 	mov	#0,	&0x0258	;r3 As==00
    

    button_enable_interrupt();
    80e6:	b0 12 04 a0 	call	#0xa004	
    __enable_interrupt();
    80ea:	32 d2       	eint			


    //Connection init
    uart_flag = 0;
    80ec:	82 43 60 02 	mov	#0,	&0x0260	;r3 As==00
    periodic_send_flag=1;
    80f0:	92 43 5a 02 	mov	#1,	&0x025a	;r3 As==01
    periodic_temp_flag=1;
    80f4:	92 43 5c 02 	mov	#1,	&0x025c	;r3 As==01
    set_node_id(0);
    80f8:	0f 43       	clr	r15		
    80fa:	b0 12 c2 81 	call	#0x81c2	

    /* simple cycle scheduling */
    while(1) {
        thread_led_red(&pt[0]);
    80fe:	3f 40 18 02 	mov	#536,	r15	;#0x0218
    8102:	b0 12 60 83 	call	#0x8360	
        thread_uart(&pt[1]);
    8106:	3f 40 1a 02 	mov	#538,	r15	;#0x021a
    810a:	b0 12 4e 86 	call	#0x864e	
        thread_periodic_send(&pt[2]);
    810e:	3f 40 1c 02 	mov	#540,	r15	;#0x021c
    8112:	b0 12 c8 86 	call	#0x86c8	
        thread_periodic_temperature(&pt[3]);
    8116:	3f 40 1e 02 	mov	#542,	r15	;#0x021e
    811a:	b0 12 56 87 	call	#0x8756	
    }
    811e:	ef 3f       	jmp	$-32     	;abs 0x80fe

00008120 <__stop_progExec__>:
    8120:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    8124:	fd 3f       	jmp	$-4      	;abs 0x8120

00008126 <__ctors_end>:
    8126:	30 40 14 ac 	br	#0xac14	

0000812a <printhex>:
static uint16_t uart_data;
static int room_flag;
static uint8_t room;

static void printhex(char *buffer, unsigned int len)
{
    812a:	04 12       	push	r4		
    812c:	04 41       	mov	r1,	r4	
    812e:	24 53       	incd	r4		
    8130:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8134:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8138:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    unsigned int i;
    for(i = 0; i < len; i++)
    813c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    8140:	10 3c       	jmp	$+34     	;abs 0x8162
    {
        printf("%02X ", (buffer[i]&0xFF));
    8142:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8146:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    814a:	6f 4f       	mov.b	@r15,	r15	
    814c:	8f 11       	sxt	r15		
    814e:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8152:	0f 12       	push	r15		
    8154:	30 12 16 ac 	push	#-21482	;#0xac16
    8158:	b0 12 42 a2 	call	#0xa242	
    815c:	21 52       	add	#4,	r1	;r2 As==10
static uint8_t room;

static void printhex(char *buffer, unsigned int len)
{
    unsigned int i;
    for(i = 0; i < len; i++)
    815e:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    8162:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    8166:	f8 ff 
    8168:	ec 2b       	jnc	$-38     	;abs 0x8142
    {
        printf("%02X ", (buffer[i]&0xFF));
    }
}
    816a:	31 50 06 00 	add	#6,	r1	;#0x0006
    816e:	34 41       	pop	r4		
    8170:	30 41       	ret			

00008172 <init_message>:

static void init_message()
{
    8172:	04 12       	push	r4		
    8174:	04 41       	mov	r1,	r4	
    8176:	24 53       	incd	r4		
    8178:	21 83       	decd	r1		
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    817a:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    817e:	08 3c       	jmp	$+18     	;abs 0x8190
    {
        radio_tx_buffer[i] = 0x00;
    8180:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8184:	3f 50 20 02 	add	#544,	r15	;#0x0220
    8188:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
}

static void init_message()
{
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    818c:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8190:	b4 90 1c 00 	cmp	#28,	-4(r4)	;#0x001c, 0xfffc(r4)
    8194:	fc ff 
    8196:	f4 2b       	jnc	$-22     	;abs 0x8180
    {
        radio_tx_buffer[i] = 0x00;
    }
    radio_tx_buffer[0] = (node_id>>8) &0xFF;
    8198:	1f 42 00 02 	mov	&0x0200,r15	
    819c:	8f 10       	swpb	r15		
    819e:	4f 4f       	mov.b	r15,	r15	
    81a0:	4f 4f       	mov.b	r15,	r15	
    81a2:	c2 4f 20 02 	mov.b	r15,	&0x0220	
    radio_tx_buffer[1] = node_id & 0xFF;
    81a6:	1f 42 00 02 	mov	&0x0200,r15	
    81aa:	4f 4f       	mov.b	r15,	r15	
    81ac:	c2 4f 21 02 	mov.b	r15,	&0x0221	
    radio_tx_buffer[2] = 0x20;//hex code for SPACE char
    81b0:	f2 40 20 00 	mov.b	#32,	&0x0222	;#0x0020
    81b4:	22 02 
    current_buffer_pt = 3;
    81b6:	b2 40 03 00 	mov	#3,	&0x025e	;#0x0003
    81ba:	5e 02 
}
    81bc:	21 53       	incd	r1		
    81be:	34 41       	pop	r4		
    81c0:	30 41       	ret			

000081c2 <set_node_id>:


/* returns 1 if the id was expected and set, 0 otherwise */
static void set_node_id(unsigned int id)
{
    81c2:	04 12       	push	r4		
    81c4:	04 41       	mov	r1,	r4	
    81c6:	24 53       	incd	r4		
    81c8:	21 83       	decd	r1		
    81ca:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    TIMER_ID_INPUT = UINT_MAX;
    81ce:	b2 43 0a 02 	mov	#-1,	&0x020a	;r3 As==11
    if(id!=0){
    81d2:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    81d6:	20 24       	jz	$+66     	;abs 0x8218
        if(flash_write_byte((unsigned char *) NODE_ID_LOCATION, id) != 0)
    81d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    81dc:	4f 4f       	mov.b	r15,	r15	
    81de:	4e 4f       	mov.b	r15,	r14	
    81e0:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81e4:	b0 12 bc a0 	call	#0xa0bc	
    81e8:	0f 93       	tst	r15		
    81ea:	23 24       	jz	$+72     	;abs 0x8232
        {
            flash_erase_segment((unsigned int *) NODE_ID_LOCATION);
    81ec:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81f0:	b0 12 84 a1 	call	#0xa184	
            flash_write_word((unsigned int *) NODE_ID_LOCATION, id);
    81f4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    81f8:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81fc:	b0 12 20 a1 	call	#0xa120	
            node_id = id;
    8200:	92 44 fc ff 	mov	-4(r4),	&0x0200	;0xfffc(r4)
    8204:	00 02 
            printf("node id set to: %x\n", node_id);
    8206:	1f 42 00 02 	mov	&0x0200,r15	
    820a:	0f 12       	push	r15		
    820c:	30 12 1c ac 	push	#-21476	;#0xac1c
    8210:	b0 12 42 a2 	call	#0xa242	
    8214:	21 52       	add	#4,	r1	;r2 As==10
    8216:	0d 3c       	jmp	$+28     	;abs 0x8232
        }
    } 
    else{
        /* retrieve node id from flash */
        node_id = *((unsigned int *) NODE_ID_LOCATION);
    8218:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    821c:	2f 4f       	mov	@r15,	r15	
    821e:	82 4f 00 02 	mov	r15,	&0x0200	
        printf("node id retrieved from flash:  %x\n", node_id);
    8222:	1f 42 00 02 	mov	&0x0200,r15	
    8226:	0f 12       	push	r15		
    8228:	30 12 30 ac 	push	#-21456	;#0xac30
    822c:	b0 12 42 a2 	call	#0xa242	
    8230:	21 52       	add	#4,	r1	;r2 As==10
    }
}
    8232:	21 53       	incd	r1		
    8234:	34 41       	pop	r4		
    8236:	30 41       	ret			

00008238 <timer_tick_cb>:

/*
 * Timer
 */

void timer_tick_cb() {
    8238:	04 12       	push	r4		
    823a:	04 41       	mov	r1,	r4	
    823c:	24 53       	incd	r4		
    823e:	21 83       	decd	r1		
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8240:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8244:	19 3c       	jmp	$+52     	;abs 0x8278
    {
        if(timer[i] != UINT_MAX) {
    8246:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    824a:	0f 5f       	rla	r15		
    824c:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8250:	2f 4f       	mov	@r15,	r15	
    8252:	3f 93       	cmp	#-1,	r15	;r3 As==11
    8254:	0f 24       	jz	$+32     	;abs 0x8274
            timer[i]++;
    8256:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    825a:	0f 5f       	rla	r15		
    825c:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8260:	2f 4f       	mov	@r15,	r15	
    8262:	0e 4f       	mov	r15,	r14	
    8264:	1e 53       	inc	r14		
    8266:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    826a:	0f 5f       	rla	r15		
    826c:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8270:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
 * Timer
 */

void timer_tick_cb() {
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8274:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8278:	b4 90 07 00 	cmp	#7,	-4(r4)	;#0x0007, 0xfffc(r4)
    827c:	fc ff 
    827e:	e3 3b       	jl	$-56     	;abs 0x8246
    {
        if(timer[i] != UINT_MAX) {
            timer[i]++;
        }
    }
}
    8280:	21 53       	incd	r1		
    8282:	34 41       	pop	r4		
    8284:	30 41       	ret			

00008286 <timer_reached>:

int timer_reached(uint16_t timer, uint16_t count) {
    8286:	04 12       	push	r4		
    8288:	04 41       	mov	r1,	r4	
    828a:	24 53       	incd	r4		
    828c:	21 82       	sub	#4,	r1	;r2 As==10
    828e:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8292:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    return (timer >= count);
    8296:	1f 43       	mov	#1,	r15	;r3 As==01
    8298:	94 94 fc ff 	cmp	-4(r4),	-6(r4)	;0xfffc(r4), 0xfffa(r4)
    829c:	fa ff 
    829e:	01 2c       	jc	$+4      	;abs 0x82a2
    82a0:	0f 43       	clr	r15		
}
    82a2:	21 52       	add	#4,	r1	;r2 As==10
    82a4:	34 41       	pop	r4		
    82a6:	30 41       	ret			

000082a8 <led_green_blink>:
 * LEDs
 */

/* asynchronous */
static void led_green_blink(int duration)
{
    82a8:	04 12       	push	r4		
    82aa:	04 41       	mov	r1,	r4	
    82ac:	24 53       	incd	r4		
    82ae:	21 83       	decd	r1		
    82b0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_green_duration = duration;
    82b4:	92 44 fc ff 	mov	-4(r4),	&0x0210	;0xfffc(r4)
    82b8:	10 02 
    led_green_flag = 1;
    82ba:	92 43 12 02 	mov	#1,	&0x0212	;r3 As==01
}
    82be:	21 53       	incd	r1		
    82c0:	34 41       	pop	r4		
    82c2:	30 41       	ret			

000082c4 <led_red_blink>:

static void led_red_blink(int duration)
{
    82c4:	04 12       	push	r4		
    82c6:	04 41       	mov	r1,	r4	
    82c8:	24 53       	incd	r4		
    82ca:	21 83       	decd	r1		
    82cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_red_duration = duration;
    82d0:	92 44 fc ff 	mov	-4(r4),	&0x0214	;0xfffc(r4)
    82d4:	14 02 
    led_red_flag = 1;
    82d6:	92 43 16 02 	mov	#1,	&0x0216	;r3 As==01
}
    82da:	21 53       	incd	r1		
    82dc:	34 41       	pop	r4		
    82de:	30 41       	ret			

000082e0 <thread_led_green>:

static PT_THREAD(thread_led_green(struct pt *pt))
{
    82e0:	04 12       	push	r4		
    82e2:	04 41       	mov	r1,	r4	
    82e4:	24 53       	incd	r4		
    82e6:	21 82       	sub	#4,	r1	;r2 As==10
    82e8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    82ec:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    82f0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    82f4:	2f 4f       	mov	@r15,	r15	
    82f6:	3f 90 c3 00 	cmp	#195,	r15	;#0x00c3
    82fa:	0a 24       	jz	$+22     	;abs 0x8310
    82fc:	3f 90 c7 00 	cmp	#199,	r15	;#0x00c7
    8300:	16 24       	jz	$+46     	;abs 0x832e
    8302:	0f 93       	tst	r15		
    8304:	22 20       	jnz	$+70     	;abs 0x834a

    while(1)
    {
        PT_WAIT_UNTIL(pt, led_green_flag);
    8306:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    830a:	bf 40 c3 00 	mov	#195,	0(r15)	;#0x00c3, 0x0000(r15)
    830e:	00 00 
    8310:	1f 42 12 02 	mov	&0x0212,r15	
    8314:	0f 93       	tst	r15		
    8316:	02 20       	jnz	$+6      	;abs 0x831c
    8318:	4f 43       	clr.b	r15		
    831a:	1f 3c       	jmp	$+64     	;abs 0x835a
        led_green_on();
    831c:	b0 12 94 99 	call	#0x9994	
        TIMER_LED_GREEN_ON = 0;
    8320:	82 43 04 02 	mov	#0,	&0x0204	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_GREEN_ON,
    8324:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8328:	bf 40 c7 00 	mov	#199,	0(r15)	;#0x00c7, 0x0000(r15)
    832c:	00 00 
    832e:	1f 42 10 02 	mov	&0x0210,r15	
    8332:	0e 4f       	mov	r15,	r14	
    8334:	1f 42 04 02 	mov	&0x0204,r15	
    8338:	b0 12 86 82 	call	#0x8286	
    833c:	0f 93       	tst	r15		
    833e:	02 20       	jnz	$+6      	;abs 0x8344
    8340:	4f 43       	clr.b	r15		
    8342:	0b 3c       	jmp	$+24     	;abs 0x835a
          led_green_duration));
        led_green_off();
    8344:	b0 12 7e 99 	call	#0x997e	
    }
    8348:	de 3f       	jmp	$-66     	;abs 0x8306

    PT_END(pt);
    834a:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    834e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8352:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8356:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    835a:	21 52       	add	#4,	r1	;r2 As==10
    835c:	34 41       	pop	r4		
    835e:	30 41       	ret			

00008360 <thread_led_red>:

static PT_THREAD(thread_led_red(struct pt *pt))
{
    8360:	04 12       	push	r4		
    8362:	04 41       	mov	r1,	r4	
    8364:	24 53       	incd	r4		
    8366:	21 82       	sub	#4,	r1	;r2 As==10
    8368:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    836c:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8370:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8374:	2f 4f       	mov	@r15,	r15	
    8376:	3f 90 d3 00 	cmp	#211,	r15	;#0x00d3
    837a:	13 24       	jz	$+40     	;abs 0x83a2
    837c:	3f 90 d4 00 	cmp	#212,	r15	;#0x00d4
    8380:	03 2c       	jc	$+8      	;abs 0x8388
    8382:	0f 93       	tst	r15		
    8384:	09 24       	jz	$+20     	;abs 0x8398
    8386:	3b 3c       	jmp	$+120    	;abs 0x83fe
    8388:	3f 90 d7 00 	cmp	#215,	r15	;#0x00d7
    838c:	19 24       	jz	$+52     	;abs 0x83c0
    838e:	3f 90 db 00 	cmp	#219,	r15	;#0x00db
    8392:	2a 24       	jz	$+86     	;abs 0x83e8
    8394:	34 3c       	jmp	$+106    	;abs 0x83fe
          led_red_duration));
        led_red_off();
        TIMER_LED_RED_ON = 0;
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
          led_red_duration));
    }
    8396:	03 43       	nop			
static PT_THREAD(thread_led_red(struct pt *pt))
{
    PT_BEGIN(pt);
    while(1)
    {
        PT_WAIT_UNTIL(pt, led_red_flag);
    8398:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    839c:	bf 40 d3 00 	mov	#211,	0(r15)	;#0x00d3, 0x0000(r15)
    83a0:	00 00 
    83a2:	1f 42 16 02 	mov	&0x0216,r15	
    83a6:	0f 93       	tst	r15		
    83a8:	02 20       	jnz	$+6      	;abs 0x83ae
    83aa:	4f 43       	clr.b	r15		
    83ac:	30 3c       	jmp	$+98     	;abs 0x840e
        led_red_on();
    83ae:	b0 12 d2 99 	call	#0x99d2	
        TIMER_LED_RED_ON = 0;
    83b2:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    83b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    83ba:	bf 40 d7 00 	mov	#215,	0(r15)	;#0x00d7, 0x0000(r15)
    83be:	00 00 
    83c0:	1f 42 14 02 	mov	&0x0214,r15	
    83c4:	0e 4f       	mov	r15,	r14	
    83c6:	1f 42 02 02 	mov	&0x0202,r15	
    83ca:	b0 12 86 82 	call	#0x8286	
    83ce:	0f 93       	tst	r15		
    83d0:	02 20       	jnz	$+6      	;abs 0x83d6
    83d2:	4f 43       	clr.b	r15		
    83d4:	1c 3c       	jmp	$+58     	;abs 0x840e
          led_red_duration));
        led_red_off();
    83d6:	b0 12 bc 99 	call	#0x99bc	
        TIMER_LED_RED_ON = 0;
    83da:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    83de:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    83e2:	bf 40 db 00 	mov	#219,	0(r15)	;#0x00db, 0x0000(r15)
    83e6:	00 00 
    83e8:	1f 42 14 02 	mov	&0x0214,r15	
    83ec:	0e 4f       	mov	r15,	r14	
    83ee:	1f 42 02 02 	mov	&0x0202,r15	
    83f2:	b0 12 86 82 	call	#0x8286	
    83f6:	0f 93       	tst	r15		
    83f8:	ce 23       	jnz	$-98     	;abs 0x8396
    83fa:	4f 43       	clr.b	r15		
    83fc:	08 3c       	jmp	$+18     	;abs 0x840e
          led_red_duration));
    }

    PT_END(pt);
    83fe:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8402:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8406:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    840a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    840e:	21 52       	add	#4,	r1	;r2 As==10
    8410:	34 41       	pop	r4		
    8412:	30 41       	ret			

00008414 <radio_send_message>:
static char radio_rx_buffer[PKTLEN];
static int radio_rx_flag;


static void radio_send_message()
{
    8414:	04 12       	push	r4		
    8416:	04 41       	mov	r1,	r4	
    8418:	24 53       	incd	r4		
    //finish the sending buffer with a dot 
    radio_tx_buffer[current_buffer_pt] = 0x2E; //dot hex code
    841a:	1f 42 5e 02 	mov	&0x025e,r15	
    841e:	ff 40 2e 00 	mov.b	#46,	544(r15);#0x002e, 0x0220(r15)
    8422:	20 02 
    current_buffer_pt = 0;
    8424:	82 43 5e 02 	mov	#0,	&0x025e	;r3 As==00
    led_green_on();
    8428:	b0 12 94 99 	call	#0x9994	
    cc2500_utx(radio_tx_buffer, PKTLEN);
    842c:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    8430:	3f 40 20 02 	mov	#544,	r15	;#0x0220
    8434:	b0 12 b6 91 	call	#0x91b6	
    printf("Node id: %c%c\n", (node_id>>8) &0xFF,node_id & 0xFF);//room number + sensor number 
    8438:	1f 42 00 02 	mov	&0x0200,r15	
    843c:	0e 4f       	mov	r15,	r14	
    843e:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    8442:	1f 42 00 02 	mov	&0x0200,r15	
    8446:	8f 10       	swpb	r15		
    8448:	4f 4f       	mov.b	r15,	r15	
    844a:	0e 12       	push	r14		
    844c:	0f 12       	push	r15		
    844e:	30 12 53 ac 	push	#-21421	;#0xac53
    8452:	b0 12 42 a2 	call	#0xa242	
    8456:	31 50 06 00 	add	#6,	r1	;#0x0006
    printf("sent: ");
    845a:	30 12 62 ac 	push	#-21406	;#0xac62
    845e:	b0 12 42 a2 	call	#0xa242	
    8462:	21 53       	incd	r1		
    printhex(radio_tx_buffer, PKTLEN);
    8464:	3e 40 1c 00 	mov	#28,	r14	;#0x001c
    8468:	3f 40 20 02 	mov	#544,	r15	;#0x0220
    846c:	b0 12 2a 81 	call	#0x812a	
    putchar('\r');
    8470:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    8474:	b0 12 38 9e 	call	#0x9e38	
    putchar('\n');
    8478:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    847c:	b0 12 38 9e 	call	#0x9e38	
    led_green_off();
    8480:	b0 12 7e 99 	call	#0x997e	
    cc2500_rx_enter();
    8484:	b0 12 4e 92 	call	#0x924e	
}
    8488:	34 41       	pop	r4		
    848a:	30 41       	ret			

0000848c <radio_cb>:




void radio_cb(uint8_t *buffer, int size, int8_t rssi)
{
    848c:	04 12       	push	r4		
    848e:	04 41       	mov	r1,	r4	
    8490:	24 53       	incd	r4		
    8492:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8496:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    849a:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    849e:	c4 4d fc ff 	mov.b	r13,	-4(r4)	;0xfffc(r4)
    led_green_blink(10); /* 10 timer ticks = 100 ms */
    84a2:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    84a6:	b0 12 a8 82 	call	#0x82a8	
    //DBG_PRINTF("radio_cb :: ");
    switch (size)
    84aa:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    84ae:	2f 52       	add	#4,	r15	;r2 As==10
    84b0:	3f 90 05 00 	cmp	#5,	r15	;#0x0005
    84b4:	1e 2c       	jc	$+62     	;abs 0x84f2
    84b6:	0f 5f       	rla	r15		
    84b8:	3f 50 d6 ac 	add	#-21290,r15	;#0xacd6
    84bc:	2f 4f       	mov	@r15,	r15	
    84be:	00 4f       	br	r15		
    {
        case 0:
            DBG_PRINTF("msg siNode idze 0\r\n");
    84c0:	3f 40 69 ac 	mov	#-21399,r15	;#0xac69
    84c4:	b0 12 96 aa 	call	#0xaa96	
            break;
    84c8:	1f 3c       	jmp	$+64     	;abs 0x8508
        case -EEMPTY:
            DBG_PRINTF("msg emptyr\r\n");
    84ca:	3f 40 7c ac 	mov	#-21380,r15	;#0xac7c
    84ce:	b0 12 96 aa 	call	#0xaa96	
            break;
    84d2:	1a 3c       	jmp	$+54     	;abs 0x8508
        case -ERXFLOW:
            DBG_PRINTF("msg rx overflow\r\n");
    84d4:	3f 40 88 ac 	mov	#-21368,r15	;#0xac88
    84d8:	b0 12 96 aa 	call	#0xaa96	
            break;
    84dc:	15 3c       	jmp	$+44     	;abs 0x8508
        case -ERXBADCRC:
            DBG_PRINTF("msg rx bad CRC\r\n");
    84de:	3f 40 99 ac 	mov	#-21351,r15	;#0xac99
    84e2:	b0 12 96 aa 	call	#0xaa96	
            break;
    84e6:	10 3c       	jmp	$+34     	;abs 0x8508
        case -ETXFLOW:
            DBG_PRINTF("msg tx overflow\r\n");
    84e8:	3f 40 a9 ac 	mov	#-21335,r15	;#0xaca9
    84ec:	b0 12 96 aa 	call	#0xaa96	
            break;
    84f0:	0b 3c       	jmp	$+24     	;abs 0x8508
        default:
            if (size > 0)
    84f2:	94 93 fa ff 	cmp	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    84f6:	07 34       	jge	$+16     	;abs 0x8506
                //FIXME what if radio_rx_flag == 1 already?
                //radio_rx_flag = 1;
            }
            else
            {
                DBG_PRINTF("msg packet error size=%d\r\n",size);
    84f8:	14 12 fa ff 	push	-6(r4)		;0xfffa(r4)
    84fc:	30 12 ba ac 	push	#-21318	;#0xacba
    8500:	b0 12 42 a2 	call	#0xa242	
    8504:	21 52       	add	#4,	r1	;r2 As==10
            }
            break;
    8506:	03 43       	nop			
    }

    cc2500_rx_enter();
    8508:	b0 12 4e 92 	call	#0x924e	
}
    850c:	31 50 06 00 	add	#6,	r1	;#0x0006
    8510:	34 41       	pop	r4		
    8512:	30 41       	ret			

00008514 <register_temperature>:
 * TEMP SENSOR
 */
 
 /* to be called from within a protothread */
static void register_temperature()
{
    8514:	04 12       	push	r4		
    8516:	04 41       	mov	r1,	r4	
    8518:	24 53       	incd	r4		
    851a:	21 82       	sub	#4,	r1	;r2 As==10
    
    int temperature = adc10_sample_temp();
    851c:	b0 12 4e 88 	call	#0x884e	
    8520:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    printf("temperature: %d, hex:", temperature);
    8524:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8528:	0f 12       	push	r15		
    852a:	30 12 e0 ac 	push	#-21280	;#0xace0
    852e:	b0 12 42 a2 	call	#0xa242	
    8532:	21 52       	add	#4,	r1	;r2 As==10
    printhex((char *) &temperature, 2);
    8534:	0f 44       	mov	r4,	r15	
    8536:	2f 82       	sub	#4,	r15	;r2 As==10
    8538:	2e 43       	mov	#2,	r14	;r3 As==10
    853a:	b0 12 2a 81 	call	#0x812a	
    putchar('\r');
    853e:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    8542:	b0 12 38 9e 	call	#0x9e38	
    putchar('\n');
    8546:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    854a:	b0 12 38 9e 	call	#0x9e38	
    /* msp430 is little endian, convert temperature to network order */
    char *pt = (char *) &temperature;
    854e:	3f 40 fa ff 	mov	#-6,	r15	;#0xfffa
    8552:	0f 54       	add	r4,	r15	
    8554:	2f 53       	incd	r15		
    8556:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    radio_tx_buffer[current_buffer_pt++] = pt[1];
    855a:	1f 42 5e 02 	mov	&0x025e,r15	
    855e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8562:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    8566:	cf 4e 20 02 	mov.b	r14,	544(r15);0x0220(r15)
    856a:	1f 53       	inc	r15		
    856c:	82 4f 5e 02 	mov	r15,	&0x025e	
    radio_tx_buffer[current_buffer_pt++] = pt[0];
    8570:	1f 42 5e 02 	mov	&0x025e,r15	
    8574:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8578:	6e 4e       	mov.b	@r14,	r14	
    857a:	cf 4e 20 02 	mov.b	r14,	544(r15);0x0220(r15)
    857e:	1f 53       	inc	r15		
    8580:	82 4f 5e 02 	mov	r15,	&0x025e	
    
}
    8584:	21 52       	add	#4,	r1	;r2 As==10
    8586:	34 41       	pop	r4		
    8588:	30 41       	ret			

0000858a <uart_cb>:
 * UART
 */


int uart_cb(uint8_t data)
{
    858a:	04 12       	push	r4		
    858c:	04 41       	mov	r1,	r4	
    858e:	24 53       	incd	r4		
    8590:	21 83       	decd	r1		
    8592:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    
    if(data == 27 && uart_flag==0){ //27 is ESC ascii code (decimal) 
    8596:	f4 90 1b 00 	cmp.b	#27,	-4(r4)	;#0x001b, 0xfffc(r4)
    859a:	fc ff 
    859c:	13 20       	jnz	$+40     	;abs 0x85c4
    859e:	1f 42 60 02 	mov	&0x0260,r15	
    85a2:	0f 93       	tst	r15		
    85a4:	0f 20       	jnz	$+32     	;abs 0x85c4
        printf("Enter new id starting with the room number and then the sensor number. Press enter to accept\n");
    85a6:	3f 40 f6 ac 	mov	#-21258,r15	;#0xacf6
    85aa:	b0 12 96 aa 	call	#0xaa96	
        room_flag = 0;
    85ae:	82 43 64 02 	mov	#0,	&0x0264	;r3 As==00
        uart_data = 0;
    85b2:	82 43 62 02 	mov	#0,	&0x0262	;r3 As==00
        uart_flag=1;
    85b6:	92 43 60 02 	mov	#1,	&0x0260	;r3 As==01
        periodic_send_flag=0;
    85ba:	82 43 5a 02 	mov	#0,	&0x025a	;r3 As==00
        periodic_temp_flag=0;
    85be:	82 43 5c 02 	mov	#0,	&0x025c	;r3 As==00
    85c2:	41 3c       	jmp	$+132    	;abs 0x8646
    }
    else if(data == 13 && uart_flag==1){ //13 is return/enter ascii code
    85c4:	f4 90 0d 00 	cmp.b	#13,	-4(r4)	;#0x000d, 0xfffc(r4)
    85c8:	fc ff 
    85ca:	0b 20       	jnz	$+24     	;abs 0x85e2
    85cc:	1f 42 60 02 	mov	&0x0260,r15	
    85d0:	1f 93       	cmp	#1,	r15	;r3 As==01
    85d2:	07 20       	jnz	$+16     	;abs 0x85e2
        uart_flag=0;
    85d4:	82 43 60 02 	mov	#0,	&0x0260	;r3 As==00
        periodic_send_flag=1;
    85d8:	92 43 5a 02 	mov	#1,	&0x025a	;r3 As==01
        periodic_temp_flag=1;
    85dc:	92 43 5c 02 	mov	#1,	&0x025c	;r3 As==01
    85e0:	32 3c       	jmp	$+102    	;abs 0x8646
    }
    else {
    	if(room_flag == 0){
    85e2:	1f 42 64 02 	mov	&0x0264,r15	
    85e6:	0f 93       	tst	r15		
    85e8:	12 20       	jnz	$+38     	;abs 0x860e
    		printf("room : %c (hex code : %x)\n",data, data);
    85ea:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    85ee:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    85f2:	0e 12       	push	r14		
    85f4:	0f 12       	push	r15		
    85f6:	30 12 53 ad 	push	#-21165	;#0xad53
    85fa:	b0 12 42 a2 	call	#0xa242	
    85fe:	31 50 06 00 	add	#6,	r1	;#0x0006
    		room = data;
    8602:	d2 44 fc ff 	mov.b	-4(r4),	&0x0266	;0xfffc(r4)
    8606:	66 02 
    		room_flag=1;
    8608:	92 43 64 02 	mov	#1,	&0x0264	;r3 As==01
    860c:	1c 3c       	jmp	$+58     	;abs 0x8646
    		
    	}
        else if (room_flag == 1){
    860e:	1f 42 64 02 	mov	&0x0264,r15	
    8612:	1f 93       	cmp	#1,	r15	;r3 As==01
    8614:	18 20       	jnz	$+50     	;abs 0x8646
        	printf("sensor: %c (hex code : %x)\n",data,data);
    8616:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    861a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    861e:	0e 12       	push	r14		
    8620:	0f 12       	push	r15		
    8622:	30 12 6e ad 	push	#-21138	;#0xad6e
    8626:	b0 12 42 a2 	call	#0xa242	
    862a:	31 50 06 00 	add	#6,	r1	;#0x0006
        	uart_data = ((room & 0xFF) <<8) | (data & 0xFF) ;
    862e:	5f 42 66 02 	mov.b	&0x0266,r15	
    8632:	4f 4f       	mov.b	r15,	r15	
    8634:	4f 4f       	mov.b	r15,	r15	
    8636:	8f 10       	swpb	r15		
    8638:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    863c:	0f de       	bis	r14,	r15	
    863e:	82 4f 62 02 	mov	r15,	&0x0262	
        	//printf("uart_data : %x \n",uart_data);
        	room_flag = 0;
    8642:	82 43 64 02 	mov	#0,	&0x0264	;r3 As==00
        }      
    }
        
    return 0;
    8646:	0f 43       	clr	r15		
}
    8648:	21 53       	incd	r1		
    864a:	34 41       	pop	r4		
    864c:	30 41       	ret			

0000864e <thread_uart>:


static PT_THREAD(thread_uart(struct pt *pt))
{
    864e:	04 12       	push	r4		
    8650:	04 41       	mov	r1,	r4	
    8652:	24 53       	incd	r4		
    8654:	21 82       	sub	#4,	r1	;r2 As==10
    8656:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    865a:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    865e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8662:	2f 4f       	mov	@r15,	r15	
    8664:	3f 90 6b 01 	cmp	#363,	r15	;#0x016b
    8668:	0a 24       	jz	$+22     	;abs 0x867e
    866a:	3f 90 6d 01 	cmp	#365,	r15	;#0x016d
    866e:	14 24       	jz	$+42     	;abs 0x8698
    8670:	0f 93       	tst	r15		
    8672:	1f 20       	jnz	$+64     	;abs 0x86b2

    while(1)
    {
        PT_WAIT_UNTIL(pt, uart_flag==1);
    8674:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8678:	bf 40 6b 01 	mov	#363,	0(r15)	;#0x016b, 0x0000(r15)
    867c:	00 00 
    867e:	1f 42 60 02 	mov	&0x0260,r15	
    8682:	1f 93       	cmp	#1,	r15	;r3 As==01
    8684:	02 24       	jz	$+6      	;abs 0x868a
    8686:	4f 43       	clr.b	r15		
    8688:	1c 3c       	jmp	$+58     	;abs 0x86c2
        led_red_on();
    868a:	b0 12 d2 99 	call	#0x99d2	
        PT_WAIT_UNTIL(pt,uart_flag==0);
    868e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8692:	bf 40 6d 01 	mov	#365,	0(r15)	;#0x016d, 0x0000(r15)
    8696:	00 00 
    8698:	1f 42 60 02 	mov	&0x0260,r15	
    869c:	0f 93       	tst	r15		
    869e:	02 24       	jz	$+6      	;abs 0x86a4
    86a0:	4f 43       	clr.b	r15		
    86a2:	0f 3c       	jmp	$+32     	;abs 0x86c2
        set_node_id(uart_data);
    86a4:	1f 42 62 02 	mov	&0x0262,r15	
    86a8:	b0 12 c2 81 	call	#0x81c2	
        led_red_off();
    86ac:	b0 12 bc 99 	call	#0x99bc	
    }
    86b0:	e1 3f       	jmp	$-60     	;abs 0x8674

    PT_END(pt);
    86b2:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    86b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86ba:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    86be:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    86c2:	21 52       	add	#4,	r1	;r2 As==10
    86c4:	34 41       	pop	r4		
    86c6:	30 41       	ret			

000086c8 <thread_periodic_send>:

static PT_THREAD(thread_periodic_send(struct pt *pt))
{
    86c8:	04 12       	push	r4		
    86ca:	04 41       	mov	r1,	r4	
    86cc:	24 53       	incd	r4		
    86ce:	21 82       	sub	#4,	r1	;r2 As==10
    86d0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    86d4:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    86d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86dc:	2f 4f       	mov	@r15,	r15	
    86de:	3f 90 7b 01 	cmp	#379,	r15	;#0x017b
    86e2:	0a 24       	jz	$+22     	;abs 0x86f8
    86e4:	3f 90 7e 01 	cmp	#382,	r15	;#0x017e
    86e8:	16 24       	jz	$+46     	;abs 0x8716
    86ea:	0f 93       	tst	r15		
    86ec:	29 20       	jnz	$+84     	;abs 0x8740

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_send_flag==1);
    86ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86f2:	bf 40 7b 01 	mov	#379,	0(r15)	;#0x017b, 0x0000(r15)
    86f6:	00 00 
    86f8:	1f 42 5a 02 	mov	&0x025a,r15	
    86fc:	1f 93       	cmp	#1,	r15	;r3 As==01
    86fe:	02 24       	jz	$+6      	;abs 0x8704
    8700:	4f 43       	clr.b	r15		
    8702:	26 3c       	jmp	$+78     	;abs 0x8750
        TIMER_RADIO_SEND = 0;
    8704:	82 43 08 02 	mov	#0,	&0x0208	;r3 As==00
        init_message();
    8708:	b0 12 72 81 	call	#0x8172	
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_RADIO_SEND, TIMER_SEND) && periodic_send_flag==1);
    870c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8710:	bf 40 7e 01 	mov	#382,	0(r15)	;#0x017e, 0x0000(r15)
    8714:	00 00 
    8716:	1f 42 00 02 	mov	&0x0200,r15	
    871a:	0f 93       	tst	r15		
    871c:	0c 24       	jz	$+26     	;abs 0x8736
    871e:	1f 42 08 02 	mov	&0x0208,r15	
    8722:	3e 40 1a 04 	mov	#1050,	r14	;#0x041a
    8726:	b0 12 86 82 	call	#0x8286	
    872a:	0f 93       	tst	r15		
    872c:	04 24       	jz	$+10     	;abs 0x8736
    872e:	1f 42 5a 02 	mov	&0x025a,r15	
    8732:	1f 93       	cmp	#1,	r15	;r3 As==01
    8734:	02 24       	jz	$+6      	;abs 0x873a
    8736:	4f 43       	clr.b	r15		
    8738:	0b 3c       	jmp	$+24     	;abs 0x8750
        radio_send_message();
    873a:	b0 12 14 84 	call	#0x8414	
    }
    873e:	d7 3f       	jmp	$-80     	;abs 0x86ee

    PT_END(pt);
    8740:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8744:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8748:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    874c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8750:	21 52       	add	#4,	r1	;r2 As==10
    8752:	34 41       	pop	r4		
    8754:	30 41       	ret			

00008756 <thread_periodic_temperature>:


static PT_THREAD(thread_periodic_temperature(struct pt *pt))
{
    8756:	04 12       	push	r4		
    8758:	04 41       	mov	r1,	r4	
    875a:	24 53       	incd	r4		
    875c:	21 82       	sub	#4,	r1	;r2 As==10
    875e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8762:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8766:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    876a:	2f 4f       	mov	@r15,	r15	
    876c:	3f 90 8c 01 	cmp	#396,	r15	;#0x018c
    8770:	0a 24       	jz	$+22     	;abs 0x8786
    8772:	3f 90 8e 01 	cmp	#398,	r15	;#0x018e
    8776:	14 24       	jz	$+42     	;abs 0x87a0
    8778:	0f 93       	tst	r15		
    877a:	27 20       	jnz	$+80     	;abs 0x87ca

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_temp_flag==1);
    877c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8780:	bf 40 8c 01 	mov	#396,	0(r15)	;#0x018c, 0x0000(r15)
    8784:	00 00 
    8786:	1f 42 5c 02 	mov	&0x025c,r15	
    878a:	1f 93       	cmp	#1,	r15	;r3 As==01
    878c:	02 24       	jz	$+6      	;abs 0x8792
    878e:	4f 43       	clr.b	r15		
    8790:	24 3c       	jmp	$+74     	;abs 0x87da
        TIMER_TEMP = 0;
    8792:	82 43 0e 02 	mov	#0,	&0x020e	;r3 As==00
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_TEMP, TIMER_SENSING_TEMP) && periodic_temp_flag==1);
    8796:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    879a:	bf 40 8e 01 	mov	#398,	0(r15)	;#0x018e, 0x0000(r15)
    879e:	00 00 
    87a0:	1f 42 00 02 	mov	&0x0200,r15	
    87a4:	0f 93       	tst	r15		
    87a6:	0c 24       	jz	$+26     	;abs 0x87c0
    87a8:	1f 42 0e 02 	mov	&0x020e,r15	
    87ac:	3e 40 64 00 	mov	#100,	r14	;#0x0064
    87b0:	b0 12 86 82 	call	#0x8286	
    87b4:	0f 93       	tst	r15		
    87b6:	04 24       	jz	$+10     	;abs 0x87c0
    87b8:	1f 42 5c 02 	mov	&0x025c,r15	
    87bc:	1f 93       	cmp	#1,	r15	;r3 As==01
    87be:	02 24       	jz	$+6      	;abs 0x87c4
    87c0:	4f 43       	clr.b	r15		
    87c2:	0b 3c       	jmp	$+24     	;abs 0x87da
        register_temperature();
    87c4:	b0 12 14 85 	call	#0x8514	
    }
    87c8:	d9 3f       	jmp	$-76     	;abs 0x877c

    PT_END(pt);
    87ca:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    87ce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    87d2:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    87d6:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    87da:	21 52       	add	#4,	r1	;r2 As==10
    87dc:	34 41       	pop	r4		
    87de:	30 41       	ret			

000087e0 <adc10_start>:
    87e0:	04 12       	push	r4		
    87e2:	04 41       	mov	r1,	r4	
    87e4:	24 53       	incd	r4		
    87e6:	b2 40 86 10 	mov	#4230,	&0x0268	;#0x1086
    87ea:	68 02 
    87ec:	b2 40 dc 0a 	mov	#2780,	&0x026a	;#0x0adc
    87f0:	6a 02 
    87f2:	34 41       	pop	r4		
    87f4:	30 41       	ret			

000087f6 <adc10_calibrate>:
    87f6:	04 12       	push	r4		
    87f8:	04 41       	mov	r1,	r4	
    87fa:	24 53       	incd	r4		
    87fc:	21 82       	sub	#4,	r1	;r2 As==10
    87fe:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8802:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8806:	84 93 fa ff 	tst	-6(r4)		;0xfffa(r4)
    880a:	04 24       	jz	$+10     	;abs 0x8814
    880c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8810:	82 4f 68 02 	mov	r15,	&0x0268	
    8814:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    8818:	04 24       	jz	$+10     	;abs 0x8822
    881a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    881e:	82 4f 6a 02 	mov	r15,	&0x026a	
    8822:	21 52       	add	#4,	r1	;r2 As==10
    8824:	34 41       	pop	r4		
    8826:	30 41       	ret			

00008828 <adc10_stop>:
    8828:	04 12       	push	r4		
    882a:	04 41       	mov	r1,	r4	
    882c:	24 53       	incd	r4		
    882e:	1f 42 b0 01 	mov	&0x01b0,r15	
    8832:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8836:	82 4f b0 01 	mov	r15,	&0x01b0	
    883a:	34 41       	pop	r4		
    883c:	30 41       	ret			

0000883e <adc10irq>:
    883e:	04 12       	push	r4		
    8840:	04 41       	mov	r1,	r4	
    8842:	24 53       	incd	r4		
    8844:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    8848:	00 00 
    884a:	34 41       	pop	r4		
    884c:	00 13       	reti			

0000884e <adc10_sample_temp>:
    884e:	0b 12       	push	r11		
    8850:	0a 12       	push	r10		
    8852:	09 12       	push	r9		
    8854:	08 12       	push	r8		
    8856:	04 12       	push	r4		
    8858:	04 41       	mov	r1,	r4	
    885a:	34 50 0a 00 	add	#10,	r4	;#0x000a
    885e:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8862:	b2 40 80 a0 	mov	#-24448,&0x01b2	;#0xa080
    8866:	b2 01 
    8868:	b2 40 38 3c 	mov	#15416,	&0x01b0	;#0x3c38
    886c:	b0 01 
    886e:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8872:	0f 43       	clr	r15		
    8874:	b0 12 3a 98 	call	#0x983a	
    8878:	1f 42 b0 01 	mov	&0x01b0,r15	
    887c:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8880:	82 4f b0 01 	mov	r15,	&0x01b0	
    8884:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8888:	1f 42 b4 01 	mov	&0x01b4,r15	
    888c:	08 4f       	mov	r15,	r8	
    888e:	09 43       	clr	r9		
    8890:	84 48 f2 ff 	mov	r8,	-14(r4)	;0xfff2(r4)
    8894:	84 49 f4 ff 	mov	r9,	-12(r4)	;0xfff4(r4)
    8898:	1f 42 b0 01 	mov	&0x01b0,r15	
    889c:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    88a0:	82 4f b0 01 	mov	r15,	&0x01b0	
    88a4:	1f 42 b0 01 	mov	&0x01b0,r15	
    88a8:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    88ac:	82 4f b0 01 	mov	r15,	&0x01b0	
    88b0:	1f 42 68 02 	mov	&0x0268,r15	
    88b4:	0a 4f       	mov	r15,	r10	
    88b6:	0f 4a       	mov	r10,	r15	
    88b8:	8f 10       	swpb	r15		
    88ba:	8f 11       	sxt	r15		
    88bc:	8f 10       	swpb	r15		
    88be:	8f 11       	sxt	r15		
    88c0:	0b 4f       	mov	r15,	r11	
    88c2:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    88c6:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    88ca:	0c 4e       	mov	r14,	r12	
    88cc:	0d 4f       	mov	r15,	r13	
    88ce:	0e 4a       	mov	r10,	r14	
    88d0:	0f 4b       	mov	r11,	r15	
    88d2:	b0 12 16 a2 	call	#0xa216	
    88d6:	0f 93       	tst	r15		
    88d8:	04 38       	jl	$+10     	;abs 0x88e2
    88da:	1f 93       	cmp	#1,	r15	;r3 As==01
    88dc:	05 34       	jge	$+12     	;abs 0x88e8
    88de:	0e 93       	tst	r14		
    88e0:	03 2c       	jc	$+8      	;abs 0x88e8
    88e2:	3e 50 ff 03 	add	#1023,	r14	;#0x03ff
    88e6:	0f 63       	adc	r15		
    88e8:	8e 10       	swpb	r14		
    88ea:	8f 10       	swpb	r15		
    88ec:	4e ef       	xor.b	r15,	r14	
    88ee:	0e ef       	xor	r15,	r14	
    88f0:	8f 11       	sxt	r15		
    88f2:	0f 11       	rra	r15		
    88f4:	0e 10       	rrc	r14		
    88f6:	0f 11       	rra	r15		
    88f8:	0e 10       	rrc	r14		
    88fa:	1f 42 6a 02 	mov	&0x026a,r15	
    88fe:	0d 4e       	mov	r14,	r13	
    8900:	0d 8f       	sub	r15,	r13	
    8902:	0f 4d       	mov	r13,	r15	
    8904:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    8908:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    890c:	31 50 06 00 	add	#6,	r1	;#0x0006
    8910:	34 41       	pop	r4		
    8912:	38 41       	pop	r8		
    8914:	39 41       	pop	r9		
    8916:	3a 41       	pop	r10		
    8918:	3b 41       	pop	r11		
    891a:	30 41       	ret			

0000891c <adc10_sample_avcc>:
    891c:	0b 12       	push	r11		
    891e:	0a 12       	push	r10		
    8920:	04 12       	push	r4		
    8922:	04 41       	mov	r1,	r4	
    8924:	34 50 06 00 	add	#6,	r4	;#0x0006
    8928:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    892c:	b2 40 00 b0 	mov	#-20480,&0x01b2	;#0xb000
    8930:	b2 01 
    8932:	b2 40 78 30 	mov	#12408,	&0x01b0	;#0x3078
    8936:	b0 01 
    8938:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    893c:	0f 43       	clr	r15		
    893e:	b0 12 3a 98 	call	#0x983a	
    8942:	1f 42 b0 01 	mov	&0x01b0,r15	
    8946:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    894a:	82 4f b0 01 	mov	r15,	&0x01b0	
    894e:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8952:	1f 42 b4 01 	mov	&0x01b4,r15	
    8956:	0a 4f       	mov	r15,	r10	
    8958:	0b 43       	clr	r11		
    895a:	84 4a f6 ff 	mov	r10,	-10(r4)	;0xfff6(r4)
    895e:	84 4b f8 ff 	mov	r11,	-8(r4)	;0xfff8(r4)
    8962:	1f 42 b0 01 	mov	&0x01b0,r15	
    8966:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    896a:	82 4f b0 01 	mov	r15,	&0x01b0	
    896e:	1f 42 b0 01 	mov	&0x01b0,r15	
    8972:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8976:	82 4f b0 01 	mov	r15,	&0x01b0	
    897a:	1a 44 f6 ff 	mov	-10(r4),r10	;0xfff6(r4)
    897e:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8982:	0c 4a       	mov	r10,	r12	
    8984:	0d 4b       	mov	r11,	r13	
    8986:	0e 4c       	mov	r12,	r14	
    8988:	0f 4d       	mov	r13,	r15	
    898a:	0e 5e       	rla	r14		
    898c:	0f 6f       	rlc	r15		
    898e:	0e 5e       	rla	r14		
    8990:	0f 6f       	rlc	r15		
    8992:	0c 4e       	mov	r14,	r12	
    8994:	0d 4f       	mov	r15,	r13	
    8996:	0c 5a       	add	r10,	r12	
    8998:	0d 6b       	addc	r11,	r13	
    899a:	0e 4c       	mov	r12,	r14	
    899c:	0f 4d       	mov	r13,	r15	
    899e:	0e 5e       	rla	r14		
    89a0:	0f 6f       	rlc	r15		
    89a2:	0e 5e       	rla	r14		
    89a4:	0f 6f       	rlc	r15		
    89a6:	0e 5c       	add	r12,	r14	
    89a8:	0f 6d       	addc	r13,	r15	
    89aa:	0f 93       	tst	r15		
    89ac:	04 38       	jl	$+10     	;abs 0x89b6
    89ae:	1f 93       	cmp	#1,	r15	;r3 As==01
    89b0:	05 34       	jge	$+12     	;abs 0x89bc
    89b2:	0e 93       	tst	r14		
    89b4:	03 2c       	jc	$+8      	;abs 0x89bc
    89b6:	3e 50 ff 01 	add	#511,	r14	;#0x01ff
    89ba:	0f 63       	adc	r15		
    89bc:	8e 10       	swpb	r14		
    89be:	8f 10       	swpb	r15		
    89c0:	4e ef       	xor.b	r15,	r14	
    89c2:	0e ef       	xor	r15,	r14	
    89c4:	8f 11       	sxt	r15		
    89c6:	0f 11       	rra	r15		
    89c8:	0e 10       	rrc	r14		
    89ca:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    89ce:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    89d2:	31 50 06 00 	add	#6,	r1	;#0x0006
    89d6:	34 41       	pop	r4		
    89d8:	3a 41       	pop	r10		
    89da:	3b 41       	pop	r11		
    89dc:	30 41       	ret			

000089de <CC2500_HW_GDO0_IRQ_ON_ASSERT>:
    89de:	04 12       	push	r4		
    89e0:	04 41       	mov	r1,	r4	
    89e2:	24 53       	incd	r4		
    89e4:	5f 42 2c 00 	mov.b	&0x002c,r15	
    89e8:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    89ec:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    89f0:	34 41       	pop	r4		
    89f2:	30 41       	ret			

000089f4 <CC2500_HW_GDO2_IRQ_ON_ASSERT>:
    89f4:	04 12       	push	r4		
    89f6:	04 41       	mov	r1,	r4	
    89f8:	24 53       	incd	r4		
    89fa:	5f 42 2c 00 	mov.b	&0x002c,r15	
    89fe:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8a02:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8a06:	34 41       	pop	r4		
    8a08:	30 41       	ret			

00008a0a <CC2500_HW_GDO0_DINT>:
    8a0a:	04 12       	push	r4		
    8a0c:	04 41       	mov	r1,	r4	
    8a0e:	24 53       	incd	r4		
    8a10:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8a14:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8a18:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8a1c:	34 41       	pop	r4		
    8a1e:	30 41       	ret			

00008a20 <CC2500_HW_GDO2_DINT>:
    8a20:	04 12       	push	r4		
    8a22:	04 41       	mov	r1,	r4	
    8a24:	24 53       	incd	r4		
    8a26:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8a2a:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8a2e:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8a32:	34 41       	pop	r4		
    8a34:	30 41       	ret			

00008a36 <CC2500_HW_GDO0_EINT>:
    8a36:	04 12       	push	r4		
    8a38:	04 41       	mov	r1,	r4	
    8a3a:	24 53       	incd	r4		
    8a3c:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8a40:	7f d0 40 00 	bis.b	#64,	r15	;#0x0040
    8a44:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8a48:	34 41       	pop	r4		
    8a4a:	30 41       	ret			

00008a4c <CC2500_HW_GDO0_CLEAR_FLAG>:
    8a4c:	04 12       	push	r4		
    8a4e:	04 41       	mov	r1,	r4	
    8a50:	24 53       	incd	r4		
    8a52:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8a56:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8a5a:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8a5e:	34 41       	pop	r4		
    8a60:	30 41       	ret			

00008a62 <CC2500_HW_GDO2_CLEAR_FLAG>:
    8a62:	04 12       	push	r4		
    8a64:	04 41       	mov	r1,	r4	
    8a66:	24 53       	incd	r4		
    8a68:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8a6c:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8a70:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8a74:	34 41       	pop	r4		
    8a76:	30 41       	ret			

00008a78 <CONFIG_GDO0_PIN_AS_INPUT>:
    8a78:	04 12       	push	r4		
    8a7a:	04 41       	mov	r1,	r4	
    8a7c:	24 53       	incd	r4		
    8a7e:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8a82:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8a86:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8a8a:	34 41       	pop	r4		
    8a8c:	30 41       	ret			

00008a8e <CC2500_HW_INIT>:
    8a8e:	04 12       	push	r4		
    8a90:	04 41       	mov	r1,	r4	
    8a92:	24 53       	incd	r4		
    8a94:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8a98:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8a9c:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8aa0:	5f 42 2a 00 	mov.b	&0x002a,r15	
    8aa4:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8aa8:	c2 4f 2a 00 	mov.b	r15,	&0x002a	
    8aac:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8ab0:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8ab4:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8ab8:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8abc:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8ac0:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8ac4:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8ac8:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8acc:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8ad0:	5f 42 2f 00 	mov.b	&0x002f,r15	
    8ad4:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    8ad8:	c2 4f 2f 00 	mov.b	r15,	&0x002f	
    8adc:	34 41       	pop	r4		
    8ade:	30 41       	ret			

00008ae0 <CC2500_SPI_TX>:
    8ae0:	04 12       	push	r4		
    8ae2:	04 41       	mov	r1,	r4	
    8ae4:	24 53       	incd	r4		
    8ae6:	21 83       	decd	r1		
    8ae8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8aec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8af0:	b0 12 c8 9a 	call	#0x9ac8	
    8af4:	4f 4f       	mov.b	r15,	r15	
    8af6:	c2 4f 88 02 	mov.b	r15,	&0x0288	
    8afa:	21 53       	incd	r1		
    8afc:	34 41       	pop	r4		
    8afe:	30 41       	ret			

00008b00 <CC2500_SPI_STROBE>:
    8b00:	04 12       	push	r4		
    8b02:	04 41       	mov	r1,	r4	
    8b04:	24 53       	incd	r4		
    8b06:	21 83       	decd	r1		
    8b08:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8b0c:	b0 12 ac 9b 	call	#0x9bac	
    8b10:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b14:	b0 12 e0 8a 	call	#0x8ae0	
    8b18:	b0 12 c2 9b 	call	#0x9bc2	
    8b1c:	21 53       	incd	r1		
    8b1e:	34 41       	pop	r4		
    8b20:	30 41       	ret			

00008b22 <CC2500_SPI_WREG>:
    8b22:	04 12       	push	r4		
    8b24:	04 41       	mov	r1,	r4	
    8b26:	24 53       	incd	r4		
    8b28:	21 82       	sub	#4,	r1	;r2 As==10
    8b2a:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8b2e:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8b32:	b0 12 ac 9b 	call	#0x9bac	
    8b36:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8b3a:	b0 12 e0 8a 	call	#0x8ae0	
    8b3e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b42:	b0 12 e0 8a 	call	#0x8ae0	
    8b46:	b0 12 c2 9b 	call	#0x9bc2	
    8b4a:	21 52       	add	#4,	r1	;r2 As==10
    8b4c:	34 41       	pop	r4		
    8b4e:	30 41       	ret			

00008b50 <CC2500_SPI_RREG>:
    8b50:	04 12       	push	r4		
    8b52:	04 41       	mov	r1,	r4	
    8b54:	24 53       	incd	r4		
    8b56:	21 82       	sub	#4,	r1	;r2 As==10
    8b58:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8b5c:	b0 12 ac 9b 	call	#0x9bac	
    8b60:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b64:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8b68:	b0 12 e0 8a 	call	#0x8ae0	
    8b6c:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8b70:	b0 12 c8 9a 	call	#0x9ac8	
    8b74:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8b78:	b0 12 c2 9b 	call	#0x9bc2	
    8b7c:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8b80:	21 52       	add	#4,	r1	;r2 As==10
    8b82:	34 41       	pop	r4		
    8b84:	30 41       	ret			

00008b86 <CC2500_SPI_ROREG>:
    8b86:	04 12       	push	r4		
    8b88:	04 41       	mov	r1,	r4	
    8b8a:	24 53       	incd	r4		
    8b8c:	21 82       	sub	#4,	r1	;r2 As==10
    8b8e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8b92:	b0 12 ac 9b 	call	#0x9bac	
    8b96:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b9a:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8b9e:	b0 12 e0 8a 	call	#0x8ae0	
    8ba2:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8ba6:	b0 12 c8 9a 	call	#0x9ac8	
    8baa:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8bae:	b0 12 c2 9b 	call	#0x9bc2	
    8bb2:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8bb6:	21 52       	add	#4,	r1	;r2 As==10
    8bb8:	34 41       	pop	r4		
    8bba:	30 41       	ret			

00008bbc <CC2500_SPI_TX_BYTE>:
    8bbc:	04 12       	push	r4		
    8bbe:	04 41       	mov	r1,	r4	
    8bc0:	24 53       	incd	r4		
    8bc2:	21 82       	sub	#4,	r1	;r2 As==10
    8bc4:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8bc8:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8bcc:	b0 12 ac 9b 	call	#0x9bac	
    8bd0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8bd4:	b0 12 e0 8a 	call	#0x8ae0	
    8bd8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8bdc:	b0 12 e0 8a 	call	#0x8ae0	
    8be0:	b0 12 c2 9b 	call	#0x9bc2	
    8be4:	21 52       	add	#4,	r1	;r2 As==10
    8be6:	34 41       	pop	r4		
    8be8:	30 41       	ret			

00008bea <CC2500_SPI_RX_BYTE>:
    8bea:	04 12       	push	r4		
    8bec:	04 41       	mov	r1,	r4	
    8bee:	24 53       	incd	r4		
    8bf0:	21 82       	sub	#4,	r1	;r2 As==10
    8bf2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8bf6:	b0 12 ac 9b 	call	#0x9bac	
    8bfa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8bfe:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8c02:	b0 12 e0 8a 	call	#0x8ae0	
    8c06:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8c0a:	b0 12 c8 9a 	call	#0x9ac8	
    8c0e:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8c12:	b0 12 c2 9b 	call	#0x9bc2	
    8c16:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8c1a:	21 52       	add	#4,	r1	;r2 As==10
    8c1c:	34 41       	pop	r4		
    8c1e:	30 41       	ret			

00008c20 <CC2500_SPI_TX_BURST>:
    8c20:	04 12       	push	r4		
    8c22:	04 41       	mov	r1,	r4	
    8c24:	24 53       	incd	r4		
    8c26:	31 82       	sub	#8,	r1	;r2 As==11
    8c28:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8c2c:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8c30:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
    8c34:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8c38:	b0 12 ac 9b 	call	#0x9bac	
    8c3c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8c40:	3f d0 40 00 	bis	#64,	r15	;#0x0040
    8c44:	b0 12 e0 8a 	call	#0x8ae0	
    8c48:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8c4c:	0a 3c       	jmp	$+22     	;abs 0x8c62
    8c4e:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8c52:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8c56:	6f 4f       	mov.b	@r15,	r15	
    8c58:	8f 11       	sxt	r15		
    8c5a:	b0 12 e0 8a 	call	#0x8ae0	
    8c5e:	d4 53 f6 ff 	inc.b	-10(r4)	;0xfff6(r4)
    8c62:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8c66:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    8c6a:	f1 3b       	jl	$-28     	;abs 0x8c4e
    8c6c:	b0 12 c2 9b 	call	#0x9bc2	
    8c70:	31 52       	add	#8,	r1	;r2 As==11
    8c72:	34 41       	pop	r4		
    8c74:	30 41       	ret			

00008c76 <CC2500_SPI_RX_BURST>:
    8c76:	0b 12       	push	r11		
    8c78:	04 12       	push	r4		
    8c7a:	04 41       	mov	r1,	r4	
    8c7c:	24 52       	add	#4,	r4	;r2 As==10
    8c7e:	31 82       	sub	#8,	r1	;r2 As==11
    8c80:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    8c84:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    8c88:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
    8c8c:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8c90:	b0 12 ac 9b 	call	#0x9bac	
    8c94:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    8c98:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8c9c:	b0 12 e0 8a 	call	#0x8ae0	
    8ca0:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8ca4:	0e 3c       	jmp	$+30     	;abs 0x8cc2
    8ca6:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8caa:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8cae:	0b 5f       	add	r15,	r11	
    8cb0:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8cb4:	b0 12 c8 9a 	call	#0x9ac8	
    8cb8:	4f 4f       	mov.b	r15,	r15	
    8cba:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
    8cbe:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    8cc2:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8cc6:	1f 94 fa ff 	cmp	-6(r4),	r15	;0xfffa(r4)
    8cca:	ed 3b       	jl	$-36     	;abs 0x8ca6
    8ccc:	b0 12 c2 9b 	call	#0x9bc2	
    8cd0:	31 52       	add	#8,	r1	;r2 As==11
    8cd2:	34 41       	pop	r4		
    8cd4:	3b 41       	pop	r11		
    8cd6:	30 41       	ret			

00008cd8 <CC2500_SPI_RX_FIFO_BYTE>:
    8cd8:	04 12       	push	r4		
    8cda:	04 41       	mov	r1,	r4	
    8cdc:	24 53       	incd	r4		
    8cde:	21 83       	decd	r1		
    8ce0:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    8ce4:	b0 12 ea 8b 	call	#0x8bea	
    8ce8:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8cec:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8cf0:	21 53       	incd	r1		
    8cf2:	34 41       	pop	r4		
    8cf4:	30 41       	ret			

00008cf6 <cc2500_wait_status>:
    8cf6:	04 12       	push	r4		
    8cf8:	04 41       	mov	r1,	r4	
    8cfa:	24 53       	incd	r4		
    8cfc:	21 82       	sub	#4,	r1	;r2 As==10
    8cfe:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8d02:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    8d06:	b0 12 00 8b 	call	#0x8b00	
    8d0a:	5f 42 88 02 	mov.b	&0x0288,r15	
    8d0e:	4f 4f       	mov.b	r15,	r15	
    8d10:	4f 4f       	mov.b	r15,	r15	
    8d12:	12 c3       	clrc			
    8d14:	4f 10       	rrc.b	r15		
    8d16:	12 c3       	clrc			
    8d18:	4f 10       	rrc.b	r15		
    8d1a:	12 c3       	clrc			
    8d1c:	4f 10       	rrc.b	r15		
    8d1e:	12 c3       	clrc			
    8d20:	4f 10       	rrc.b	r15		
    8d22:	4e 4f       	mov.b	r15,	r14	
    8d24:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    8d28:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
    8d2c:	d4 94 fa ff 	cmp.b	-6(r4),	-4(r4)	;0xfffa(r4), 0xfffc(r4)
    8d30:	fc ff 
    8d32:	e7 23       	jnz	$-48     	;abs 0x8d02
    8d34:	21 52       	add	#4,	r1	;r2 As==10
    8d36:	34 41       	pop	r4		
    8d38:	30 41       	ret			

00008d3a <cc2500_gdo0_set_signal>:
    8d3a:	04 12       	push	r4		
    8d3c:	04 41       	mov	r1,	r4	
    8d3e:	24 53       	incd	r4		
    8d40:	21 82       	sub	#4,	r1	;r2 As==10
    8d42:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8d46:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8d4a:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8d4e:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8d52:	d2 44 fa ff 	mov.b	-6(r4),	&0x0284	;0xfffa(r4)
    8d56:	84 02 
    8d58:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8d5c:	0e 4f       	mov	r15,	r14	
    8d5e:	2f 43       	mov	#2,	r15	;r3 As==10
    8d60:	b0 12 22 8b 	call	#0x8b22	
    8d64:	21 52       	add	#4,	r1	;r2 As==10
    8d66:	34 41       	pop	r4		
    8d68:	30 41       	ret			

00008d6a <cc2500_gdo2_set_signal>:
    8d6a:	04 12       	push	r4		
    8d6c:	04 41       	mov	r1,	r4	
    8d6e:	24 53       	incd	r4		
    8d70:	21 82       	sub	#4,	r1	;r2 As==10
    8d72:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8d76:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8d7a:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8d7e:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8d82:	d2 44 fa ff 	mov.b	-6(r4),	&0x0280	;0xfffa(r4)
    8d86:	80 02 
    8d88:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8d8c:	0e 4f       	mov	r15,	r14	
    8d8e:	0f 43       	clr	r15		
    8d90:	b0 12 22 8b 	call	#0x8b22	
    8d94:	21 52       	add	#4,	r1	;r2 As==10
    8d96:	34 41       	pop	r4		
    8d98:	30 41       	ret			

00008d9a <cc2500_set_fifo_threshold>:
    8d9a:	04 12       	push	r4		
    8d9c:	04 41       	mov	r1,	r4	
    8d9e:	24 53       	incd	r4		
    8da0:	21 82       	sub	#4,	r1	;r2 As==10
    8da2:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8da6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8daa:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    8dae:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8db2:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8db6:	0e 4f       	mov	r15,	r14	
    8db8:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8dbc:	b0 12 22 8b 	call	#0x8b22	
    8dc0:	21 52       	add	#4,	r1	;r2 As==10
    8dc2:	34 41       	pop	r4		
    8dc4:	30 41       	ret			

00008dc6 <cc2500_check_tx_underflow>:
    8dc6:	04 12       	push	r4		
    8dc8:	04 41       	mov	r1,	r4	
    8dca:	24 53       	incd	r4		
    8dcc:	21 83       	decd	r1		
    8dce:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    8dd2:	b0 12 00 8b 	call	#0x8b00	
    8dd6:	5f 42 88 02 	mov.b	&0x0288,r15	
    8dda:	4f 4f       	mov.b	r15,	r15	
    8ddc:	4f 4f       	mov.b	r15,	r15	
    8dde:	12 c3       	clrc			
    8de0:	4f 10       	rrc.b	r15		
    8de2:	12 c3       	clrc			
    8de4:	4f 10       	rrc.b	r15		
    8de6:	12 c3       	clrc			
    8de8:	4f 10       	rrc.b	r15		
    8dea:	12 c3       	clrc			
    8dec:	4f 10       	rrc.b	r15		
    8dee:	4f 4f       	mov.b	r15,	r15	
    8df0:	0e 4f       	mov	r15,	r14	
    8df2:	3e f0 07 00 	and	#7,	r14	;#0x0007
    8df6:	1f 43       	mov	#1,	r15	;r3 As==01
    8df8:	3e 90 07 00 	cmp	#7,	r14	;#0x0007
    8dfc:	01 24       	jz	$+4      	;abs 0x8e00
    8dfe:	0f 43       	clr	r15		
    8e00:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e04:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e08:	21 53       	incd	r1		
    8e0a:	34 41       	pop	r4		
    8e0c:	30 41       	ret			

00008e0e <cc2500_check_rx_overflow>:
    8e0e:	04 12       	push	r4		
    8e10:	04 41       	mov	r1,	r4	
    8e12:	24 53       	incd	r4		
    8e14:	21 83       	decd	r1		
    8e16:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    8e1a:	b0 12 00 8b 	call	#0x8b00	
    8e1e:	5f 42 88 02 	mov.b	&0x0288,r15	
    8e22:	4f 4f       	mov.b	r15,	r15	
    8e24:	4f 4f       	mov.b	r15,	r15	
    8e26:	12 c3       	clrc			
    8e28:	4f 10       	rrc.b	r15		
    8e2a:	12 c3       	clrc			
    8e2c:	4f 10       	rrc.b	r15		
    8e2e:	12 c3       	clrc			
    8e30:	4f 10       	rrc.b	r15		
    8e32:	12 c3       	clrc			
    8e34:	4f 10       	rrc.b	r15		
    8e36:	4f 4f       	mov.b	r15,	r15	
    8e38:	0e 4f       	mov	r15,	r14	
    8e3a:	3e f0 07 00 	and	#7,	r14	;#0x0007
    8e3e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    8e40:	3e 90 06 00 	cmp	#6,	r14	;#0x0006
    8e44:	01 24       	jz	$+4      	;abs 0x8e48
    8e46:	4f 43       	clr.b	r15		
    8e48:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8e4c:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8e50:	8f 11       	sxt	r15		
    8e52:	21 53       	incd	r1		
    8e54:	34 41       	pop	r4		
    8e56:	30 41       	ret			

00008e58 <cc2500_check_fifo_xflow_flush>:
    8e58:	04 12       	push	r4		
    8e5a:	04 41       	mov	r1,	r4	
    8e5c:	24 53       	incd	r4		
    8e5e:	b0 12 c6 8d 	call	#0x8dc6	
    8e62:	0f 93       	tst	r15		
    8e64:	04 24       	jz	$+10     	;abs 0x8e6e
    8e66:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    8e6a:	b0 12 00 8b 	call	#0x8b00	
    8e6e:	b0 12 0e 8e 	call	#0x8e0e	
    8e72:	0f 93       	tst	r15		
    8e74:	04 24       	jz	$+10     	;abs 0x8e7e
    8e76:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    8e7a:	b0 12 00 8b 	call	#0x8b00	
    8e7e:	34 41       	pop	r4		
    8e80:	30 41       	ret			

00008e82 <cc2500_configure>:
    8e82:	04 12       	push	r4		
    8e84:	04 41       	mov	r1,	r4	
    8e86:	24 53       	incd	r4		
    8e88:	21 83       	decd	r1		
    8e8a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e8e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e92:	6f 4f       	mov.b	@r15,	r15	
    8e94:	4f 4f       	mov.b	r15,	r15	
    8e96:	0e 4f       	mov	r15,	r14	
    8e98:	3f 40 0b 00 	mov	#11,	r15	;#0x000b
    8e9c:	b0 12 22 8b 	call	#0x8b22	
    8ea0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ea4:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    8ea8:	4f 4f       	mov.b	r15,	r15	
    8eaa:	0e 4f       	mov	r15,	r14	
    8eac:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    8eb0:	b0 12 22 8b 	call	#0x8b22	
    8eb4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8eb8:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    8ebc:	4f 4f       	mov.b	r15,	r15	
    8ebe:	0e 4f       	mov	r15,	r14	
    8ec0:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    8ec4:	b0 12 22 8b 	call	#0x8b22	
    8ec8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ecc:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    8ed0:	4f 4f       	mov.b	r15,	r15	
    8ed2:	0e 4f       	mov	r15,	r14	
    8ed4:	3f 40 0e 00 	mov	#14,	r15	;#0x000e
    8ed8:	b0 12 22 8b 	call	#0x8b22	
    8edc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ee0:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    8ee4:	4f 4f       	mov.b	r15,	r15	
    8ee6:	0e 4f       	mov	r15,	r14	
    8ee8:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    8eec:	b0 12 22 8b 	call	#0x8b22	
    8ef0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ef4:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    8ef8:	4f 4f       	mov.b	r15,	r15	
    8efa:	0e 4f       	mov	r15,	r14	
    8efc:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    8f00:	b0 12 22 8b 	call	#0x8b22	
    8f04:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f08:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    8f0c:	4f 4f       	mov.b	r15,	r15	
    8f0e:	0e 4f       	mov	r15,	r14	
    8f10:	3f 40 11 00 	mov	#17,	r15	;#0x0011
    8f14:	b0 12 22 8b 	call	#0x8b22	
    8f18:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f1c:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    8f20:	4f 4f       	mov.b	r15,	r15	
    8f22:	0e 4f       	mov	r15,	r14	
    8f24:	3f 40 12 00 	mov	#18,	r15	;#0x0012
    8f28:	b0 12 22 8b 	call	#0x8b22	
    8f2c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f30:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    8f34:	4f 4f       	mov.b	r15,	r15	
    8f36:	0e 4f       	mov	r15,	r14	
    8f38:	3f 40 13 00 	mov	#19,	r15	;#0x0013
    8f3c:	b0 12 22 8b 	call	#0x8b22	
    8f40:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f44:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    8f48:	4f 4f       	mov.b	r15,	r15	
    8f4a:	0e 4f       	mov	r15,	r14	
    8f4c:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    8f50:	b0 12 22 8b 	call	#0x8b22	
    8f54:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f58:	5f 4f 0a 00 	mov.b	10(r15),r15	;0x000a(r15)
    8f5c:	4f 4f       	mov.b	r15,	r15	
    8f5e:	0e 4f       	mov	r15,	r14	
    8f60:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8f64:	b0 12 22 8b 	call	#0x8b22	
    8f68:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f6c:	5f 4f 0b 00 	mov.b	11(r15),r15	;0x000b(r15)
    8f70:	4f 4f       	mov.b	r15,	r15	
    8f72:	0e 4f       	mov	r15,	r14	
    8f74:	3f 40 15 00 	mov	#21,	r15	;#0x0015
    8f78:	b0 12 22 8b 	call	#0x8b22	
    8f7c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f80:	5f 4f 0c 00 	mov.b	12(r15),r15	;0x000c(r15)
    8f84:	4f 4f       	mov.b	r15,	r15	
    8f86:	0e 4f       	mov	r15,	r14	
    8f88:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    8f8c:	b0 12 22 8b 	call	#0x8b22	
    8f90:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f94:	5f 4f 0d 00 	mov.b	13(r15),r15	;0x000d(r15)
    8f98:	4f 4f       	mov.b	r15,	r15	
    8f9a:	0e 4f       	mov	r15,	r14	
    8f9c:	3f 40 22 00 	mov	#34,	r15	;#0x0022
    8fa0:	b0 12 22 8b 	call	#0x8b22	
    8fa4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fa8:	5f 4f 0e 00 	mov.b	14(r15),r15	;0x000e(r15)
    8fac:	4f 4f       	mov.b	r15,	r15	
    8fae:	0e 4f       	mov	r15,	r14	
    8fb0:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    8fb4:	b0 12 22 8b 	call	#0x8b22	
    8fb8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fbc:	5f 4f 0f 00 	mov.b	15(r15),r15	;0x000f(r15)
    8fc0:	4f 4f       	mov.b	r15,	r15	
    8fc2:	0e 4f       	mov	r15,	r14	
    8fc4:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    8fc8:	b0 12 22 8b 	call	#0x8b22	
    8fcc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fd0:	5f 4f 10 00 	mov.b	16(r15),r15	;0x0010(r15)
    8fd4:	4f 4f       	mov.b	r15,	r15	
    8fd6:	0e 4f       	mov	r15,	r14	
    8fd8:	3f 40 1a 00 	mov	#26,	r15	;#0x001a
    8fdc:	b0 12 22 8b 	call	#0x8b22	
    8fe0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fe4:	5f 4f 11 00 	mov.b	17(r15),r15	;0x0011(r15)
    8fe8:	4f 4f       	mov.b	r15,	r15	
    8fea:	0e 4f       	mov	r15,	r14	
    8fec:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    8ff0:	b0 12 22 8b 	call	#0x8b22	
    8ff4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ff8:	5f 4f 12 00 	mov.b	18(r15),r15	;0x0012(r15)
    8ffc:	4f 4f       	mov.b	r15,	r15	
    8ffe:	0e 4f       	mov	r15,	r14	
    9000:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    9004:	b0 12 22 8b 	call	#0x8b22	
    9008:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    900c:	5f 4f 13 00 	mov.b	19(r15),r15	;0x0013(r15)
    9010:	4f 4f       	mov.b	r15,	r15	
    9012:	0e 4f       	mov	r15,	r14	
    9014:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    9018:	b0 12 22 8b 	call	#0x8b22	
    901c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9020:	5f 4f 14 00 	mov.b	20(r15),r15	;0x0014(r15)
    9024:	4f 4f       	mov.b	r15,	r15	
    9026:	0e 4f       	mov	r15,	r14	
    9028:	3f 40 23 00 	mov	#35,	r15	;#0x0023
    902c:	b0 12 22 8b 	call	#0x8b22	
    9030:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9034:	5f 4f 15 00 	mov.b	21(r15),r15	;0x0015(r15)
    9038:	4f 4f       	mov.b	r15,	r15	
    903a:	0e 4f       	mov	r15,	r14	
    903c:	3f 40 24 00 	mov	#36,	r15	;#0x0024
    9040:	b0 12 22 8b 	call	#0x8b22	
    9044:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9048:	5f 4f 16 00 	mov.b	22(r15),r15	;0x0016(r15)
    904c:	4f 4f       	mov.b	r15,	r15	
    904e:	0e 4f       	mov	r15,	r14	
    9050:	3f 40 25 00 	mov	#37,	r15	;#0x0025
    9054:	b0 12 22 8b 	call	#0x8b22	
    9058:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    905c:	5f 4f 17 00 	mov.b	23(r15),r15	;0x0017(r15)
    9060:	4f 4f       	mov.b	r15,	r15	
    9062:	0e 4f       	mov	r15,	r14	
    9064:	3f 40 26 00 	mov	#38,	r15	;#0x0026
    9068:	b0 12 22 8b 	call	#0x8b22	
    906c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9070:	5f 4f 18 00 	mov.b	24(r15),r15	;0x0018(r15)
    9074:	4f 4f       	mov.b	r15,	r15	
    9076:	0e 4f       	mov	r15,	r14	
    9078:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    907c:	b0 12 22 8b 	call	#0x8b22	
    9080:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9084:	5f 4f 19 00 	mov.b	25(r15),r15	;0x0019(r15)
    9088:	4f 4f       	mov.b	r15,	r15	
    908a:	0e 4f       	mov	r15,	r14	
    908c:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    9090:	b0 12 22 8b 	call	#0x8b22	
    9094:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9098:	5f 4f 1a 00 	mov.b	26(r15),r15	;0x001a(r15)
    909c:	4f 4f       	mov.b	r15,	r15	
    909e:	0e 4f       	mov	r15,	r14	
    90a0:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    90a4:	b0 12 22 8b 	call	#0x8b22	
    90a8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90ac:	5f 4f 1b 00 	mov.b	27(r15),r15	;0x001b(r15)
    90b0:	4f 4f       	mov.b	r15,	r15	
    90b2:	0e 4f       	mov	r15,	r14	
    90b4:	3f 40 2e 00 	mov	#46,	r15	;#0x002e
    90b8:	b0 12 22 8b 	call	#0x8b22	
    90bc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90c0:	5f 4f 1c 00 	mov.b	28(r15),r15	;0x001c(r15)
    90c4:	4f 4f       	mov.b	r15,	r15	
    90c6:	0e 4f       	mov	r15,	r14	
    90c8:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    90cc:	b0 12 22 8b 	call	#0x8b22	
    90d0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90d4:	5f 4f 1d 00 	mov.b	29(r15),r15	;0x001d(r15)
    90d8:	4f 4f       	mov.b	r15,	r15	
    90da:	0e 4f       	mov	r15,	r14	
    90dc:	0f 43       	clr	r15		
    90de:	b0 12 22 8b 	call	#0x8b22	
    90e2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90e6:	5f 4f 1e 00 	mov.b	30(r15),r15	;0x001e(r15)
    90ea:	4f 4f       	mov.b	r15,	r15	
    90ec:	0e 4f       	mov	r15,	r14	
    90ee:	2f 43       	mov	#2,	r15	;r3 As==10
    90f0:	b0 12 22 8b 	call	#0x8b22	
    90f4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90f8:	5f 4f 1f 00 	mov.b	31(r15),r15	;0x001f(r15)
    90fc:	4f 4f       	mov.b	r15,	r15	
    90fe:	0e 4f       	mov	r15,	r14	
    9100:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    9104:	b0 12 22 8b 	call	#0x8b22	
    9108:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    910c:	5f 4f 20 00 	mov.b	32(r15),r15	;0x0020(r15)
    9110:	4f 4f       	mov.b	r15,	r15	
    9112:	0e 4f       	mov	r15,	r14	
    9114:	3f 42       	mov	#8,	r15	;r2 As==11
    9116:	b0 12 22 8b 	call	#0x8b22	
    911a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    911e:	5f 4f 21 00 	mov.b	33(r15),r15	;0x0021(r15)
    9122:	4f 4f       	mov.b	r15,	r15	
    9124:	0e 4f       	mov	r15,	r14	
    9126:	3f 40 09 00 	mov	#9,	r15	;#0x0009
    912a:	b0 12 22 8b 	call	#0x8b22	
    912e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9132:	5f 4f 22 00 	mov.b	34(r15),r15	;0x0022(r15)
    9136:	4f 4f       	mov.b	r15,	r15	
    9138:	0e 4f       	mov	r15,	r14	
    913a:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    913e:	b0 12 22 8b 	call	#0x8b22	
    9142:	3e 40 fe 00 	mov	#254,	r14	;#0x00fe
    9146:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    914a:	b0 12 22 8b 	call	#0x8b22	
    914e:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    9152:	b0 12 9a 8d 	call	#0x8d9a	
    9156:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9158:	b0 12 3a 8d 	call	#0x8d3a	
    915c:	b0 12 de 89 	call	#0x89de	
    9160:	b0 12 0a 8a 	call	#0x8a0a	
    9164:	7f 40 06 00 	mov.b	#6,	r15	;#0x0006
    9168:	b0 12 6a 8d 	call	#0x8d6a	
    916c:	b0 12 f4 89 	call	#0x89f4	
    9170:	b0 12 20 8a 	call	#0x8a20	
    9174:	21 53       	incd	r1		
    9176:	34 41       	pop	r4		
    9178:	30 41       	ret			

0000917a <cc2500_set_channel>:
    917a:	04 12       	push	r4		
    917c:	04 41       	mov	r1,	r4	
    917e:	24 53       	incd	r4		
    9180:	21 83       	decd	r1		
    9182:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9186:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    918a:	0e 4f       	mov	r15,	r14	
    918c:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    9190:	b0 12 22 8b 	call	#0x8b22	
    9194:	21 53       	incd	r1		
    9196:	34 41       	pop	r4		
    9198:	30 41       	ret			

0000919a <cc2500_calibrate>:
    919a:	04 12       	push	r4		
    919c:	04 41       	mov	r1,	r4	
    919e:	24 53       	incd	r4		
    91a0:	b0 12 3a 94 	call	#0x943a	
    91a4:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    91a8:	b0 12 00 8b 	call	#0x8b00	
    91ac:	4f 43       	clr.b	r15		
    91ae:	b0 12 f6 8c 	call	#0x8cf6	
    91b2:	34 41       	pop	r4		
    91b4:	30 41       	ret			

000091b6 <cc2500_utx>:
    91b6:	04 12       	push	r4		
    91b8:	04 41       	mov	r1,	r4	
    91ba:	24 53       	incd	r4		
    91bc:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    91c0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    91c4:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    91c8:	b0 12 3a 94 	call	#0x943a	
    91cc:	b0 12 20 8a 	call	#0x8a20	
    91d0:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    91d4:	0e 4f       	mov	r15,	r14	
    91d6:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    91da:	b0 12 bc 8b 	call	#0x8bbc	
    91de:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    91e2:	0d 4f       	mov	r15,	r13	
    91e4:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    91e8:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    91ec:	b0 12 20 8c 	call	#0x8c20	
    91f0:	3f 40 35 00 	mov	#53,	r15	;#0x0035
    91f4:	b0 12 00 8b 	call	#0x8b00	
    91f8:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    91fc:	b0 12 86 8b 	call	#0x8b86	
    9200:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    9204:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9208:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    920c:	1f 93       	cmp	#1,	r15	;r3 As==01
    920e:	f4 37       	jge	$-22     	;abs 0x91f8
    9210:	b0 12 4c 8a 	call	#0x8a4c	
    9214:	b0 12 62 8a 	call	#0x8a62	
    9218:	31 50 06 00 	add	#6,	r1	;#0x0006
    921c:	34 41       	pop	r4		
    921e:	30 41       	ret			

00009220 <cc2500_rx_register_buffer>:
    9220:	04 12       	push	r4		
    9222:	04 41       	mov	r1,	r4	
    9224:	24 53       	incd	r4		
    9226:	21 82       	sub	#4,	r1	;r2 As==10
    9228:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    922c:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    9230:	92 44 fa ff 	mov	-6(r4),	&0x0286	;0xfffa(r4)
    9234:	86 02 
    9236:	c2 43 6c 02 	mov.b	#0,	&0x026c	;r3 As==00
    923a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    923e:	0e 4f       	mov	r15,	r14	
    9240:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9244:	b0 12 22 8b 	call	#0x8b22	
    9248:	21 52       	add	#4,	r1	;r2 As==10
    924a:	34 41       	pop	r4		
    924c:	30 41       	ret			

0000924e <cc2500_rx_enter>:
    924e:	04 12       	push	r4		
    9250:	04 41       	mov	r1,	r4	
    9252:	24 53       	incd	r4		
    9254:	b0 12 3a 94 	call	#0x943a	
    9258:	c2 43 6c 02 	mov.b	#0,	&0x026c	;r3 As==00
    925c:	b0 12 4c 8a 	call	#0x8a4c	
    9260:	b0 12 62 8a 	call	#0x8a62	
    9264:	b0 12 36 8a 	call	#0x8a36	
    9268:	b0 12 20 8a 	call	#0x8a20	
    926c:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    9270:	b0 12 00 8b 	call	#0x8b00	
    9274:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9276:	b0 12 f6 8c 	call	#0x8cf6	
    927a:	34 41       	pop	r4		
    927c:	30 41       	ret			

0000927e <cc2500_rx_pkt_eop>:
    927e:	0b 12       	push	r11		
    9280:	04 12       	push	r4		
    9282:	04 41       	mov	r1,	r4	
    9284:	24 52       	add	#4,	r4	;r2 As==10
    9286:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    928a:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    928e:	b0 12 86 8b 	call	#0x8b86	
    9292:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    9296:	d4 44 f2 ff 	mov.b	-14(r4),-10(r4)	;0xfff2(r4), 0xfff6(r4)
    929a:	f6 ff 
    929c:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
    92a0:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    92a4:	b0 12 86 8b 	call	#0x8b86	
    92a8:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    92ac:	e4 93 f2 ff 	cmp.b	#2,	-14(r4)	;r3 As==10, 0xfff2(r4)
    92b0:	05 2c       	jc	$+12     	;abs 0x92bc
    92b2:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    92b6:	1f 94 f6 ff 	cmp	-10(r4),r15	;0xfff6(r4)
    92ba:	ed 23       	jnz	$-36     	;abs 0x9296
    92bc:	c4 93 f2 ff 	tst.b	-14(r4)	;0xfff2(r4)
    92c0:	68 24       	jz	$+210    	;abs 0x9392
    92c2:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    92c6:	4f 93       	tst.b	r15		
    92c8:	59 38       	jl	$+180    	;abs 0x937c
    92ca:	b0 12 d8 8c 	call	#0x8cd8	
    92ce:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    92d2:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    92d6:	0e 4f       	mov	r15,	r14	
    92d8:	3e 53       	add	#-1,	r14	;r3 As==11
    92da:	1f 42 86 02 	mov	&0x0286,r15	
    92de:	0d 4e       	mov	r14,	r13	
    92e0:	0e 4f       	mov	r15,	r14	
    92e2:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    92e6:	b0 12 76 8c 	call	#0x8c76	
    92ea:	1e 42 86 02 	mov	&0x0286,r14	
    92ee:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    92f2:	0f 5e       	add	r14,	r15	
    92f4:	6f 4f       	mov.b	@r15,	r15	
    92f6:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    92fa:	c4 43 fb ff 	mov.b	#0,	-5(r4)	;r3 As==00, 0xfffb(r4)
    92fe:	b4 90 80 00 	cmp	#128,	-6(r4)	;#0x0080, 0xfffa(r4)
    9302:	fa ff 
    9304:	0e 38       	jl	$+30     	;abs 0x9322
    9306:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    930a:	3f 50 00 ff 	add	#-256,	r15	;#0xff00
    930e:	0f 93       	tst	r15		
    9310:	01 34       	jge	$+4      	;abs 0x9314
    9312:	1f 53       	inc	r15		
    9314:	0f 11       	rra	r15		
    9316:	0e 4f       	mov	r15,	r14	
    9318:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    931c:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    9320:	0b 3c       	jmp	$+24     	;abs 0x9338
    9322:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9326:	0f 93       	tst	r15		
    9328:	01 34       	jge	$+4      	;abs 0x932c
    932a:	1f 53       	inc	r15		
    932c:	0f 11       	rra	r15		
    932e:	0e 4f       	mov	r15,	r14	
    9330:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    9334:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    9338:	1e 42 86 02 	mov	&0x0286,r14	
    933c:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9340:	1f 53       	inc	r15		
    9342:	0f 5e       	add	r14,	r15	
    9344:	6f 4f       	mov.b	@r15,	r15	
    9346:	4f 93       	tst.b	r15		
    9348:	0e 34       	jge	$+30     	;abs 0x9366
    934a:	1c 42 82 02 	mov	&0x0282,r12	
    934e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    9352:	4e 4f       	mov.b	r15,	r14	
    9354:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9358:	1b 42 86 02 	mov	&0x0286,r11	
    935c:	4d 4e       	mov.b	r14,	r13	
    935e:	0e 4f       	mov	r15,	r14	
    9360:	0f 4b       	mov	r11,	r15	
    9362:	8c 12       	call	r12		
    9364:	1f 3c       	jmp	$+64     	;abs 0x93a4
    9366:	b0 12 58 8e 	call	#0x8e58	
    936a:	1c 42 82 02 	mov	&0x0282,r12	
    936e:	1f 42 86 02 	mov	&0x0286,r15	
    9372:	4d 43       	clr.b	r13		
    9374:	3e 40 fd ff 	mov	#-3,	r14	;#0xfffd
    9378:	8c 12       	call	r12		
    937a:	14 3c       	jmp	$+42     	;abs 0x93a4
    937c:	b0 12 58 8e 	call	#0x8e58	
    9380:	1c 42 82 02 	mov	&0x0282,r12	
    9384:	1f 42 86 02 	mov	&0x0286,r15	
    9388:	4d 43       	clr.b	r13		
    938a:	3e 40 fe ff 	mov	#-2,	r14	;#0xfffe
    938e:	8c 12       	call	r12		
    9390:	09 3c       	jmp	$+20     	;abs 0x93a4
    9392:	b0 12 58 8e 	call	#0x8e58	
    9396:	1c 42 82 02 	mov	&0x0282,r12	
    939a:	1f 42 86 02 	mov	&0x0286,r15	
    939e:	4d 43       	clr.b	r13		
    93a0:	3e 43       	mov	#-1,	r14	;r3 As==11
    93a2:	8c 12       	call	r12		
    93a4:	b0 12 4c 8a 	call	#0x8a4c	
    93a8:	b0 12 62 8a 	call	#0x8a62	
    93ac:	31 50 0a 00 	add	#10,	r1	;#0x000a
    93b0:	34 41       	pop	r4		
    93b2:	3b 41       	pop	r11		
    93b4:	30 41       	ret			

000093b6 <cc2500_rx_register_cb>:
    93b6:	04 12       	push	r4		
    93b8:	04 41       	mov	r1,	r4	
    93ba:	24 53       	incd	r4		
    93bc:	21 83       	decd	r1		
    93be:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    93c2:	92 44 fc ff 	mov	-4(r4),	&0x0282	;0xfffc(r4)
    93c6:	82 02 
    93c8:	21 53       	incd	r1		
    93ca:	34 41       	pop	r4		
    93cc:	30 41       	ret			

000093ce <cc2500_packet_status>:
    93ce:	04 12       	push	r4		
    93d0:	04 41       	mov	r1,	r4	
    93d2:	24 53       	incd	r4		
    93d4:	21 83       	decd	r1		
    93d6:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    93da:	b0 12 86 8b 	call	#0x8b86	
    93de:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    93e2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    93e6:	21 53       	incd	r1		
    93e8:	34 41       	pop	r4		
    93ea:	30 41       	ret			

000093ec <cc2500_cca>:
    93ec:	04 12       	push	r4		
    93ee:	04 41       	mov	r1,	r4	
    93f0:	24 53       	incd	r4		
    93f2:	21 83       	decd	r1		
    93f4:	b0 12 ce 93 	call	#0x93ce	
    93f8:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    93fc:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9400:	4f 4f       	mov.b	r15,	r15	
    9402:	12 c3       	clrc			
    9404:	4f 10       	rrc.b	r15		
    9406:	12 c3       	clrc			
    9408:	4f 10       	rrc.b	r15		
    940a:	12 c3       	clrc			
    940c:	4f 10       	rrc.b	r15		
    940e:	12 c3       	clrc			
    9410:	4f 10       	rrc.b	r15		
    9412:	4f 4f       	mov.b	r15,	r15	
    9414:	1f f3       	and	#1,	r15	;r3 As==01
    9416:	21 53       	incd	r1		
    9418:	34 41       	pop	r4		
    941a:	30 41       	ret			

0000941c <cc2500_get_rssi>:
    941c:	04 12       	push	r4		
    941e:	04 41       	mov	r1,	r4	
    9420:	24 53       	incd	r4		
    9422:	21 83       	decd	r1		
    9424:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    9428:	b0 12 86 8b 	call	#0x8b86	
    942c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9430:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9434:	21 53       	incd	r1		
    9436:	34 41       	pop	r4		
    9438:	30 41       	ret			

0000943a <cc2500_idle>:
    943a:	04 12       	push	r4		
    943c:	04 41       	mov	r1,	r4	
    943e:	24 53       	incd	r4		
    9440:	b0 12 0a 8a 	call	#0x8a0a	
    9444:	b0 12 20 8a 	call	#0x8a20	
    9448:	b0 12 58 8e 	call	#0x8e58	
    944c:	3f 40 36 00 	mov	#54,	r15	;#0x0036
    9450:	b0 12 00 8b 	call	#0x8b00	
    9454:	4f 43       	clr.b	r15		
    9456:	b0 12 f6 8c 	call	#0x8cf6	
    945a:	34 41       	pop	r4		
    945c:	30 41       	ret			

0000945e <cc2500_sleep>:
    945e:	04 12       	push	r4		
    9460:	04 41       	mov	r1,	r4	
    9462:	24 53       	incd	r4		
    9464:	3f 40 39 00 	mov	#57,	r15	;#0x0039
    9468:	b0 12 00 8b 	call	#0x8b00	
    946c:	34 41       	pop	r4		
    946e:	30 41       	ret			

00009470 <cc2500_reset>:
    9470:	04 12       	push	r4		
    9472:	04 41       	mov	r1,	r4	
    9474:	24 53       	incd	r4		
    9476:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    947a:	b0 12 00 8b 	call	#0x8b00	
    947e:	4f 43       	clr.b	r15		
    9480:	b0 12 f6 8c 	call	#0x8cf6	
    9484:	34 41       	pop	r4		
    9486:	30 41       	ret			

00009488 <cc2500_wakeup>:
    9488:	04 12       	push	r4		
    948a:	04 41       	mov	r1,	r4	
    948c:	24 53       	incd	r4		
    948e:	b0 12 ac 9b 	call	#0x9bac	
    9492:	03 43       	nop			
    9494:	b0 12 02 9b 	call	#0x9b02	
    9498:	0f 93       	tst	r15		
    949a:	fc 23       	jnz	$-6      	;abs 0x9494
    949c:	b0 12 c2 9b 	call	#0x9bc2	
    94a0:	b0 12 3a 94 	call	#0x943a	
    94a4:	4f 43       	clr.b	r15		
    94a6:	b0 12 f6 8c 	call	#0x8cf6	
    94aa:	34 41       	pop	r4		
    94ac:	30 41       	ret			

000094ae <cc2500_variables_bootstrap>:
    94ae:	04 12       	push	r4		
    94b0:	04 41       	mov	r1,	r4	
    94b2:	24 53       	incd	r4		
    94b4:	c2 43 88 02 	mov.b	#0,	&0x0288	;r3 As==00
    94b8:	82 43 86 02 	mov	#0,	&0x0286	;r3 As==00
    94bc:	c2 43 6c 02 	mov.b	#0,	&0x026c	;r3 As==00
    94c0:	c2 43 6e 02 	mov.b	#0,	&0x026e	;r3 As==00
    94c4:	34 41       	pop	r4		
    94c6:	30 41       	ret			

000094c8 <CC_ASSERT>:
    94c8:	04 12       	push	r4		
    94ca:	04 41       	mov	r1,	r4	
    94cc:	24 53       	incd	r4		
    94ce:	21 83       	decd	r1		
    94d0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    94d4:	21 53       	incd	r1		
    94d6:	34 41       	pop	r4		
    94d8:	30 41       	ret			

000094da <cc2500_init>:
    94da:	04 12       	push	r4		
    94dc:	04 41       	mov	r1,	r4	
    94de:	24 53       	incd	r4		
    94e0:	21 83       	decd	r1		
    94e2:	b0 12 ae 94 	call	#0x94ae	
    94e6:	b0 12 8e 8a 	call	#0x8a8e	
    94ea:	b0 12 78 8a 	call	#0x8a78	
    94ee:	b0 12 ac 9b 	call	#0x9bac	
    94f2:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    94f6:	b0 12 4a 98 	call	#0x984a	
    94fa:	b0 12 c2 9b 	call	#0x9bc2	
    94fe:	3f 40 28 00 	mov	#40,	r15	;#0x0028
    9502:	b0 12 4a 98 	call	#0x984a	
    9506:	b0 12 ac 9b 	call	#0x9bac	
    950a:	03 43       	nop			
    950c:	b0 12 02 9b 	call	#0x9b02	
    9510:	0f 93       	tst	r15		
    9512:	fc 23       	jnz	$-6      	;abs 0x950c
    9514:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9518:	b0 12 c8 9a 	call	#0x9ac8	
    951c:	03 43       	nop			
    951e:	b0 12 02 9b 	call	#0x9b02	
    9522:	0f 93       	tst	r15		
    9524:	fc 23       	jnz	$-6      	;abs 0x951e
    9526:	b0 12 c2 9b 	call	#0x9bc2	
    952a:	3e 40 a5 00 	mov	#165,	r14	;#0x00a5
    952e:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9532:	b0 12 22 8b 	call	#0x8b22	
    9536:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    953a:	b0 12 50 8b 	call	#0x8b50	
    953e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9542:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    9546:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    954a:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    954e:	1f 43       	mov	#1,	r15	;r3 As==01
    9550:	3e 90 a5 00 	cmp	#165,	r14	;#0x00a5
    9554:	01 24       	jz	$+4      	;abs 0x9558
    9556:	0f 43       	clr	r15		
    9558:	b0 12 c8 94 	call	#0x94c8	
    955c:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9560:	b0 12 86 8b 	call	#0x8b86	
    9564:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9568:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    956c:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9570:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    9574:	1f 43       	mov	#1,	r15	;r3 As==01
    9576:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    957a:	01 24       	jz	$+4      	;abs 0x957e
    957c:	0f 43       	clr	r15		
    957e:	b0 12 c8 94 	call	#0x94c8	
    9582:	3f 40 31 00 	mov	#49,	r15	;#0x0031
    9586:	b0 12 86 8b 	call	#0x8b86	
    958a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    958e:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    9592:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9596:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    959a:	1f 43       	mov	#1,	r15	;r3 As==01
    959c:	3e 90 03 00 	cmp	#3,	r14	;#0x0003
    95a0:	01 2c       	jc	$+4      	;abs 0x95a4
    95a2:	0f 43       	clr	r15		
    95a4:	b0 12 c8 94 	call	#0x94c8	
    95a8:	3f 40 8a ad 	mov	#-21110,r15	;#0xad8a
    95ac:	b0 12 82 8e 	call	#0x8e82	
    95b0:	21 53       	incd	r1		
    95b2:	34 41       	pop	r4		
    95b4:	30 41       	ret			

000095b6 <cc2500_gdox_signal_handler>:
    95b6:	04 12       	push	r4		
    95b8:	04 41       	mov	r1,	r4	
    95ba:	24 53       	incd	r4		
    95bc:	21 83       	decd	r1		
    95be:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    95c2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    95c6:	1f f3       	and	#1,	r15	;r3 As==01
    95c8:	4f 4f       	mov.b	r15,	r15	
    95ca:	4f 93       	tst.b	r15		
    95cc:	02 24       	jz	$+6      	;abs 0x95d2
    95ce:	b0 12 7e 92 	call	#0x927e	
    95d2:	21 53       	incd	r1		
    95d4:	34 41       	pop	r4		
    95d6:	30 41       	ret			

000095d8 <port2_irq_handler>:
    95d8:	0f 12       	push	r15		
    95da:	0e 12       	push	r14		
    95dc:	0d 12       	push	r13		
    95de:	0c 12       	push	r12		
    95e0:	04 12       	push	r4		
    95e2:	04 41       	mov	r1,	r4	
    95e4:	34 50 0a 00 	add	#10,	r4	;#0x000a
    95e8:	21 83       	decd	r1		
    95ea:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    95ee:	c4 43 f5 ff 	mov.b	#0,	-11(r4)	;r3 As==00, 0xfff5(r4)
    95f2:	5f 42 2b 00 	mov.b	&0x002b,r15	
    95f6:	4f 4f       	mov.b	r15,	r15	
    95f8:	5e 42 2d 00 	mov.b	&0x002d,r14	
    95fc:	4e 4e       	mov.b	r14,	r14	
    95fe:	3e f0 40 00 	and	#64,	r14	;#0x0040
    9602:	0f fe       	and	r14,	r15	
    9604:	0f 93       	tst	r15		
    9606:	0a 24       	jz	$+22     	;abs 0x961c
    9608:	d4 d3 f4 ff 	bis.b	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    960c:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    9610:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9614:	7f f0 40 00 	and.b	#64,	r15	;#0x0040
    9618:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    961c:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9620:	4f 4f       	mov.b	r15,	r15	
    9622:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9626:	4e 4e       	mov.b	r14,	r14	
    9628:	3e f0 80 00 	and	#128,	r14	;#0x0080
    962c:	0f fe       	and	r14,	r15	
    962e:	0f 93       	tst	r15		
    9630:	0a 24       	jz	$+22     	;abs 0x9646
    9632:	e4 d3 f4 ff 	bis.b	#2,	-12(r4)	;r3 As==10, 0xfff4(r4)
    9636:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    963a:	5f 42 2b 00 	mov.b	&0x002b,r15	
    963e:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    9642:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    9646:	c4 93 f4 ff 	tst.b	-12(r4)	;0xfff4(r4)
    964a:	04 24       	jz	$+10     	;abs 0x9654
    964c:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    9650:	b0 12 b6 95 	call	#0x95b6	
    9654:	c4 93 f5 ff 	tst.b	-11(r4)	;0xfff5(r4)
    9658:	03 24       	jz	$+8      	;abs 0x9660
    965a:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    965e:	00 00 
    9660:	c2 43 2b 00 	mov.b	#0,	&0x002b	;r3 As==00
    9664:	21 53       	incd	r1		
    9666:	34 41       	pop	r4		
    9668:	3c 41       	pop	r12		
    966a:	3d 41       	pop	r13		
    966c:	3e 41       	pop	r14		
    966e:	3f 41       	pop	r15		
    9670:	00 13       	reti			

00009672 <get_mclk_freq_mhz>:
    9672:	04 12       	push	r4		
    9674:	04 41       	mov	r1,	r4	
    9676:	24 53       	incd	r4		
    9678:	1f 42 70 02 	mov	&0x0270,r15	
    967c:	34 41       	pop	r4		
    967e:	30 41       	ret			

00009680 <set_mcu_speed>:
    9680:	04 12       	push	r4		
    9682:	04 41       	mov	r1,	r4	
    9684:	24 53       	incd	r4		
    9686:	21 83       	decd	r1		
    9688:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    968c:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    9690:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9694:	3f 92       	cmp	#8,	r15	;r2 As==11
    9696:	16 24       	jz	$+46     	;abs 0x96c4
    9698:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    969c:	03 34       	jge	$+8      	;abs 0x96a4
    969e:	1f 93       	cmp	#1,	r15	;r3 As==01
    96a0:	08 24       	jz	$+18     	;abs 0x96b2
    96a2:	2b 3c       	jmp	$+88     	;abs 0x96fa
    96a4:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    96a8:	16 24       	jz	$+46     	;abs 0x96d6
    96aa:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    96ae:	1c 24       	jz	$+58     	;abs 0x96e8
    96b0:	24 3c       	jmp	$+74     	;abs 0x96fa
    96b2:	5f 42 ff 10 	mov.b	&0x10ff,r15	
    96b6:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    96ba:	5f 42 fe 10 	mov.b	&0x10fe,r15	
    96be:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    96c2:	1b 3c       	jmp	$+56     	;abs 0x96fa
    96c4:	5f 42 fd 10 	mov.b	&0x10fd,r15	
    96c8:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    96cc:	5f 42 fc 10 	mov.b	&0x10fc,r15	
    96d0:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    96d4:	12 3c       	jmp	$+38     	;abs 0x96fa
    96d6:	5f 42 fb 10 	mov.b	&0x10fb,r15	
    96da:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    96de:	5f 42 fa 10 	mov.b	&0x10fa,r15	
    96e2:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    96e6:	09 3c       	jmp	$+20     	;abs 0x96fa
    96e8:	5f 42 f9 10 	mov.b	&0x10f9,r15	
    96ec:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    96f0:	5f 42 f8 10 	mov.b	&0x10f8,r15	
    96f4:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    96f8:	03 43       	nop			
    96fa:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    96fe:	2f 93       	cmp	#2,	r15	;r3 As==10
    9700:	0e 24       	jz	$+30     	;abs 0x971e
    9702:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    9706:	03 34       	jge	$+8      	;abs 0x970e
    9708:	1f 93       	cmp	#1,	r15	;r3 As==01
    970a:	06 24       	jz	$+14     	;abs 0x9718
    970c:	12 3c       	jmp	$+38     	;abs 0x9732
    970e:	2f 92       	cmp	#4,	r15	;r2 As==10
    9710:	09 24       	jz	$+20     	;abs 0x9724
    9712:	3f 92       	cmp	#8,	r15	;r2 As==11
    9714:	0a 24       	jz	$+22     	;abs 0x972a
    9716:	0d 3c       	jmp	$+28     	;abs 0x9732
    9718:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
    971c:	0a 3c       	jmp	$+22     	;abs 0x9732
    971e:	e2 43 58 00 	mov.b	#2,	&0x0058	;r3 As==10
    9722:	07 3c       	jmp	$+16     	;abs 0x9732
    9724:	e2 42 58 00 	mov.b	#4,	&0x0058	;r2 As==10
    9728:	04 3c       	jmp	$+10     	;abs 0x9732
    972a:	f2 40 06 00 	mov.b	#6,	&0x0058	;#0x0006
    972e:	58 00 
    9730:	03 43       	nop			
    9732:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9736:	82 4f 70 02 	mov	r15,	&0x0270	
    973a:	21 53       	incd	r1		
    973c:	34 41       	pop	r4		
    973e:	30 41       	ret			

00009740 <set_mcu_speed_dco_mclk_1MHz_smclk_1MHz>:
    9740:	04 12       	push	r4		
    9742:	04 41       	mov	r1,	r4	
    9744:	24 53       	incd	r4		
    9746:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9748:	5f 43       	mov.b	#1,	r15	;r3 As==01
    974a:	b0 12 80 96 	call	#0x9680	
    974e:	34 41       	pop	r4		
    9750:	30 41       	ret			

00009752 <set_mcu_speed_dco_mclk_8MHz_smclk_8MHz>:
    9752:	04 12       	push	r4		
    9754:	04 41       	mov	r1,	r4	
    9756:	24 53       	incd	r4		
    9758:	5e 43       	mov.b	#1,	r14	;r3 As==01
    975a:	7f 42       	mov.b	#8,	r15	;r2 As==11
    975c:	b0 12 80 96 	call	#0x9680	
    9760:	34 41       	pop	r4		
    9762:	30 41       	ret			

00009764 <set_mcu_speed_dco_mclk_8MHz_smclk_4MHz>:
    9764:	04 12       	push	r4		
    9766:	04 41       	mov	r1,	r4	
    9768:	24 53       	incd	r4		
    976a:	6e 43       	mov.b	#2,	r14	;r3 As==10
    976c:	7f 42       	mov.b	#8,	r15	;r2 As==11
    976e:	b0 12 80 96 	call	#0x9680	
    9772:	34 41       	pop	r4		
    9774:	30 41       	ret			

00009776 <set_mcu_speed_dco_mclk_8MHz_smclk_2MHz>:
    9776:	04 12       	push	r4		
    9778:	04 41       	mov	r1,	r4	
    977a:	24 53       	incd	r4		
    977c:	6e 42       	mov.b	#4,	r14	;r2 As==10
    977e:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9780:	b0 12 80 96 	call	#0x9680	
    9784:	34 41       	pop	r4		
    9786:	30 41       	ret			

00009788 <set_mcu_speed_dco_mclk_8MHz_smclk_1MHz>:
    9788:	04 12       	push	r4		
    978a:	04 41       	mov	r1,	r4	
    978c:	24 53       	incd	r4		
    978e:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9790:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9792:	b0 12 80 96 	call	#0x9680	
    9796:	34 41       	pop	r4		
    9798:	30 41       	ret			

0000979a <set_mcu_speed_dco_mclk_12MHz_smclk_12MHz>:
    979a:	04 12       	push	r4		
    979c:	04 41       	mov	r1,	r4	
    979e:	24 53       	incd	r4		
    97a0:	5e 43       	mov.b	#1,	r14	;r3 As==01
    97a2:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    97a6:	b0 12 80 96 	call	#0x9680	
    97aa:	34 41       	pop	r4		
    97ac:	30 41       	ret			

000097ae <set_mcu_speed_dco_mclk_12MHz_smclk_6MHz>:
    97ae:	04 12       	push	r4		
    97b0:	04 41       	mov	r1,	r4	
    97b2:	24 53       	incd	r4		
    97b4:	6e 43       	mov.b	#2,	r14	;r3 As==10
    97b6:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    97ba:	b0 12 80 96 	call	#0x9680	
    97be:	34 41       	pop	r4		
    97c0:	30 41       	ret			

000097c2 <set_mcu_speed_dco_mclk_12MHz_smclk_3MHz>:
    97c2:	04 12       	push	r4		
    97c4:	04 41       	mov	r1,	r4	
    97c6:	24 53       	incd	r4		
    97c8:	6e 42       	mov.b	#4,	r14	;r2 As==10
    97ca:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    97ce:	b0 12 80 96 	call	#0x9680	
    97d2:	34 41       	pop	r4		
    97d4:	30 41       	ret			

000097d6 <set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz>:
    97d6:	04 12       	push	r4		
    97d8:	04 41       	mov	r1,	r4	
    97da:	24 53       	incd	r4		
    97dc:	7e 42       	mov.b	#8,	r14	;r2 As==11
    97de:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    97e2:	b0 12 80 96 	call	#0x9680	
    97e6:	34 41       	pop	r4		
    97e8:	30 41       	ret			

000097ea <set_mcu_speed_dco_mclk_16MHz_smclk_16MHz>:
    97ea:	04 12       	push	r4		
    97ec:	04 41       	mov	r1,	r4	
    97ee:	24 53       	incd	r4		
    97f0:	5e 43       	mov.b	#1,	r14	;r3 As==01
    97f2:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    97f6:	b0 12 80 96 	call	#0x9680	
    97fa:	34 41       	pop	r4		
    97fc:	30 41       	ret			

000097fe <set_mcu_speed_dco_mclk_16MHz_smclk_8MHz>:
    97fe:	04 12       	push	r4		
    9800:	04 41       	mov	r1,	r4	
    9802:	24 53       	incd	r4		
    9804:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9806:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    980a:	b0 12 80 96 	call	#0x9680	
    980e:	34 41       	pop	r4		
    9810:	30 41       	ret			

00009812 <set_mcu_speed_dco_mclk_16MHz_smclk_4MHz>:
    9812:	04 12       	push	r4		
    9814:	04 41       	mov	r1,	r4	
    9816:	24 53       	incd	r4		
    9818:	6e 42       	mov.b	#4,	r14	;r2 As==10
    981a:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    981e:	b0 12 80 96 	call	#0x9680	
    9822:	34 41       	pop	r4		
    9824:	30 41       	ret			

00009826 <set_mcu_speed_dco_mclk_16MHz_smclk_2MHz>:
    9826:	04 12       	push	r4		
    9828:	04 41       	mov	r1,	r4	
    982a:	24 53       	incd	r4		
    982c:	7e 42       	mov.b	#8,	r14	;r2 As==11
    982e:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9832:	b0 12 80 96 	call	#0x9680	
    9836:	34 41       	pop	r4		
    9838:	30 41       	ret			

0000983a <loop_4_cycles>:
    983a:	04 12       	push	r4		
    983c:	04 41       	mov	r1,	r4	
    983e:	24 53       	incd	r4		
    9840:	3e 53       	add	#-1,	r14	;r3 As==11
    9842:	3f 63       	addc	#-1,	r15	;r3 As==11
    9844:	fd 2f       	jc	$-4      	;abs 0x9840
    9846:	34 41       	pop	r4		
    9848:	30 41       	ret			

0000984a <delay_usec>:
    984a:	04 12       	push	r4		
    984c:	04 41       	mov	r1,	r4	
    984e:	24 53       	incd	r4		
    9850:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9854:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9858:	1f 42 70 02 	mov	&0x0270,r15	
    985c:	3f 92       	cmp	#8,	r15	;r2 As==11
    985e:	18 24       	jz	$+50     	;abs 0x9890
    9860:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9864:	03 2c       	jc	$+8      	;abs 0x986c
    9866:	1f 93       	cmp	#1,	r15	;r3 As==01
    9868:	08 24       	jz	$+18     	;abs 0x987a
    986a:	2d 3c       	jmp	$+92     	;abs 0x98c6
    986c:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9870:	17 24       	jz	$+48     	;abs 0x98a0
    9872:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9876:	1e 24       	jz	$+62     	;abs 0x98b4
    9878:	26 3c       	jmp	$+78     	;abs 0x98c6
    987a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    987e:	12 c3       	clrc			
    9880:	0f 10       	rrc	r15		
    9882:	12 c3       	clrc			
    9884:	0f 10       	rrc	r15		
    9886:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    988a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    988e:	26 3c       	jmp	$+78     	;abs 0x98dc
    9890:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9894:	0f 5f       	rla	r15		
    9896:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    989a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    989e:	1e 3c       	jmp	$+62     	;abs 0x98dc
    98a0:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    98a4:	0f 4e       	mov	r14,	r15	
    98a6:	0f 5f       	rla	r15		
    98a8:	0f 5e       	add	r14,	r15	
    98aa:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    98ae:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    98b2:	14 3c       	jmp	$+42     	;abs 0x98dc
    98b4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    98b8:	0f 5f       	rla	r15		
    98ba:	0f 5f       	rla	r15		
    98bc:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    98c0:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    98c4:	0b 3c       	jmp	$+24     	;abs 0x98dc
    98c6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    98ca:	12 c3       	clrc			
    98cc:	0f 10       	rrc	r15		
    98ce:	12 c3       	clrc			
    98d0:	0f 10       	rrc	r15		
    98d2:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    98d6:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    98da:	03 43       	nop			
    98dc:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    98e0:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    98e4:	b0 12 3a 98 	call	#0x983a	
    98e8:	31 50 06 00 	add	#6,	r1	;#0x0006
    98ec:	34 41       	pop	r4		
    98ee:	30 41       	ret			

000098f0 <delay_ms>:
    98f0:	04 12       	push	r4		
    98f2:	04 41       	mov	r1,	r4	
    98f4:	24 53       	incd	r4		
    98f6:	31 82       	sub	#8,	r1	;r2 As==11
    98f8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    98fc:	1f 42 70 02 	mov	&0x0270,r15	
    9900:	3f 92       	cmp	#8,	r15	;r2 As==11
    9902:	13 24       	jz	$+40     	;abs 0x992a
    9904:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9908:	03 2c       	jc	$+8      	;abs 0x9910
    990a:	1f 93       	cmp	#1,	r15	;r3 As==01
    990c:	08 24       	jz	$+18     	;abs 0x991e
    990e:	1f 3c       	jmp	$+64     	;abs 0x994e
    9910:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9914:	10 24       	jz	$+34     	;abs 0x9936
    9916:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    991a:	13 24       	jz	$+40     	;abs 0x9942
    991c:	18 3c       	jmp	$+50     	;abs 0x994e
    991e:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9922:	f8 ff 
    9924:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9928:	18 3c       	jmp	$+50     	;abs 0x995a
    992a:	b4 40 d0 07 	mov	#2000,	-8(r4)	;#0x07d0, 0xfff8(r4)
    992e:	f8 ff 
    9930:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9934:	12 3c       	jmp	$+38     	;abs 0x995a
    9936:	b4 40 b8 0b 	mov	#3000,	-8(r4)	;#0x0bb8, 0xfff8(r4)
    993a:	f8 ff 
    993c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9940:	0c 3c       	jmp	$+26     	;abs 0x995a
    9942:	b4 40 a0 0f 	mov	#4000,	-8(r4)	;#0x0fa0, 0xfff8(r4)
    9946:	f8 ff 
    9948:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    994c:	06 3c       	jmp	$+14     	;abs 0x995a
    994e:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9952:	f8 ff 
    9954:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9958:	03 43       	nop			
    995a:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    995e:	08 3c       	jmp	$+18     	;abs 0x9970
    9960:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9964:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9968:	b0 12 3a 98 	call	#0x983a	
    996c:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    9970:	94 94 fc ff 	cmp	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    9974:	f6 ff 
    9976:	f4 2b       	jnc	$-22     	;abs 0x9960
    9978:	31 52       	add	#8,	r1	;r2 As==11
    997a:	34 41       	pop	r4		
    997c:	30 41       	ret			

0000997e <led_green_off>:
    997e:	04 12       	push	r4		
    9980:	04 41       	mov	r1,	r4	
    9982:	24 53       	incd	r4		
    9984:	5f 42 21 00 	mov.b	&0x0021,r15	
    9988:	7f f0 fd ff 	and.b	#-3,	r15	;#0xfffd
    998c:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9990:	34 41       	pop	r4		
    9992:	30 41       	ret			

00009994 <led_green_on>:
    9994:	04 12       	push	r4		
    9996:	04 41       	mov	r1,	r4	
    9998:	24 53       	incd	r4		
    999a:	5f 42 21 00 	mov.b	&0x0021,r15	
    999e:	6f d3       	bis.b	#2,	r15	;r3 As==10
    99a0:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    99a4:	34 41       	pop	r4		
    99a6:	30 41       	ret			

000099a8 <led_green_switch>:
    99a8:	04 12       	push	r4		
    99aa:	04 41       	mov	r1,	r4	
    99ac:	24 53       	incd	r4		
    99ae:	5f 42 21 00 	mov.b	&0x0021,r15	
    99b2:	6f e3       	xor.b	#2,	r15	;r3 As==10
    99b4:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    99b8:	34 41       	pop	r4		
    99ba:	30 41       	ret			

000099bc <led_red_off>:
    99bc:	04 12       	push	r4		
    99be:	04 41       	mov	r1,	r4	
    99c0:	24 53       	incd	r4		
    99c2:	5f 42 21 00 	mov.b	&0x0021,r15	
    99c6:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    99ca:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    99ce:	34 41       	pop	r4		
    99d0:	30 41       	ret			

000099d2 <led_red_on>:
    99d2:	04 12       	push	r4		
    99d4:	04 41       	mov	r1,	r4	
    99d6:	24 53       	incd	r4		
    99d8:	5f 42 21 00 	mov.b	&0x0021,r15	
    99dc:	5f d3       	bis.b	#1,	r15	;r3 As==01
    99de:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    99e2:	34 41       	pop	r4		
    99e4:	30 41       	ret			

000099e6 <led_red_switch>:
    99e6:	04 12       	push	r4		
    99e8:	04 41       	mov	r1,	r4	
    99ea:	24 53       	incd	r4		
    99ec:	5f 42 21 00 	mov.b	&0x0021,r15	
    99f0:	5f e3       	xor.b	#1,	r15	;r3 As==01
    99f2:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    99f6:	34 41       	pop	r4		
    99f8:	30 41       	ret			

000099fa <leds_off>:
    99fa:	04 12       	push	r4		
    99fc:	04 41       	mov	r1,	r4	
    99fe:	24 53       	incd	r4		
    9a00:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a04:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9a08:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9a0c:	34 41       	pop	r4		
    9a0e:	30 41       	ret			

00009a10 <leds_on>:
    9a10:	04 12       	push	r4		
    9a12:	04 41       	mov	r1,	r4	
    9a14:	24 53       	incd	r4		
    9a16:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a1a:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9a1e:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9a22:	34 41       	pop	r4		
    9a24:	30 41       	ret			

00009a26 <leds_init>:
    9a26:	04 12       	push	r4		
    9a28:	04 41       	mov	r1,	r4	
    9a2a:	24 53       	incd	r4		
    9a2c:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a30:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9a34:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9a38:	5f 42 22 00 	mov.b	&0x0022,r15	
    9a3c:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9a40:	c2 4f 22 00 	mov.b	r15,	&0x0022	
    9a44:	5f 42 26 00 	mov.b	&0x0026,r15	
    9a48:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9a4c:	c2 4f 26 00 	mov.b	r15,	&0x0026	
    9a50:	b0 12 fa 99 	call	#0x99fa	
    9a54:	34 41       	pop	r4		
    9a56:	30 41       	ret			

00009a58 <spi_init>:
    9a58:	04 12       	push	r4		
    9a5a:	04 41       	mov	r1,	r4	
    9a5c:	24 53       	incd	r4		
    9a5e:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9a62:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9a64:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9a68:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9a6c:	7f d2       	bis.b	#8,	r15	;r2 As==11
    9a6e:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9a72:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9a76:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9a78:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9a7c:	5f 42 19 00 	mov.b	&0x0019,r15	
    9a80:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9a82:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9a86:	d2 43 69 00 	mov.b	#1,	&0x0069	;r3 As==01
    9a8a:	f2 40 81 ff 	mov.b	#-127,	&0x0069	;#0xff81
    9a8e:	69 00 
    9a90:	f2 40 a9 ff 	mov.b	#-87,	&0x0068	;#0xffa9
    9a94:	68 00 
    9a96:	e2 43 6a 00 	mov.b	#2,	&0x006a	;r3 As==10
    9a9a:	c2 43 6b 00 	mov.b	#0,	&0x006b	;r3 As==00
    9a9e:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9aa2:	7f d0 0e 00 	bis.b	#14,	r15	;#0x000e
    9aa6:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    9aaa:	5f 42 69 00 	mov.b	&0x0069,r15	
    9aae:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9ab2:	c2 4f 69 00 	mov.b	r15,	&0x0069	
    9ab6:	34 41       	pop	r4		
    9ab8:	30 41       	ret			

00009aba <spi_clear_rx_IFG>:
    9aba:	04 12       	push	r4		
    9abc:	04 41       	mov	r1,	r4	
    9abe:	24 53       	incd	r4		
    9ac0:	e2 c2 03 00 	bic.b	#4,	&0x0003	;r2 As==10
    9ac4:	34 41       	pop	r4		
    9ac6:	30 41       	ret			

00009ac8 <spi_tx_rx>:
    9ac8:	04 12       	push	r4		
    9aca:	04 41       	mov	r1,	r4	
    9acc:	24 53       	incd	r4		
    9ace:	21 82       	sub	#4,	r1	;r2 As==10
    9ad0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9ad4:	b0 12 ba 9a 	call	#0x9aba	
    9ad8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9adc:	4f 4f       	mov.b	r15,	r15	
    9ade:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9ae2:	5f 42 03 00 	mov.b	&0x0003,r15	
    9ae6:	4f 4f       	mov.b	r15,	r15	
    9ae8:	2f f2       	and	#4,	r15	;r2 As==10
    9aea:	0f 93       	tst	r15		
    9aec:	fa 27       	jz	$-10     	;abs 0x9ae2
    9aee:	5f 42 6e 00 	mov.b	&0x006e,r15	
    9af2:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9af6:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9afa:	8f 11       	sxt	r15		
    9afc:	21 52       	add	#4,	r1	;r2 As==10
    9afe:	34 41       	pop	r4		
    9b00:	30 41       	ret			

00009b02 <spi_check_miso_high>:
    9b02:	04 12       	push	r4		
    9b04:	04 41       	mov	r1,	r4	
    9b06:	24 53       	incd	r4		
    9b08:	5f 42 18 00 	mov.b	&0x0018,r15	
    9b0c:	4f 4f       	mov.b	r15,	r15	
    9b0e:	2f f2       	and	#4,	r15	;r2 As==10
    9b10:	34 41       	pop	r4		
    9b12:	30 41       	ret			

00009b14 <spi_tx_burst>:
    9b14:	04 12       	push	r4		
    9b16:	04 41       	mov	r1,	r4	
    9b18:	24 53       	incd	r4		
    9b1a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9b1e:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9b22:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9b26:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9b2a:	11 3c       	jmp	$+36     	;abs 0x9b4e
    9b2c:	b0 12 ba 9a 	call	#0x9aba	
    9b30:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9b34:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9b38:	6f 4f       	mov.b	@r15,	r15	
    9b3a:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9b3e:	5f 42 03 00 	mov.b	&0x0003,r15	
    9b42:	4f 4f       	mov.b	r15,	r15	
    9b44:	2f f2       	and	#4,	r15	;r2 As==10
    9b46:	0f 93       	tst	r15		
    9b48:	fa 27       	jz	$-10     	;abs 0x9b3e
    9b4a:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9b4e:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9b52:	f8 ff 
    9b54:	eb 3b       	jl	$-40     	;abs 0x9b2c
    9b56:	31 50 06 00 	add	#6,	r1	;#0x0006
    9b5a:	34 41       	pop	r4		
    9b5c:	30 41       	ret			

00009b5e <spi_rx_burst>:
    9b5e:	04 12       	push	r4		
    9b60:	04 41       	mov	r1,	r4	
    9b62:	24 53       	incd	r4		
    9b64:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9b68:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9b6c:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9b70:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9b74:	13 3c       	jmp	$+40     	;abs 0x9b9c
    9b76:	f2 40 55 00 	mov.b	#85,	&0x006f	;#0x0055
    9b7a:	6f 00 
    9b7c:	5f 42 03 00 	mov.b	&0x0003,r15	
    9b80:	4f 4f       	mov.b	r15,	r15	
    9b82:	2f f2       	and	#4,	r15	;r2 As==10
    9b84:	0f 93       	tst	r15		
    9b86:	fa 27       	jz	$-10     	;abs 0x9b7c
    9b88:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9b8c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9b90:	5e 42 6e 00 	mov.b	&0x006e,r14	
    9b94:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    9b98:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9b9c:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9ba0:	f8 ff 
    9ba2:	e9 3b       	jl	$-44     	;abs 0x9b76
    9ba4:	31 50 06 00 	add	#6,	r1	;#0x0006
    9ba8:	34 41       	pop	r4		
    9baa:	30 41       	ret			

00009bac <spi_select_radio>:
    9bac:	04 12       	push	r4		
    9bae:	04 41       	mov	r1,	r4	
    9bb0:	24 53       	incd	r4		
    9bb2:	5f 42 19 00 	mov.b	&0x0019,r15	
    9bb6:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9bba:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9bbe:	34 41       	pop	r4		
    9bc0:	30 41       	ret			

00009bc2 <spi_deselect_radio>:
    9bc2:	04 12       	push	r4		
    9bc4:	04 41       	mov	r1,	r4	
    9bc6:	24 53       	incd	r4		
    9bc8:	5f 42 19 00 	mov.b	&0x0019,r15	
    9bcc:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9bce:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9bd2:	34 41       	pop	r4		
    9bd4:	30 41       	ret			

00009bd6 <Timer_A>:
    9bd6:	0f 12       	push	r15		
    9bd8:	0e 12       	push	r14		
    9bda:	0d 12       	push	r13		
    9bdc:	0c 12       	push	r12		
    9bde:	04 12       	push	r4		
    9be0:	04 41       	mov	r1,	r4	
    9be2:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9be6:	1f 42 72 02 	mov	&0x0272,r15	
    9bea:	0f 93       	tst	r15		
    9bec:	03 24       	jz	$+8      	;abs 0x9bf4
    9bee:	1f 42 72 02 	mov	&0x0272,r15	
    9bf2:	8f 12       	call	r15		
    9bf4:	1f 42 74 02 	mov	&0x0274,r15	
    9bf8:	1f 93       	cmp	#1,	r15	;r3 As==01
    9bfa:	03 20       	jnz	$+8      	;abs 0x9c02
    9bfc:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9c00:	00 00 
    9c02:	34 41       	pop	r4		
    9c04:	3c 41       	pop	r12		
    9c06:	3d 41       	pop	r13		
    9c08:	3e 41       	pop	r14		
    9c0a:	3f 41       	pop	r15		
    9c0c:	00 13       	reti			

00009c0e <timerA_init>:
    9c0e:	04 12       	push	r4		
    9c10:	04 41       	mov	r1,	r4	
    9c12:	24 53       	incd	r4		
    9c14:	82 43 72 02 	mov	#0,	&0x0272	;r3 As==00
    9c18:	82 43 74 02 	mov	#0,	&0x0274	;r3 As==00
    9c1c:	b0 12 ac 9c 	call	#0x9cac	
    9c20:	34 41       	pop	r4		
    9c22:	30 41       	ret			

00009c24 <timerA_register_cb>:
    9c24:	04 12       	push	r4		
    9c26:	04 41       	mov	r1,	r4	
    9c28:	24 53       	incd	r4		
    9c2a:	21 83       	decd	r1		
    9c2c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9c30:	92 44 fc ff 	mov	-4(r4),	&0x0272	;0xfffc(r4)
    9c34:	72 02 
    9c36:	21 53       	incd	r1		
    9c38:	34 41       	pop	r4		
    9c3a:	30 41       	ret			

00009c3c <timerA_set_wakeup>:
    9c3c:	04 12       	push	r4		
    9c3e:	04 41       	mov	r1,	r4	
    9c40:	24 53       	incd	r4		
    9c42:	21 83       	decd	r1		
    9c44:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9c48:	92 44 fc ff 	mov	-4(r4),	&0x0274	;0xfffc(r4)
    9c4c:	74 02 
    9c4e:	21 53       	incd	r1		
    9c50:	34 41       	pop	r4		
    9c52:	30 41       	ret			

00009c54 <timerA_start_ticks>:
    9c54:	04 12       	push	r4		
    9c56:	04 41       	mov	r1,	r4	
    9c58:	24 53       	incd	r4		
    9c5a:	21 83       	decd	r1		
    9c5c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9c60:	5f 42 53 00 	mov.b	&0x0053,r15	
    9c64:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9c68:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    9c6c:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    9c70:	62 01 
    9c72:	82 43 70 01 	mov	#0,	&0x0170	;r3 As==00
    9c76:	92 44 fc ff 	mov	-4(r4),	&0x0172	;0xfffc(r4)
    9c7a:	72 01 
    9c7c:	b2 40 10 01 	mov	#272,	&0x0160	;#0x0110
    9c80:	60 01 
    9c82:	21 53       	incd	r1		
    9c84:	34 41       	pop	r4		
    9c86:	30 41       	ret			

00009c88 <timerA_start_milliseconds>:
    9c88:	04 12       	push	r4		
    9c8a:	04 41       	mov	r1,	r4	
    9c8c:	24 53       	incd	r4		
    9c8e:	21 83       	decd	r1		
    9c90:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9c94:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9c98:	0f 4e       	mov	r14,	r15	
    9c9a:	0f 5f       	rla	r15		
    9c9c:	0f 5e       	add	r14,	r15	
    9c9e:	0f 5f       	rla	r15		
    9ca0:	0f 5f       	rla	r15		
    9ca2:	b0 12 54 9c 	call	#0x9c54	
    9ca6:	21 53       	incd	r1		
    9ca8:	34 41       	pop	r4		
    9caa:	30 41       	ret			

00009cac <timerA_stop>:
    9cac:	04 12       	push	r4		
    9cae:	04 41       	mov	r1,	r4	
    9cb0:	24 53       	incd	r4		
    9cb2:	82 43 60 01 	mov	#0,	&0x0160	;r3 As==00
    9cb6:	34 41       	pop	r4		
    9cb8:	30 41       	ret			

00009cba <Timer_B>:
    9cba:	0f 12       	push	r15		
    9cbc:	0e 12       	push	r14		
    9cbe:	0d 12       	push	r13		
    9cc0:	0c 12       	push	r12		
    9cc2:	04 12       	push	r4		
    9cc4:	04 41       	mov	r1,	r4	
    9cc6:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9cca:	1f 42 76 02 	mov	&0x0276,r15	
    9cce:	0f 93       	tst	r15		
    9cd0:	03 24       	jz	$+8      	;abs 0x9cd8
    9cd2:	1f 42 76 02 	mov	&0x0276,r15	
    9cd6:	8f 12       	call	r15		
    9cd8:	1f 42 78 02 	mov	&0x0278,r15	
    9cdc:	1f 93       	cmp	#1,	r15	;r3 As==01
    9cde:	03 20       	jnz	$+8      	;abs 0x9ce6
    9ce0:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9ce4:	00 00 
    9ce6:	34 41       	pop	r4		
    9ce8:	3c 41       	pop	r12		
    9cea:	3d 41       	pop	r13		
    9cec:	3e 41       	pop	r14		
    9cee:	3f 41       	pop	r15		
    9cf0:	00 13       	reti			

00009cf2 <timerB_init>:
    9cf2:	04 12       	push	r4		
    9cf4:	04 41       	mov	r1,	r4	
    9cf6:	24 53       	incd	r4		
    9cf8:	82 43 76 02 	mov	#0,	&0x0276	;r3 As==00
    9cfc:	82 43 78 02 	mov	#0,	&0x0278	;r3 As==00
    9d00:	b0 12 90 9d 	call	#0x9d90	
    9d04:	34 41       	pop	r4		
    9d06:	30 41       	ret			

00009d08 <timerB_register_cb>:
    9d08:	04 12       	push	r4		
    9d0a:	04 41       	mov	r1,	r4	
    9d0c:	24 53       	incd	r4		
    9d0e:	21 83       	decd	r1		
    9d10:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9d14:	92 44 fc ff 	mov	-4(r4),	&0x0276	;0xfffc(r4)
    9d18:	76 02 
    9d1a:	21 53       	incd	r1		
    9d1c:	34 41       	pop	r4		
    9d1e:	30 41       	ret			

00009d20 <timerB_set_wakeup>:
    9d20:	04 12       	push	r4		
    9d22:	04 41       	mov	r1,	r4	
    9d24:	24 53       	incd	r4		
    9d26:	21 83       	decd	r1		
    9d28:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9d2c:	92 44 fc ff 	mov	-4(r4),	&0x0278	;0xfffc(r4)
    9d30:	78 02 
    9d32:	21 53       	incd	r1		
    9d34:	34 41       	pop	r4		
    9d36:	30 41       	ret			

00009d38 <timerB_start_ticks>:
    9d38:	04 12       	push	r4		
    9d3a:	04 41       	mov	r1,	r4	
    9d3c:	24 53       	incd	r4		
    9d3e:	21 83       	decd	r1		
    9d40:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9d44:	5f 42 53 00 	mov.b	&0x0053,r15	
    9d48:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9d4c:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    9d50:	b2 40 10 00 	mov	#16,	&0x0182	;#0x0010
    9d54:	82 01 
    9d56:	82 43 90 01 	mov	#0,	&0x0190	;r3 As==00
    9d5a:	92 44 fc ff 	mov	-4(r4),	&0x0192	;0xfffc(r4)
    9d5e:	92 01 
    9d60:	b2 40 10 01 	mov	#272,	&0x0180	;#0x0110
    9d64:	80 01 
    9d66:	21 53       	incd	r1		
    9d68:	34 41       	pop	r4		
    9d6a:	30 41       	ret			

00009d6c <timerB_start_milliseconds>:
    9d6c:	04 12       	push	r4		
    9d6e:	04 41       	mov	r1,	r4	
    9d70:	24 53       	incd	r4		
    9d72:	21 83       	decd	r1		
    9d74:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9d78:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9d7c:	0f 4e       	mov	r14,	r15	
    9d7e:	0f 5f       	rla	r15		
    9d80:	0f 5e       	add	r14,	r15	
    9d82:	0f 5f       	rla	r15		
    9d84:	0f 5f       	rla	r15		
    9d86:	b0 12 38 9d 	call	#0x9d38	
    9d8a:	21 53       	incd	r1		
    9d8c:	34 41       	pop	r4		
    9d8e:	30 41       	ret			

00009d90 <timerB_stop>:
    9d90:	04 12       	push	r4		
    9d92:	04 41       	mov	r1,	r4	
    9d94:	24 53       	incd	r4		
    9d96:	82 43 80 01 	mov	#0,	&0x0180	;r3 As==00
    9d9a:	34 41       	pop	r4		
    9d9c:	30 41       	ret			

00009d9e <uart_init>:
    9d9e:	04 12       	push	r4		
    9da0:	04 41       	mov	r1,	r4	
    9da2:	24 53       	incd	r4		
    9da4:	21 83       	decd	r1		
    9da6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9daa:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9dae:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    9db2:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    9db6:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9dba:	7f d0 10 00 	bis.b	#16,	r15	;#0x0010
    9dbe:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9dc2:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9dc6:	7f f0 df ff 	and.b	#-33,	r15	;#0xffdf
    9dca:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9dce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9dd2:	1f 93       	cmp	#1,	r15	;r3 As==01
    9dd4:	03 24       	jz	$+8      	;abs 0x9ddc
    9dd6:	3f 92       	cmp	#8,	r15	;r2 As==11
    9dd8:	12 24       	jz	$+38     	;abs 0x9dfe
    9dda:	23 3c       	jmp	$+72     	;abs 0x9e22
    9ddc:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    9de0:	61 00 
    9de2:	f2 40 68 00 	mov.b	#104,	&0x0062	;#0x0068
    9de6:	62 00 
    9de8:	c2 43 63 00 	mov.b	#0,	&0x0063	;r3 As==00
    9dec:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    9df0:	5f 42 61 00 	mov.b	&0x0061,r15	
    9df4:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9df8:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    9dfc:	13 3c       	jmp	$+40     	;abs 0x9e24
    9dfe:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    9e02:	61 00 
    9e04:	f2 40 41 00 	mov.b	#65,	&0x0062	;#0x0041
    9e08:	62 00 
    9e0a:	f2 40 03 00 	mov.b	#3,	&0x0063	;#0x0003
    9e0e:	63 00 
    9e10:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    9e14:	5f 42 61 00 	mov.b	&0x0061,r15	
    9e18:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9e1c:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    9e20:	01 3c       	jmp	$+4      	;abs 0x9e24
    9e22:	03 43       	nop			
    9e24:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
    9e28:	21 53       	incd	r1		
    9e2a:	34 41       	pop	r4		
    9e2c:	30 41       	ret			

00009e2e <uart_stop>:
    9e2e:	04 12       	push	r4		
    9e30:	04 41       	mov	r1,	r4	
    9e32:	24 53       	incd	r4		
    9e34:	34 41       	pop	r4		
    9e36:	30 41       	ret			

00009e38 <putchar>:
    9e38:	04 12       	push	r4		
    9e3a:	04 41       	mov	r1,	r4	
    9e3c:	24 53       	incd	r4		
    9e3e:	21 83       	decd	r1		
    9e40:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9e44:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e48:	4f 4f       	mov.b	r15,	r15	
    9e4a:	c2 4f 67 00 	mov.b	r15,	&0x0067	
    9e4e:	03 43       	nop			
    9e50:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e54:	4f 4f       	mov.b	r15,	r15	
    9e56:	2f f3       	and	#2,	r15	;r3 As==10
    9e58:	0f 93       	tst	r15		
    9e5a:	fa 27       	jz	$-10     	;abs 0x9e50
    9e5c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e60:	4f 4f       	mov.b	r15,	r15	
    9e62:	4f 4f       	mov.b	r15,	r15	
    9e64:	21 53       	incd	r1		
    9e66:	34 41       	pop	r4		
    9e68:	30 41       	ret			

00009e6a <uart_getchar>:
    9e6a:	04 12       	push	r4		
    9e6c:	04 41       	mov	r1,	r4	
    9e6e:	24 53       	incd	r4		
    9e70:	21 83       	decd	r1		
    9e72:	5f 42 66 00 	mov.b	&0x0066,r15	
    9e76:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9e7a:	c4 43 fd ff 	mov.b	#0,	-3(r4)	;r3 As==00, 0xfffd(r4)
    9e7e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e82:	21 53       	incd	r1		
    9e84:	34 41       	pop	r4		
    9e86:	30 41       	ret			

00009e88 <uart_eint>:
    9e88:	04 12       	push	r4		
    9e8a:	04 41       	mov	r1,	r4	
    9e8c:	24 53       	incd	r4		
    9e8e:	5f 42 01 00 	mov.b	&0x0001,r15	
    9e92:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9e94:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    9e98:	34 41       	pop	r4		
    9e9a:	30 41       	ret			

00009e9c <uart_dint>:
    9e9c:	04 12       	push	r4		
    9e9e:	04 41       	mov	r1,	r4	
    9ea0:	24 53       	incd	r4		
    9ea2:	5f 42 01 00 	mov.b	&0x0001,r15	
    9ea6:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9eaa:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    9eae:	34 41       	pop	r4		
    9eb0:	30 41       	ret			

00009eb2 <uart_register_cb>:
    9eb2:	04 12       	push	r4		
    9eb4:	04 41       	mov	r1,	r4	
    9eb6:	24 53       	incd	r4		
    9eb8:	21 83       	decd	r1		
    9eba:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9ebe:	92 44 fc ff 	mov	-4(r4),	&0x027a	;0xfffc(r4)
    9ec2:	7a 02 
    9ec4:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    9ec8:	03 20       	jnz	$+8      	;abs 0x9ed0
    9eca:	b0 12 9c 9e 	call	#0x9e9c	
    9ece:	02 3c       	jmp	$+6      	;abs 0x9ed4
    9ed0:	b0 12 88 9e 	call	#0x9e88	
    9ed4:	21 53       	incd	r1		
    9ed6:	34 41       	pop	r4		
    9ed8:	30 41       	ret			

00009eda <usart0irq>:
    9eda:	0f 12       	push	r15		
    9edc:	0e 12       	push	r14		
    9ede:	0d 12       	push	r13		
    9ee0:	0c 12       	push	r12		
    9ee2:	04 12       	push	r4		
    9ee4:	04 41       	mov	r1,	r4	
    9ee6:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9eea:	21 83       	decd	r1		
    9eec:	5f 42 65 00 	mov.b	&0x0065,r15	
    9ef0:	4f 4f       	mov.b	r15,	r15	
    9ef2:	2f f2       	and	#4,	r15	;r2 As==10
    9ef4:	0f 93       	tst	r15		
    9ef6:	0a 24       	jz	$+22     	;abs 0x9f0c
    9ef8:	5f 42 66 00 	mov.b	&0x0066,r15	
    9efc:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    9f00:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    9f04:	5f 53       	inc.b	r15		
    9f06:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    9f0a:	0a 3c       	jmp	$+22     	;abs 0x9f20
    9f0c:	1e 42 7a 02 	mov	&0x027a,r14	
    9f10:	5f 42 66 00 	mov.b	&0x0066,r15	
    9f14:	8e 12       	call	r14		
    9f16:	0f 93       	tst	r15		
    9f18:	03 24       	jz	$+8      	;abs 0x9f20
    9f1a:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9f1e:	00 00 
    9f20:	21 53       	incd	r1		
    9f22:	34 41       	pop	r4		
    9f24:	3c 41       	pop	r12		
    9f26:	3d 41       	pop	r13		
    9f28:	3e 41       	pop	r14		
    9f2a:	3f 41       	pop	r15		
    9f2c:	00 13       	reti			

00009f2e <button_init>:
    9f2e:	04 12       	push	r4		
    9f30:	04 41       	mov	r1,	r4	
    9f32:	24 53       	incd	r4		
    9f34:	82 43 7c 02 	mov	#0,	&0x027c	;r3 As==00
    9f38:	5f 42 26 00 	mov.b	&0x0026,r15	
    9f3c:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f40:	c2 4f 26 00 	mov.b	r15,	&0x0026	
    9f44:	5f 42 22 00 	mov.b	&0x0022,r15	
    9f48:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f4c:	c2 4f 22 00 	mov.b	r15,	&0x0022	
    9f50:	5f 42 25 00 	mov.b	&0x0025,r15	
    9f54:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f58:	c2 4f 25 00 	mov.b	r15,	&0x0025	
    9f5c:	5f 42 24 00 	mov.b	&0x0024,r15	
    9f60:	6f d2       	bis.b	#4,	r15	;r2 As==10
    9f62:	c2 4f 24 00 	mov.b	r15,	&0x0024	
    9f66:	5f 42 23 00 	mov.b	&0x0023,r15	
    9f6a:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f6e:	c2 4f 23 00 	mov.b	r15,	&0x0023	
    9f72:	5f 42 27 00 	mov.b	&0x0027,r15	
    9f76:	6f d2       	bis.b	#4,	r15	;r2 As==10
    9f78:	c2 4f 27 00 	mov.b	r15,	&0x0027	
    9f7c:	5f 42 21 00 	mov.b	&0x0021,r15	
    9f80:	6f d2       	bis.b	#4,	r15	;r2 As==10
    9f82:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9f86:	34 41       	pop	r4		
    9f88:	30 41       	ret			

00009f8a <button_stop>:
    9f8a:	04 12       	push	r4		
    9f8c:	04 41       	mov	r1,	r4	
    9f8e:	24 53       	incd	r4		
    9f90:	5f 42 26 00 	mov.b	&0x0026,r15	
    9f94:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f98:	c2 4f 26 00 	mov.b	r15,	&0x0026	
    9f9c:	5f 42 22 00 	mov.b	&0x0022,r15	
    9fa0:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fa4:	c2 4f 22 00 	mov.b	r15,	&0x0022	
    9fa8:	5f 42 25 00 	mov.b	&0x0025,r15	
    9fac:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fb0:	c2 4f 25 00 	mov.b	r15,	&0x0025	
    9fb4:	5f 42 23 00 	mov.b	&0x0023,r15	
    9fb8:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fbc:	c2 4f 23 00 	mov.b	r15,	&0x0023	
    9fc0:	5f 42 27 00 	mov.b	&0x0027,r15	
    9fc4:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fc8:	c2 4f 27 00 	mov.b	r15,	&0x0027	
    9fcc:	34 41       	pop	r4		
    9fce:	30 41       	ret			

00009fd0 <button_is_pressed>:
    9fd0:	04 12       	push	r4		
    9fd2:	04 41       	mov	r1,	r4	
    9fd4:	24 53       	incd	r4		
    9fd6:	5f 42 20 00 	mov.b	&0x0020,r15	
    9fda:	4f 4f       	mov.b	r15,	r15	
    9fdc:	0e 4f       	mov	r15,	r14	
    9fde:	2e f2       	and	#4,	r14	;r2 As==10
    9fe0:	1f 43       	mov	#1,	r15	;r3 As==01
    9fe2:	0e 93       	tst	r14		
    9fe4:	01 24       	jz	$+4      	;abs 0x9fe8
    9fe6:	0f 43       	clr	r15		
    9fe8:	34 41       	pop	r4		
    9fea:	30 41       	ret			

00009fec <button_register_cb>:
    9fec:	04 12       	push	r4		
    9fee:	04 41       	mov	r1,	r4	
    9ff0:	24 53       	incd	r4		
    9ff2:	21 83       	decd	r1		
    9ff4:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9ff8:	92 44 fc ff 	mov	-4(r4),	&0x027c	;0xfffc(r4)
    9ffc:	7c 02 
    9ffe:	21 53       	incd	r1		
    a000:	34 41       	pop	r4		
    a002:	30 41       	ret			

0000a004 <button_enable_interrupt>:
    a004:	04 12       	push	r4		
    a006:	04 41       	mov	r1,	r4	
    a008:	24 53       	incd	r4		
    a00a:	5f 42 25 00 	mov.b	&0x0025,r15	
    a00e:	6f d2       	bis.b	#4,	r15	;r2 As==10
    a010:	c2 4f 25 00 	mov.b	r15,	&0x0025	
    a014:	34 41       	pop	r4		
    a016:	30 41       	ret			

0000a018 <button_disable_interrupt>:
    a018:	04 12       	push	r4		
    a01a:	04 41       	mov	r1,	r4	
    a01c:	24 53       	incd	r4		
    a01e:	5f 42 25 00 	mov.b	&0x0025,r15	
    a022:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    a026:	c2 4f 25 00 	mov.b	r15,	&0x0025	
    a02a:	34 41       	pop	r4		
    a02c:	30 41       	ret			

0000a02e <port1_irq_handler>:
    a02e:	0f 12       	push	r15		
    a030:	0e 12       	push	r14		
    a032:	0d 12       	push	r13		
    a034:	0c 12       	push	r12		
    a036:	04 12       	push	r4		
    a038:	04 41       	mov	r1,	r4	
    a03a:	34 50 0a 00 	add	#10,	r4	;#0x000a
    a03e:	5f 42 23 00 	mov.b	&0x0023,r15	
    a042:	4f 4f       	mov.b	r15,	r15	
    a044:	5e 42 25 00 	mov.b	&0x0025,r14	
    a048:	4e 4e       	mov.b	r14,	r14	
    a04a:	2e f2       	and	#4,	r14	;r2 As==10
    a04c:	0f fe       	and	r14,	r15	
    a04e:	0f 93       	tst	r15		
    a050:	07 24       	jz	$+16     	;abs 0xa060
    a052:	1f 42 7c 02 	mov	&0x027c,r15	
    a056:	0f 93       	tst	r15		
    a058:	03 24       	jz	$+8      	;abs 0xa060
    a05a:	1f 42 7c 02 	mov	&0x027c,r15	
    a05e:	8f 12       	call	r15		
    a060:	c2 43 23 00 	mov.b	#0,	&0x0023	;r3 As==00
    a064:	34 41       	pop	r4		
    a066:	3c 41       	pop	r12		
    a068:	3d 41       	pop	r13		
    a06a:	3e 41       	pop	r14		
    a06c:	3f 41       	pop	r15		
    a06e:	00 13       	reti			

0000a070 <flash_init>:
    a070:	04 12       	push	r4		
    a072:	04 41       	mov	r1,	r4	
    a074:	24 53       	incd	r4		
    a076:	b0 12 72 96 	call	#0x9672	
    a07a:	3f 92       	cmp	#8,	r15	;r2 As==11
    a07c:	11 24       	jz	$+36     	;abs 0xa0a0
    a07e:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    a082:	03 34       	jge	$+8      	;abs 0xa08a
    a084:	1f 93       	cmp	#1,	r15	;r3 As==01
    a086:	08 24       	jz	$+18     	;abs 0xa098
    a088:	17 3c       	jmp	$+48     	;abs 0xa0b8
    a08a:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    a08e:	0c 24       	jz	$+26     	;abs 0xa0a8
    a090:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    a094:	0d 24       	jz	$+28     	;abs 0xa0b0
    a096:	10 3c       	jmp	$+34     	;abs 0xa0b8
    a098:	b2 40 83 a5 	mov	#-23165,&0x012a	;#0xa583
    a09c:	2a 01 
    a09e:	0c 3c       	jmp	$+26     	;abs 0xa0b8
    a0a0:	b2 40 96 a5 	mov	#-23146,&0x012a	;#0xa596
    a0a4:	2a 01 
    a0a6:	08 3c       	jmp	$+18     	;abs 0xa0b8
    a0a8:	b2 40 a1 a5 	mov	#-23135,&0x012a	;#0xa5a1
    a0ac:	2a 01 
    a0ae:	04 3c       	jmp	$+10     	;abs 0xa0b8
    a0b0:	b2 40 ac a5 	mov	#-23124,&0x012a	;#0xa5ac
    a0b4:	2a 01 
    a0b6:	03 43       	nop			
    a0b8:	34 41       	pop	r4		
    a0ba:	30 41       	ret			

0000a0bc <flash_write_byte>:
    a0bc:	04 12       	push	r4		
    a0be:	04 41       	mov	r1,	r4	
    a0c0:	24 53       	incd	r4		
    a0c2:	21 82       	sub	#4,	r1	;r2 As==10
    a0c4:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a0c8:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    a0cc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a0d0:	6f 4f       	mov.b	@r15,	r15	
    a0d2:	5f 94 fc ff 	cmp.b	-4(r4),	r15	;0xfffc(r4)
    a0d6:	02 20       	jnz	$+6      	;abs 0xa0dc
    a0d8:	0f 43       	clr	r15		
    a0da:	1f 3c       	jmp	$+64     	;abs 0xa11a
    a0dc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a0e0:	6f 4f       	mov.b	@r15,	r15	
    a0e2:	7f 93       	cmp.b	#-1,	r15	;r3 As==11
    a0e4:	02 24       	jz	$+6      	;abs 0xa0ea
    a0e6:	3f 43       	mov	#-1,	r15	;r3 As==11
    a0e8:	18 3c       	jmp	$+50     	;abs 0xa11a
    a0ea:	b0 12 70 a0 	call	#0xa070	
    a0ee:	b0 12 e4 a1 	call	#0xa1e4	
    a0f2:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a0f6:	2c 01 
    a0f8:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a0fc:	28 01 
    a0fe:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a102:	df 44 fc ff 	mov.b	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a106:	00 00 
    a108:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a10c:	28 01 
    a10e:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a112:	2c 01 
    a114:	b0 12 00 a2 	call	#0xa200	
    a118:	0f 43       	clr	r15		
    a11a:	21 52       	add	#4,	r1	;r2 As==10
    a11c:	34 41       	pop	r4		
    a11e:	30 41       	ret			

0000a120 <flash_write_word>:
    a120:	04 12       	push	r4		
    a122:	04 41       	mov	r1,	r4	
    a124:	24 53       	incd	r4		
    a126:	21 82       	sub	#4,	r1	;r2 As==10
    a128:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a12c:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    a130:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a134:	2f 4f       	mov	@r15,	r15	
    a136:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    a13a:	02 20       	jnz	$+6      	;abs 0xa140
    a13c:	0f 43       	clr	r15		
    a13e:	1f 3c       	jmp	$+64     	;abs 0xa17e
    a140:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a144:	2f 4f       	mov	@r15,	r15	
    a146:	3f 93       	cmp	#-1,	r15	;r3 As==11
    a148:	02 24       	jz	$+6      	;abs 0xa14e
    a14a:	3f 43       	mov	#-1,	r15	;r3 As==11
    a14c:	18 3c       	jmp	$+50     	;abs 0xa17e
    a14e:	b0 12 70 a0 	call	#0xa070	
    a152:	b0 12 e4 a1 	call	#0xa1e4	
    a156:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a15a:	2c 01 
    a15c:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a160:	28 01 
    a162:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a166:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a16a:	00 00 
    a16c:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a170:	28 01 
    a172:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a176:	2c 01 
    a178:	b0 12 00 a2 	call	#0xa200	
    a17c:	0f 43       	clr	r15		
    a17e:	21 52       	add	#4,	r1	;r2 As==10
    a180:	34 41       	pop	r4		
    a182:	30 41       	ret			

0000a184 <flash_erase_segment>:
    a184:	04 12       	push	r4		
    a186:	04 41       	mov	r1,	r4	
    a188:	24 53       	incd	r4		
    a18a:	21 83       	decd	r1		
    a18c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a190:	b0 12 70 a0 	call	#0xa070	
    a194:	b0 12 e4 a1 	call	#0xa1e4	
    a198:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a19c:	2c 01 
    a19e:	b2 40 02 a5 	mov	#-23294,&0x0128	;#0xa502
    a1a2:	28 01 
    a1a4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a1a8:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    a1ac:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a1b0:	28 01 
    a1b2:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a1b6:	2c 01 
    a1b8:	b0 12 00 a2 	call	#0xa200	
    a1bc:	21 53       	incd	r1		
    a1be:	34 41       	pop	r4		
    a1c0:	30 41       	ret			

0000a1c2 <flash_erase_info_memory>:
    a1c2:	04 12       	push	r4		
    a1c4:	04 41       	mov	r1,	r4	
    a1c6:	24 53       	incd	r4		
    a1c8:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    a1cc:	b0 12 84 a1 	call	#0xa184	
    a1d0:	3f 40 40 10 	mov	#4160,	r15	;#0x1040
    a1d4:	b0 12 84 a1 	call	#0xa184	
    a1d8:	3f 40 80 10 	mov	#4224,	r15	;#0x1080
    a1dc:	b0 12 84 a1 	call	#0xa184	
    a1e0:	34 41       	pop	r4		
    a1e2:	30 41       	ret			

0000a1e4 <watchdog_stop>:
    a1e4:	04 12       	push	r4		
    a1e6:	04 41       	mov	r1,	r4	
    a1e8:	24 53       	incd	r4		
    a1ea:	1f 42 20 01 	mov	&0x0120,r15	
    a1ee:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    a1f2:	82 4f 7e 02 	mov	r15,	&0x027e	
    a1f6:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    a1fa:	20 01 
    a1fc:	34 41       	pop	r4		
    a1fe:	30 41       	ret			

0000a200 <watchdog_restore>:
    a200:	04 12       	push	r4		
    a202:	04 41       	mov	r1,	r4	
    a204:	24 53       	incd	r4		
    a206:	1f 42 7e 02 	mov	&0x027e,r15	
    a20a:	3f d0 00 5a 	bis	#23040,	r15	;#0x5a00
    a20e:	82 4f 20 01 	mov	r15,	&0x0120	
    a212:	34 41       	pop	r4		
    a214:	30 41       	ret			

0000a216 <__mulsi3>:
    a216:	0b 12       	push	r11		
    a218:	0a 12       	push	r10		
    a21a:	0b 43       	clr	r11		
    a21c:	0a 43       	clr	r10		
    a21e:	08 3c       	jmp	$+18     	;abs 0xa230
    a220:	12 c3       	clrc			
    a222:	0d 10       	rrc	r13		
    a224:	0c 10       	rrc	r12		
    a226:	02 28       	jnc	$+6      	;abs 0xa22c
    a228:	0a 5e       	add	r14,	r10	
    a22a:	0b 6f       	addc	r15,	r11	
    a22c:	0e 5e       	rla	r14		
    a22e:	0f 6f       	rlc	r15		
    a230:	0c 93       	tst	r12		
    a232:	f6 23       	jnz	$-18     	;abs 0xa220
    a234:	0d 93       	tst	r13		
    a236:	f4 23       	jnz	$-22     	;abs 0xa220
    a238:	0e 4a       	mov	r10,	r14	
    a23a:	0f 4b       	mov	r11,	r15	
    a23c:	3a 41       	pop	r10		
    a23e:	3b 41       	pop	r11		
    a240:	30 41       	ret			

0000a242 <printf>:
    a242:	0d 41       	mov	r1,	r13	
    a244:	2d 53       	incd	r13		
    a246:	3e 4d       	mov	@r13+,	r14	
    a248:	3f 40 38 9e 	mov	#-25032,r15	;#0x9e38
    a24c:	b0 12 f8 a3 	call	#0xa3f8	
    a250:	30 41       	ret			

0000a252 <vprintf>:
    a252:	0d 4e       	mov	r14,	r13	
    a254:	0e 4f       	mov	r15,	r14	
    a256:	3f 40 38 9e 	mov	#-25032,r15	;#0x9e38
    a25a:	b0 12 f8 a3 	call	#0xa3f8	
    a25e:	30 41       	ret			

0000a260 <print_field>:
    a260:	0b 12       	push	r11		
    a262:	0a 12       	push	r10		
    a264:	09 12       	push	r9		
    a266:	08 12       	push	r8		
    a268:	07 12       	push	r7		
    a26a:	06 12       	push	r6		
    a26c:	05 12       	push	r5		
    a26e:	04 12       	push	r4		
    a270:	31 82       	sub	#8,	r1	;r2 As==11
    a272:	08 4f       	mov	r15,	r8	
    a274:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a278:	09 4d       	mov	r13,	r9	
    a27a:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    a27e:	1d 41 1c 00 	mov	28(r1),	r13	;0x001c(r1)
    a282:	4c 4d       	mov.b	r13,	r12	
    a284:	04 4d       	mov	r13,	r4	
    a286:	84 10       	swpb	r4		
    a288:	45 44       	mov.b	r4,	r5	
    a28a:	4e 4f       	mov.b	r15,	r14	
    a28c:	7e b0 40 00 	bit.b	#64,	r14	;#0x0040
    a290:	11 24       	jz	$+36     	;abs 0xa2b4
    a292:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a296:	00 00 
    a298:	0e 4f       	mov	r15,	r14	
    a29a:	8e 10       	swpb	r14		
    a29c:	5e f3       	and.b	#1,	r14	;r3 As==01
    a29e:	03 24       	jz	$+8      	;abs 0xa2a6
    a2a0:	7e 40 58 00 	mov.b	#88,	r14	;#0x0058
    a2a4:	02 3c       	jmp	$+6      	;abs 0xa2aa
    a2a6:	7e 40 78 00 	mov.b	#120,	r14	;#0x0078
    a2aa:	c1 4e 01 00 	mov.b	r14,	1(r1)	;0x0001(r1)
    a2ae:	0c 41       	mov	r1,	r12	
    a2b0:	2c 53       	incd	r12		
    a2b2:	0f 3c       	jmp	$+32     	;abs 0xa2d2
    a2b4:	7e f0 20 00 	and.b	#32,	r14	;#0x0020
    a2b8:	04 24       	jz	$+10     	;abs 0xa2c2
    a2ba:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a2be:	00 00 
    a2c0:	04 3c       	jmp	$+10     	;abs 0xa2ca
    a2c2:	4c 93       	tst.b	r12		
    a2c4:	05 24       	jz	$+12     	;abs 0xa2d0
    a2c6:	c1 4d 00 00 	mov.b	r13,	0(r1)	;0x0000(r1)
    a2ca:	0c 41       	mov	r1,	r12	
    a2cc:	1c 53       	inc	r12		
    a2ce:	01 3c       	jmp	$+4      	;abs 0xa2d2
    a2d0:	0c 41       	mov	r1,	r12	
    a2d2:	0a 4c       	mov	r12,	r10	
    a2d4:	8c 10       	swpb	r12		
    a2d6:	8c 11       	sxt	r12		
    a2d8:	8c 10       	swpb	r12		
    a2da:	8c 11       	sxt	r12		
    a2dc:	0b 4c       	mov	r12,	r11	
    a2de:	06 41       	mov	r1,	r6	
    a2e0:	0c 41       	mov	r1,	r12	
    a2e2:	8c 10       	swpb	r12		
    a2e4:	8c 11       	sxt	r12		
    a2e6:	8c 10       	swpb	r12		
    a2e8:	8c 11       	sxt	r12		
    a2ea:	07 4c       	mov	r12,	r7	
    a2ec:	0a 86       	sub	r6,	r10	
    a2ee:	0b 77       	subc	r7,	r11	
    a2f0:	0e 4f       	mov	r15,	r14	
    a2f2:	8e 10       	swpb	r14		
    a2f4:	c1 4e 02 00 	mov.b	r14,	2(r1)	;0x0002(r1)
    a2f8:	6e f2       	and.b	#4,	r14	;r2 As==10
    a2fa:	02 24       	jz	$+6      	;abs 0xa300
    a2fc:	07 45       	mov	r5,	r7	
    a2fe:	01 3c       	jmp	$+4      	;abs 0xa302
    a300:	37 43       	mov	#-1,	r7	;r3 As==11
    a302:	4f 4f       	mov.b	r15,	r15	
    a304:	7f b0 10 00 	bit.b	#16,	r15	;#0x0010
    a308:	3c 20       	jnz	$+122    	;abs 0xa382
    a30a:	1d 41 04 00 	mov	4(r1),	r13	;0x0004(r1)
    a30e:	3d 53       	add	#-1,	r13	;r3 As==11
    a310:	1d 53       	inc	r13		
    a312:	cd 93 00 00 	tst.b	0(r13)		;0x0000(r13)
    a316:	fc 23       	jnz	$-6      	;abs 0xa310
    a318:	1d 81 04 00 	sub	4(r1),	r13	;0x0004(r1)
    a31c:	09 9a       	cmp	r10,	r9	
    a31e:	02 28       	jnc	$+6      	;abs 0xa324
    a320:	09 8a       	sub	r10,	r9	
    a322:	01 3c       	jmp	$+4      	;abs 0xa326
    a324:	09 43       	clr	r9		
    a326:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a32a:	05 24       	jz	$+12     	;abs 0xa336
    a32c:	09 95       	cmp	r5,	r9	
    a32e:	02 28       	jnc	$+6      	;abs 0xa334
    a330:	09 85       	sub	r5,	r9	
    a332:	01 3c       	jmp	$+4      	;abs 0xa336
    a334:	09 43       	clr	r9		
    a336:	05 4d       	mov	r13,	r5	
    a338:	07 9d       	cmp	r13,	r7	
    a33a:	01 2c       	jc	$+4      	;abs 0xa33e
    a33c:	05 47       	mov	r7,	r5	
    a33e:	4f 93       	tst.b	r15		
    a340:	0d 38       	jl	$+28     	;abs 0xa35c
    a342:	f1 40 20 00 	mov.b	#32,	6(r1)	;#0x0020, 0x0006(r1)
    a346:	06 00 
    a348:	06 43       	clr	r6		
    a34a:	0b 43       	clr	r11		
    a34c:	0e 3c       	jmp	$+30     	;abs 0xa36a
    a34e:	0f 41       	mov	r1,	r15	
    a350:	0f 56       	add	r6,	r15	
    a352:	6f 4f       	mov.b	@r15,	r15	
    a354:	8f 11       	sxt	r15		
    a356:	16 53       	inc	r6		
    a358:	88 12       	call	r8		
    a35a:	01 3c       	jmp	$+4      	;abs 0xa35e
    a35c:	06 43       	clr	r6		
    a35e:	06 9a       	cmp	r10,	r6	
    a360:	f6 3b       	jl	$-18     	;abs 0xa34e
    a362:	0b 4a       	mov	r10,	r11	
    a364:	f1 40 30 00 	mov.b	#48,	6(r1)	;#0x0030, 0x0006(r1)
    a368:	06 00 
    a36a:	05 8b       	sub	r11,	r5	
    a36c:	05 3c       	jmp	$+12     	;abs 0xa378
    a36e:	5f 41 06 00 	mov.b	6(r1),	r15	;0x0006(r1)
    a372:	8f 11       	sxt	r15		
    a374:	88 12       	call	r8		
    a376:	1b 53       	inc	r11		
    a378:	0f 45       	mov	r5,	r15	
    a37a:	0f 5b       	add	r11,	r15	
    a37c:	0f 99       	cmp	r9,	r15	
    a37e:	f7 2b       	jnc	$-16     	;abs 0xa36e
    a380:	0a 3c       	jmp	$+22     	;abs 0xa396
    a382:	06 43       	clr	r6		
    a384:	0b 43       	clr	r11		
    a386:	07 3c       	jmp	$+16     	;abs 0xa396
    a388:	1b 53       	inc	r11		
    a38a:	0f 41       	mov	r1,	r15	
    a38c:	0f 56       	add	r6,	r15	
    a38e:	6f 4f       	mov.b	@r15,	r15	
    a390:	8f 11       	sxt	r15		
    a392:	16 53       	inc	r6		
    a394:	88 12       	call	r8		
    a396:	06 9a       	cmp	r10,	r6	
    a398:	f7 3b       	jl	$-16     	;abs 0xa388
    a39a:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a39e:	02 24       	jz	$+6      	;abs 0xa3a4
    a3a0:	4a 44       	mov.b	r4,	r10	
    a3a2:	08 3c       	jmp	$+18     	;abs 0xa3b4
    a3a4:	1a 41 04 00 	mov	4(r1),	r10	;0x0004(r1)
    a3a8:	0a 8b       	sub	r11,	r10	
    a3aa:	0d 3c       	jmp	$+28     	;abs 0xa3c6
    a3ac:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    a3b0:	88 12       	call	r8		
    a3b2:	7a 53       	add.b	#-1,	r10	;r3 As==11
    a3b4:	4a 93       	tst.b	r10		
    a3b6:	fa 23       	jnz	$-10     	;abs 0xa3ac
    a3b8:	44 44       	mov.b	r4,	r4	
    a3ba:	0b 54       	add	r4,	r11	
    a3bc:	f3 3f       	jmp	$-24     	;abs 0xa3a4
    a3be:	37 53       	add	#-1,	r7	;r3 As==11
    a3c0:	8f 11       	sxt	r15		
    a3c2:	88 12       	call	r8		
    a3c4:	1b 53       	inc	r11		
    a3c6:	0f 4a       	mov	r10,	r15	
    a3c8:	0f 5b       	add	r11,	r15	
    a3ca:	6f 4f       	mov.b	@r15,	r15	
    a3cc:	4f 93       	tst.b	r15		
    a3ce:	07 24       	jz	$+16     	;abs 0xa3de
    a3d0:	07 93       	tst	r7		
    a3d2:	f5 23       	jnz	$-20     	;abs 0xa3be
    a3d4:	04 3c       	jmp	$+10     	;abs 0xa3de
    a3d6:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    a3da:	88 12       	call	r8		
    a3dc:	1b 53       	inc	r11		
    a3de:	0b 99       	cmp	r9,	r11	
    a3e0:	fa 2b       	jnc	$-10     	;abs 0xa3d6
    a3e2:	0f 4b       	mov	r11,	r15	
    a3e4:	31 52       	add	#8,	r1	;r2 As==11
    a3e6:	34 41       	pop	r4		
    a3e8:	35 41       	pop	r5		
    a3ea:	36 41       	pop	r6		
    a3ec:	37 41       	pop	r7		
    a3ee:	38 41       	pop	r8		
    a3f0:	39 41       	pop	r9		
    a3f2:	3a 41       	pop	r10		
    a3f4:	3b 41       	pop	r11		
    a3f6:	30 41       	ret			

0000a3f8 <vuprintf>:
    a3f8:	0b 12       	push	r11		
    a3fa:	0a 12       	push	r10		
    a3fc:	09 12       	push	r9		
    a3fe:	08 12       	push	r8		
    a400:	07 12       	push	r7		
    a402:	06 12       	push	r6		
    a404:	05 12       	push	r5		
    a406:	04 12       	push	r4		
    a408:	31 50 b6 ff 	add	#-74,	r1	;#0xffb6
    a40c:	81 4f 3a 00 	mov	r15,	58(r1)	;0x003a(r1)
    a410:	06 4e       	mov	r14,	r6	
    a412:	05 4d       	mov	r13,	r5	
    a414:	81 4e 3e 00 	mov	r14,	62(r1)	;0x003e(r1)
    a418:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a41c:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a420:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a424:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a428:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a42c:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    a430:	07 43       	clr	r7		
    a432:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c(r1)
    a436:	0e 41       	mov	r1,	r14	
    a438:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    a43c:	81 4e 1c 00 	mov	r14,	28(r1)	;0x001c(r1)
    a440:	30 40 72 aa 	br	#0xaa72	
    a444:	0f 46       	mov	r6,	r15	
    a446:	1f 53       	inc	r15		
    a448:	81 4f 40 00 	mov	r15,	64(r1)	;0x0040(r1)
    a44c:	07 93       	tst	r7		
    a44e:	1e 20       	jnz	$+62     	;abs 0xa48c
    a450:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a454:	13 20       	jnz	$+40     	;abs 0xa47c
    a456:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    a45a:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    a45e:	81 46 3e 00 	mov	r6,	62(r1)	;0x003e(r1)
    a462:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a466:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a46a:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a46e:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a472:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a476:	30 40 68 aa 	br	#0xaa68	
    a47a:	05 47       	mov	r7,	r5	
    a47c:	8e 11       	sxt	r14		
    a47e:	0f 4e       	mov	r14,	r15	
    a480:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    a484:	91 53 2c 00 	inc	44(r1)		;0x002c(r1)
    a488:	30 40 4e aa 	br	#0xaa4e	
    a48c:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    a490:	c5 24       	jz	$+396    	;abs 0xa61c
    a492:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a496:	27 34       	jge	$+80     	;abs 0xa4e6
    a498:	7e 90 30 00 	cmp.b	#48,	r14	;#0x0030
    a49c:	94 24       	jz	$+298    	;abs 0xa5c6
    a49e:	7e 90 31 00 	cmp.b	#49,	r14	;#0x0031
    a4a2:	1a 34       	jge	$+54     	;abs 0xa4d8
    a4a4:	7e 90 2a 00 	cmp.b	#42,	r14	;#0x002a
    a4a8:	77 24       	jz	$+240    	;abs 0xa598
    a4aa:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a4ae:	0a 34       	jge	$+22     	;abs 0xa4c4
    a4b0:	7e 90 23 00 	cmp.b	#35,	r14	;#0x0023
    a4b4:	42 24       	jz	$+134    	;abs 0xa53a
    a4b6:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a4ba:	e0 27       	jz	$-62     	;abs 0xa47c
    a4bc:	7e 90 20 00 	cmp.b	#32,	r14	;#0x0020
    a4c0:	32 20       	jnz	$+102    	;abs 0xa526
    a4c2:	56 3c       	jmp	$+174    	;abs 0xa570
    a4c4:	7e 90 2d 00 	cmp.b	#45,	r14	;#0x002d
    a4c8:	49 24       	jz	$+148    	;abs 0xa55c
    a4ca:	7e 90 2e 00 	cmp.b	#46,	r14	;#0x002e
    a4ce:	5b 24       	jz	$+184    	;abs 0xa586
    a4d0:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a4d4:	28 20       	jnz	$+82     	;abs 0xa526
    a4d6:	47 3c       	jmp	$+144    	;abs 0xa566
    a4d8:	7e 90 3a 00 	cmp.b	#58,	r14	;#0x003a
    a4dc:	8c 38       	jl	$+282    	;abs 0xa5f6
    a4de:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    a4e2:	21 20       	jnz	$+68     	;abs 0xa526
    a4e4:	e9 3c       	jmp	$+468    	;abs 0xa6b8
    a4e6:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    a4ea:	24 24       	jz	$+74     	;abs 0xa534
    a4ec:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a4f0:	0a 34       	jge	$+22     	;abs 0xa506
    a4f2:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    a4f6:	e3 24       	jz	$+456    	;abs 0xa6be
    a4f8:	7e 90 6c 00 	cmp.b	#108,	r14	;#0x006c
    a4fc:	22 24       	jz	$+70     	;abs 0xa542
    a4fe:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a502:	11 20       	jnz	$+36     	;abs 0xa526
    a504:	dc 3c       	jmp	$+442    	;abs 0xa6be
    a506:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    a50a:	98 24       	jz	$+306    	;abs 0xa63c
    a50c:	7e 90 74 00 	cmp.b	#116,	r14	;#0x0074
    a510:	04 34       	jge	$+10     	;abs 0xa51a
    a512:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a516:	07 20       	jnz	$+16     	;abs 0xa526
    a518:	b8 3c       	jmp	$+370    	;abs 0xa68a
    a51a:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    a51e:	d1 24       	jz	$+420    	;abs 0xa6c2
    a520:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    a524:	d2 24       	jz	$+422    	;abs 0xa6ca
    a526:	19 41 3e 00 	mov	62(r1),	r9	;0x003e(r1)
    a52a:	18 41 2c 00 	mov	44(r1),	r8	;0x002c(r1)
    a52e:	08 89       	sub	r9,	r8	
    a530:	30 40 3c aa 	br	#0xaa3c	
    a534:	b1 42 28 00 	mov	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    a538:	cb 3c       	jmp	$+408    	;abs 0xa6d0
    a53a:	f1 d2 00 00 	bis.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    a53e:	30 40 6c aa 	br	#0xaa6c	
    a542:	69 41       	mov.b	@r1,	r9	
    a544:	59 f3       	and.b	#1,	r9	;r3 As==01
    a546:	6e 41       	mov.b	@r1,	r14	
    a548:	04 24       	jz	$+10     	;abs 0xa552
    a54a:	7e f0 fe ff 	and.b	#-2,	r14	;#0xfffe
    a54e:	6e d3       	bis.b	#2,	r14	;r3 As==10
    a550:	01 3c       	jmp	$+4      	;abs 0xa554
    a552:	5e d3       	bis.b	#1,	r14	;r3 As==01
    a554:	c1 4e 00 00 	mov.b	r14,	0(r1)	;0x0000(r1)
    a558:	30 40 6c aa 	br	#0xaa6c	
    a55c:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a560:	00 00 
    a562:	30 40 6c aa 	br	#0xaa6c	
    a566:	f1 40 2b 00 	mov.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a56a:	02 00 
    a56c:	30 40 6c aa 	br	#0xaa6c	
    a570:	f1 90 2b 00 	cmp.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a574:	02 00 
    a576:	02 20       	jnz	$+6      	;abs 0xa57c
    a578:	30 40 6c aa 	br	#0xaa6c	
    a57c:	f1 40 20 00 	mov.b	#32,	2(r1)	;#0x0020, 0x0002(r1)
    a580:	02 00 
    a582:	30 40 6c aa 	br	#0xaa6c	
    a586:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a58a:	02 24       	jz	$+6      	;abs 0xa590
    a58c:	30 40 52 aa 	br	#0xaa52	
    a590:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    a594:	30 40 6c aa 	br	#0xaa6c	
    a598:	0e 45       	mov	r5,	r14	
    a59a:	2e 53       	incd	r14		
    a59c:	2a 45       	mov	@r5,	r10	
    a59e:	0a 93       	tst	r10		
    a5a0:	03 38       	jl	$+8      	;abs 0xa5a8
    a5a2:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a5a6:	0d 3c       	jmp	$+28     	;abs 0xa5c2
    a5a8:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a5ac:	02 24       	jz	$+6      	;abs 0xa5b2
    a5ae:	30 40 62 aa 	br	#0xaa62	
    a5b2:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a5b6:	00 00 
    a5b8:	3a e3       	inv	r10		
    a5ba:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a5be:	91 53 26 00 	inc	38(r1)		;0x0026(r1)
    a5c2:	05 4e       	mov	r14,	r5	
    a5c4:	27 3c       	jmp	$+80     	;abs 0xa614
    a5c6:	81 93 26 00 	tst	38(r1)		;0x0026(r1)
    a5ca:	15 20       	jnz	$+44     	;abs 0xa5f6
    a5cc:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a5d0:	12 20       	jnz	$+38     	;abs 0xa5f6
    a5d2:	69 41       	mov.b	@r1,	r9	
    a5d4:	79 f0 10 00 	and.b	#16,	r9	;#0x0010
    a5d8:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a5da:	01 24       	jz	$+4      	;abs 0xa5de
    a5dc:	4e 43       	clr.b	r14		
    a5de:	4e 4e       	mov.b	r14,	r14	
    a5e0:	0e 11       	rra	r14		
    a5e2:	0e 43       	clr	r14		
    a5e4:	4e 10       	rrc.b	r14		
    a5e6:	6a 41       	mov.b	@r1,	r10	
    a5e8:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f
    a5ec:	4a de       	bis.b	r14,	r10	
    a5ee:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    a5f2:	30 40 6c aa 	br	#0xaa6c	
    a5f6:	1a 41 26 00 	mov	38(r1),	r10	;0x0026(r1)
    a5fa:	0a 5a       	rla	r10		
    a5fc:	0c 4a       	mov	r10,	r12	
    a5fe:	0c 5c       	rla	r12		
    a600:	0c 5c       	rla	r12		
    a602:	0a 5c       	add	r12,	r10	
    a604:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a608:	b1 50 d0 ff 	add	#-48,	38(r1)	;#0xffd0, 0x0026(r1)
    a60c:	26 00 
    a60e:	8e 11       	sxt	r14		
    a610:	81 5e 26 00 	add	r14,	38(r1)	;0x0026(r1)
    a614:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    a618:	30 40 6c aa 	br	#0xaa6c	
    a61c:	07 45       	mov	r5,	r7	
    a61e:	27 53       	incd	r7		
    a620:	6e 45       	mov.b	@r5,	r14	
    a622:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a626:	03 20       	jnz	$+8      	;abs 0xa62e
    a628:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a62c:	26 27       	jz	$-434    	;abs 0xa47a
    a62e:	c1 4e 04 00 	mov.b	r14,	4(r1)	;0x0004(r1)
    a632:	c1 43 05 00 	mov.b	#0,	5(r1)	;r3 As==00, 0x0005(r1)
    a636:	0e 41       	mov	r1,	r14	
    a638:	2e 52       	add	#4,	r14	;r2 As==10
    a63a:	03 3c       	jmp	$+8      	;abs 0xa642
    a63c:	07 45       	mov	r5,	r7	
    a63e:	27 53       	incd	r7		
    a640:	2e 45       	mov	@r5,	r14	
    a642:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a646:	07 24       	jz	$+16     	;abs 0xa656
    a648:	e1 d2 01 00 	bis.b	#4,	1(r1)	;r2 As==10, 0x0001(r1)
    a64c:	1f 41 26 00 	mov	38(r1),	r15	;0x0026(r1)
    a650:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
    a654:	06 3c       	jmp	$+14     	;abs 0xa662
    a656:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a65a:	03 24       	jz	$+8      	;abs 0xa662
    a65c:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    a660:	30 00 
    a662:	0e 93       	tst	r14		
    a664:	02 20       	jnz	$+6      	;abs 0xa66a
    a666:	3e 40 ae ad 	mov	#-21074,r14	;#0xadae
    a66a:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    a66e:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    a672:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    a676:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    a67a:	b0 12 60 a2 	call	#0xa260	
    a67e:	21 52       	add	#4,	r1	;r2 As==10
    a680:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    a684:	05 47       	mov	r7,	r5	
    a686:	30 40 4e aa 	br	#0xaa4e	
    a68a:	07 45       	mov	r5,	r7	
    a68c:	27 53       	incd	r7		
    a68e:	29 45       	mov	@r5,	r9	
    a690:	81 49 1e 00 	mov	r9,	30(r1)	;0x001e(r1)
    a694:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a696:	09 93       	tst	r9		
    a698:	01 20       	jnz	$+4      	;abs 0xa69c
    a69a:	4e 43       	clr.b	r14		
    a69c:	4e 5e       	rla.b	r14		
    a69e:	4e 5e       	rla.b	r14		
    a6a0:	4e 5e       	rla.b	r14		
    a6a2:	6a 41       	mov.b	@r1,	r10	
    a6a4:	7a f0 f7 ff 	and.b	#-9,	r10	;#0xfff7
    a6a8:	4a de       	bis.b	r14,	r10	
    a6aa:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    a6ae:	05 47       	mov	r7,	r5	
    a6b0:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    a6b4:	28 00 
    a6b6:	53 3c       	jmp	$+168    	;abs 0xa75e
    a6b8:	d1 d3 01 00 	bis.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a6bc:	06 3c       	jmp	$+14     	;abs 0xa6ca
    a6be:	e1 d2 00 00 	bis.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    a6c2:	b1 40 0a 00 	mov	#10,	40(r1)	;#0x000a, 0x0028(r1)
    a6c6:	28 00 
    a6c8:	03 3c       	jmp	$+8      	;abs 0xa6d0
    a6ca:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    a6ce:	28 00 
    a6d0:	6b 41       	mov.b	@r1,	r11	
    a6d2:	6b b3       	bit.b	#2,	r11	;r3 As==10
    a6d4:	24 24       	jz	$+74     	;abs 0xa71e
    a6d6:	0c 45       	mov	r5,	r12	
    a6d8:	3c 52       	add	#8,	r12	;r2 As==11
    a6da:	28 45       	mov	@r5,	r8	
    a6dc:	17 45 02 00 	mov	2(r5),	r7	;0x0002(r5)
    a6e0:	16 45 04 00 	mov	4(r5),	r6	;0x0004(r5)
    a6e4:	1b 45 06 00 	mov	6(r5),	r11	;0x0006(r5)
    a6e8:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    a6ec:	81 47 20 00 	mov	r7,	32(r1)	;0x0020(r1)
    a6f0:	81 46 22 00 	mov	r6,	34(r1)	;0x0022(r1)
    a6f4:	81 4b 24 00 	mov	r11,	36(r1)	;0x0024(r1)
    a6f8:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    a6fc:	08 93       	tst	r8		
    a6fe:	06 20       	jnz	$+14     	;abs 0xa70c
    a700:	07 93       	tst	r7		
    a702:	04 20       	jnz	$+10     	;abs 0xa70c
    a704:	06 93       	tst	r6		
    a706:	02 20       	jnz	$+6      	;abs 0xa70c
    a708:	0b 93       	tst	r11		
    a70a:	02 24       	jz	$+6      	;abs 0xa710
    a70c:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a710:	0b 5b       	rla	r11		
    a712:	0b 43       	clr	r11		
    a714:	0b 6b       	rlc	r11		
    a716:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    a71a:	05 4c       	mov	r12,	r5	
    a71c:	20 3c       	jmp	$+66     	;abs 0xa75e
    a71e:	5b f3       	and.b	#1,	r11	;r3 As==01
    a720:	07 45       	mov	r5,	r7	
    a722:	0d 24       	jz	$+28     	;abs 0xa73e
    a724:	27 52       	add	#4,	r7	;r2 As==10
    a726:	28 45       	mov	@r5,	r8	
    a728:	1b 45 02 00 	mov	2(r5),	r11	;0x0002(r5)
    a72c:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    a730:	81 4b 20 00 	mov	r11,	32(r1)	;0x0020(r1)
    a734:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    a738:	08 93       	tst	r8		
    a73a:	09 20       	jnz	$+20     	;abs 0xa74e
    a73c:	06 3c       	jmp	$+14     	;abs 0xa74a
    a73e:	27 53       	incd	r7		
    a740:	2b 45       	mov	@r5,	r11	
    a742:	81 4b 1e 00 	mov	r11,	30(r1)	;0x001e(r1)
    a746:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    a74a:	0b 93       	tst	r11		
    a74c:	02 24       	jz	$+6      	;abs 0xa752
    a74e:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a752:	0b 5b       	rla	r11		
    a754:	0b 43       	clr	r11		
    a756:	0b 6b       	rlc	r11		
    a758:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    a75c:	05 47       	mov	r7,	r5	
    a75e:	f1 b2 00 00 	bit.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    a762:	12 24       	jz	$+38     	;abs 0xa788
    a764:	c1 93 2b 00 	tst.b	43(r1)		;0x002b(r1)
    a768:	0f 20       	jnz	$+32     	;abs 0xa788
    a76a:	68 41       	mov.b	@r1,	r8	
    a76c:	b1 90 10 00 	cmp	#16,	40(r1)	;#0x0010, 0x0028(r1)
    a770:	28 00 
    a772:	03 20       	jnz	$+8      	;abs 0xa77a
    a774:	78 d0 40 00 	bis.b	#64,	r8	;#0x0040
    a778:	05 3c       	jmp	$+12     	;abs 0xa784
    a77a:	b1 92 28 00 	cmp	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    a77e:	04 20       	jnz	$+10     	;abs 0xa788
    a780:	78 d0 20 00 	bis.b	#32,	r8	;#0x0020
    a784:	c1 48 00 00 	mov.b	r8,	0(r1)	;0x0000(r1)
    a788:	68 41       	mov.b	@r1,	r8	
    a78a:	68 b2       	bit.b	#4,	r8	;r2 As==10
    a78c:	30 24       	jz	$+98     	;abs 0xa7ee
    a78e:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    a792:	2d 24       	jz	$+92     	;abs 0xa7ee
    a794:	f1 40 2d 00 	mov.b	#45,	2(r1)	;#0x002d, 0x0002(r1)
    a798:	02 00 
    a79a:	68 b3       	bit.b	#2,	r8	;r3 As==10
    a79c:	11 24       	jz	$+36     	;abs 0xa7c0
    a79e:	b1 e3 1e 00 	xor	#-1,	30(r1)	;r3 As==11, 0x001e(r1)
    a7a2:	b1 e3 20 00 	xor	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    a7a6:	b1 e3 22 00 	xor	#-1,	34(r1)	;r3 As==11, 0x0022(r1)
    a7aa:	b1 e3 24 00 	xor	#-1,	36(r1)	;r3 As==11, 0x0024(r1)
    a7ae:	91 53 1e 00 	inc	30(r1)		;0x001e(r1)
    a7b2:	81 63 20 00 	adc	32(r1)		;0x0020(r1)
    a7b6:	81 63 22 00 	adc	34(r1)		;0x0022(r1)
    a7ba:	81 63 24 00 	adc	36(r1)		;0x0024(r1)
    a7be:	17 3c       	jmp	$+48     	;abs 0xa7ee
    a7c0:	58 b3       	bit.b	#1,	r8	;r3 As==01
    a7c2:	0f 24       	jz	$+32     	;abs 0xa7e2
    a7c4:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    a7c8:	1b 41 20 00 	mov	32(r1),	r11	;0x0020(r1)
    a7cc:	3a e3       	inv	r10		
    a7ce:	3b e3       	inv	r11		
    a7d0:	0e 4a       	mov	r10,	r14	
    a7d2:	0f 4b       	mov	r11,	r15	
    a7d4:	1e 53       	inc	r14		
    a7d6:	0f 63       	adc	r15		
    a7d8:	81 4e 1e 00 	mov	r14,	30(r1)	;0x001e(r1)
    a7dc:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    a7e0:	06 3c       	jmp	$+14     	;abs 0xa7ee
    a7e2:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    a7e6:	3a e3       	inv	r10		
    a7e8:	1a 53       	inc	r10		
    a7ea:	81 4a 1e 00 	mov	r10,	30(r1)	;0x001e(r1)
    a7ee:	c1 43 1b 00 	mov.b	#0,	27(r1)	;r3 As==00, 0x001b(r1)
    a7f2:	68 b3       	bit.b	#2,	r8	;r3 As==10
    a7f4:	6a 24       	jz	$+214    	;abs 0xa8ca
    a7f6:	16 41 1e 00 	mov	30(r1),	r6	;0x001e(r1)
    a7fa:	91 41 20 00 	mov	32(r1),	60(r1)	;0x0020(r1), 0x003c(r1)
    a7fe:	3c 00 
    a800:	18 41 22 00 	mov	34(r1),	r8	;0x0022(r1)
    a804:	14 41 24 00 	mov	36(r1),	r4	;0x0024(r1)
    a808:	07 41       	mov	r1,	r7	
    a80a:	37 50 1a 00 	add	#26,	r7	;#0x001a
    a80e:	09 46       	mov	r6,	r9	
    a810:	91 41 28 00 	mov	40(r1),	50(r1)	;0x0028(r1), 0x0032(r1)
    a814:	32 00 
    a816:	1b 41 28 00 	mov	40(r1),	r11	;0x0028(r1)
    a81a:	8b 10       	swpb	r11		
    a81c:	8b 11       	sxt	r11		
    a81e:	8b 10       	swpb	r11		
    a820:	8b 11       	sxt	r11		
    a822:	81 4b 34 00 	mov	r11,	52(r1)	;0x0034(r1)
    a826:	81 4b 36 00 	mov	r11,	54(r1)	;0x0036(r1)
    a82a:	81 4b 38 00 	mov	r11,	56(r1)	;0x0038(r1)
    a82e:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a832:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a836:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a83a:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a83e:	0c 49       	mov	r9,	r12	
    a840:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    a844:	0e 48       	mov	r8,	r14	
    a846:	0f 44       	mov	r4,	r15	
    a848:	b0 12 a8 ab 	call	#0xaba8	
    a84c:	31 52       	add	#8,	r1	;r2 As==11
    a84e:	0b 4c       	mov	r12,	r11	
    a850:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    a854:	05 34       	jge	$+12     	;abs 0xa860
    a856:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    a85a:	c7 4b 00 00 	mov.b	r11,	0(r7)	;0x0000(r7)
    a85e:	0c 3c       	jmp	$+26     	;abs 0xa878
    a860:	4b 4c       	mov.b	r12,	r11	
    a862:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a866:	03 24       	jz	$+8      	;abs 0xa86e
    a868:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    a86c:	02 3c       	jmp	$+6      	;abs 0xa872
    a86e:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    a872:	4a 5b       	add.b	r11,	r10	
    a874:	c7 4a 00 00 	mov.b	r10,	0(r7)	;0x0000(r7)
    a878:	06 47       	mov	r7,	r6	
    a87a:	36 53       	add	#-1,	r6	;r3 As==11
    a87c:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a880:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a884:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a888:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a88c:	0c 49       	mov	r9,	r12	
    a88e:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    a892:	0e 48       	mov	r8,	r14	
    a894:	0f 44       	mov	r4,	r15	
    a896:	b0 12 82 ab 	call	#0xab82	
    a89a:	31 52       	add	#8,	r1	;r2 As==11
    a89c:	09 4c       	mov	r12,	r9	
    a89e:	81 4d 3c 00 	mov	r13,	60(r1)	;0x003c(r1)
    a8a2:	08 4e       	mov	r14,	r8	
    a8a4:	04 4f       	mov	r15,	r4	
    a8a6:	37 53       	add	#-1,	r7	;r3 As==11
    a8a8:	0c 93       	tst	r12		
    a8aa:	b2 23       	jnz	$-154    	;abs 0xa810
    a8ac:	0d 93       	tst	r13		
    a8ae:	b0 23       	jnz	$-158    	;abs 0xa810
    a8b0:	0e 93       	tst	r14		
    a8b2:	ae 23       	jnz	$-162    	;abs 0xa810
    a8b4:	0f 93       	tst	r15		
    a8b6:	ac 23       	jnz	$-166    	;abs 0xa810
    a8b8:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    a8bc:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    a8c0:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    a8c4:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024(r1)
    a8c8:	6c 3c       	jmp	$+218    	;abs 0xa9a2
    a8ca:	58 b3       	bit.b	#1,	r8	;r3 As==01
    a8cc:	3e 24       	jz	$+126    	;abs 0xa94a
    a8ce:	14 41 1e 00 	mov	30(r1),	r4	;0x001e(r1)
    a8d2:	17 41 20 00 	mov	32(r1),	r7	;0x0020(r1)
    a8d6:	08 41       	mov	r1,	r8	
    a8d8:	38 50 1a 00 	add	#26,	r8	;#0x001a
    a8dc:	19 41 28 00 	mov	40(r1),	r9	;0x0028(r1)
    a8e0:	89 10       	swpb	r9		
    a8e2:	89 11       	sxt	r9		
    a8e4:	89 10       	swpb	r9		
    a8e6:	89 11       	sxt	r9		
    a8e8:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    a8ec:	0d 49       	mov	r9,	r13	
    a8ee:	0e 44       	mov	r4,	r14	
    a8f0:	0f 47       	mov	r7,	r15	
    a8f2:	b0 12 1a ab 	call	#0xab1a	
    a8f6:	0b 4e       	mov	r14,	r11	
    a8f8:	3e 90 0a 00 	cmp	#10,	r14	;#0x000a
    a8fc:	05 34       	jge	$+12     	;abs 0xa908
    a8fe:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    a902:	c8 4b 00 00 	mov.b	r11,	0(r8)	;0x0000(r8)
    a906:	0c 3c       	jmp	$+26     	;abs 0xa920
    a908:	4b 4e       	mov.b	r14,	r11	
    a90a:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a90e:	03 24       	jz	$+8      	;abs 0xa916
    a910:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    a914:	02 3c       	jmp	$+6      	;abs 0xa91a
    a916:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    a91a:	4a 5b       	add.b	r11,	r10	
    a91c:	c8 4a 00 00 	mov.b	r10,	0(r8)	;0x0000(r8)
    a920:	06 48       	mov	r8,	r6	
    a922:	36 53       	add	#-1,	r6	;r3 As==11
    a924:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    a928:	0d 49       	mov	r9,	r13	
    a92a:	0e 44       	mov	r4,	r14	
    a92c:	0f 47       	mov	r7,	r15	
    a92e:	b0 12 e4 aa 	call	#0xaae4	
    a932:	04 4e       	mov	r14,	r4	
    a934:	07 4f       	mov	r15,	r7	
    a936:	38 53       	add	#-1,	r8	;r3 As==11
    a938:	0e 93       	tst	r14		
    a93a:	d0 23       	jnz	$-94     	;abs 0xa8dc
    a93c:	0f 93       	tst	r15		
    a93e:	ce 23       	jnz	$-98     	;abs 0xa8dc
    a940:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    a944:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    a948:	2c 3c       	jmp	$+90     	;abs 0xa9a2
    a94a:	17 41 1e 00 	mov	30(r1),	r7	;0x001e(r1)
    a94e:	08 41       	mov	r1,	r8	
    a950:	38 50 1a 00 	add	#26,	r8	;#0x001a
    a954:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    a958:	0f 47       	mov	r7,	r15	
    a95a:	b0 12 dc aa 	call	#0xaadc	
    a95e:	0d 4f       	mov	r15,	r13	
    a960:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    a964:	05 34       	jge	$+12     	;abs 0xa970
    a966:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    a96a:	c8 4d 00 00 	mov.b	r13,	0(r8)	;0x0000(r8)
    a96e:	0c 3c       	jmp	$+26     	;abs 0xa988
    a970:	4d 4f       	mov.b	r15,	r13	
    a972:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a976:	03 24       	jz	$+8      	;abs 0xa97e
    a978:	7c 40 37 00 	mov.b	#55,	r12	;#0x0037
    a97c:	02 3c       	jmp	$+6      	;abs 0xa982
    a97e:	7c 40 57 00 	mov.b	#87,	r12	;#0x0057
    a982:	4c 5d       	add.b	r13,	r12	
    a984:	c8 4c 00 00 	mov.b	r12,	0(r8)	;0x0000(r8)
    a988:	06 48       	mov	r8,	r6	
    a98a:	36 53       	add	#-1,	r6	;r3 As==11
    a98c:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    a990:	0f 47       	mov	r7,	r15	
    a992:	b0 12 c2 aa 	call	#0xaac2	
    a996:	07 4f       	mov	r15,	r7	
    a998:	38 53       	add	#-1,	r8	;r3 As==11
    a99a:	0f 93       	tst	r15		
    a99c:	db 23       	jnz	$-72     	;abs 0xa954
    a99e:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    a9a2:	b1 90 0a 00 	cmp	#10,	40(r1)	;#0x000a, 0x0028(r1)
    a9a6:	28 00 
    a9a8:	02 24       	jz	$+6      	;abs 0xa9ae
    a9aa:	c1 43 02 00 	mov.b	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    a9ae:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a9b2:	2a 24       	jz	$+86     	;abs 0xaa08
    a9b4:	0f 41       	mov	r1,	r15	
    a9b6:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    a9ba:	81 4f 42 00 	mov	r15,	66(r1)	;0x0042(r1)
    a9be:	1a 41 1c 00 	mov	28(r1),	r10	;0x001c(r1)
    a9c2:	8a 10       	swpb	r10		
    a9c4:	8a 11       	sxt	r10		
    a9c6:	8a 10       	swpb	r10		
    a9c8:	8a 11       	sxt	r10		
    a9ca:	81 4a 44 00 	mov	r10,	68(r1)	;0x0044(r1)
    a9ce:	81 46 46 00 	mov	r6,	70(r1)	;0x0046(r1)
    a9d2:	0a 46       	mov	r6,	r10	
    a9d4:	8a 10       	swpb	r10		
    a9d6:	8a 11       	sxt	r10		
    a9d8:	8a 10       	swpb	r10		
    a9da:	8a 11       	sxt	r10		
    a9dc:	81 4a 48 00 	mov	r10,	72(r1)	;0x0048(r1)
    a9e0:	1c 41 42 00 	mov	66(r1),	r12	;0x0042(r1)
    a9e4:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    a9e8:	1c 81 46 00 	sub	70(r1),	r12	;0x0046(r1)
    a9ec:	1d 71 48 00 	subc	72(r1),	r13	;0x0048(r1)
    a9f0:	2c 83       	decd	r12		
    a9f2:	1c 91 26 00 	cmp	38(r1),	r12	;0x0026(r1)
    a9f6:	0e 2c       	jc	$+30     	;abs 0xaa14
    a9f8:	e1 d3 01 00 	bis.b	#2,	1(r1)	;r3 As==10, 0x0001(r1)
    a9fc:	5e 41 26 00 	mov.b	38(r1),	r14	;0x0026(r1)
    aa00:	4e 8c       	sub.b	r12,	r14	
    aa02:	c1 4e 03 00 	mov.b	r14,	3(r1)	;0x0003(r1)
    aa06:	06 3c       	jmp	$+14     	;abs 0xaa14
    aa08:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    aa0c:	03 24       	jz	$+8      	;abs 0xaa14
    aa0e:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    aa12:	30 00 
    aa14:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa18:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa1c:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    aa20:	0e 46       	mov	r6,	r14	
    aa22:	1e 53       	inc	r14		
    aa24:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    aa28:	b0 12 60 a2 	call	#0xa260	
    aa2c:	21 52       	add	#4,	r1	;r2 As==10
    aa2e:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    aa32:	0d 3c       	jmp	$+28     	;abs 0xaa4e
    aa34:	7f 49       	mov.b	@r9+,	r15	
    aa36:	8f 11       	sxt	r15		
    aa38:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    aa3c:	0e 49       	mov	r9,	r14	
    aa3e:	0e 58       	add	r8,	r14	
    aa40:	19 91 40 00 	cmp	64(r1),	r9	;0x0040(r1)
    aa44:	f7 2b       	jnc	$-16     	;abs 0xaa34
    aa46:	81 49 3e 00 	mov	r9,	62(r1)	;0x003e(r1)
    aa4a:	81 4e 2c 00 	mov	r14,	44(r1)	;0x002c(r1)
    aa4e:	07 43       	clr	r7		
    aa50:	0e 3c       	jmp	$+30     	;abs 0xaa6e
    aa52:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    aa56:	30 00 
    aa58:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    aa5c:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    aa60:	03 3c       	jmp	$+8      	;abs 0xaa68
    aa62:	05 4e       	mov	r14,	r5	
    aa64:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    aa68:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    aa6c:	17 43       	mov	#1,	r7	;r3 As==01
    aa6e:	16 41 40 00 	mov	64(r1),	r6	;0x0040(r1)
    aa72:	6e 46       	mov.b	@r6,	r14	
    aa74:	4e 93       	tst.b	r14		
    aa76:	02 24       	jz	$+6      	;abs 0xaa7c
    aa78:	30 40 44 a4 	br	#0xa444	
    aa7c:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    aa80:	31 50 4a 00 	add	#74,	r1	;#0x004a
    aa84:	34 41       	pop	r4		
    aa86:	35 41       	pop	r5		
    aa88:	36 41       	pop	r6		
    aa8a:	37 41       	pop	r7		
    aa8c:	38 41       	pop	r8		
    aa8e:	39 41       	pop	r9		
    aa90:	3a 41       	pop	r10		
    aa92:	3b 41       	pop	r11		
    aa94:	30 41       	ret			

0000aa96 <puts>:
    aa96:	0b 12       	push	r11		
    aa98:	0b 4f       	mov	r15,	r11	
    aa9a:	6f 4b       	mov.b	@r11,	r15	
    aa9c:	4f 93       	tst.b	r15		
    aa9e:	06 24       	jz	$+14     	;abs 0xaaac
    aaa0:	1b 53       	inc	r11		
    aaa2:	8f 11       	sxt	r15		
    aaa4:	b0 12 38 9e 	call	#0x9e38	
    aaa8:	0f 93       	tst	r15		
    aaaa:	f7 37       	jge	$-16     	;abs 0xaa9a
    aaac:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    aab0:	05 20       	jnz	$+12     	;abs 0xaabc
    aab2:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    aab6:	b0 12 38 9e 	call	#0x9e38	
    aaba:	01 3c       	jmp	$+4      	;abs 0xaabe
    aabc:	3f 43       	mov	#-1,	r15	;r3 As==11
    aabe:	3b 41       	pop	r11		
    aac0:	30 41       	ret			

0000aac2 <__udivhi3>:
    aac2:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    aac6:	0d 4e       	mov	r14,	r13	
    aac8:	0e 43       	clr	r14		
    aaca:	0f 5f       	rla	r15		
    aacc:	0e 6e       	rlc	r14		
    aace:	0e 9d       	cmp	r13,	r14	
    aad0:	02 28       	jnc	$+6      	;abs 0xaad6
    aad2:	0e 8d       	sub	r13,	r14	
    aad4:	1f d3       	bis	#1,	r15	;r3 As==01
    aad6:	1c 83       	dec	r12		
    aad8:	f8 23       	jnz	$-14     	;abs 0xaaca
    aada:	30 41       	ret			

0000aadc <__umodhi3>:
    aadc:	b0 12 c2 aa 	call	#0xaac2	
    aae0:	0f 4e       	mov	r14,	r15	
    aae2:	30 41       	ret			

0000aae4 <__udivsi3>:
    aae4:	0b 12       	push	r11		
    aae6:	0a 12       	push	r10		
    aae8:	09 12       	push	r9		
    aaea:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    aaee:	0a 4c       	mov	r12,	r10	
    aaf0:	0b 4d       	mov	r13,	r11	
    aaf2:	0c 43       	clr	r12		
    aaf4:	0d 43       	clr	r13		
    aaf6:	0e 5e       	rla	r14		
    aaf8:	0f 6f       	rlc	r15		
    aafa:	0c 6c       	rlc	r12		
    aafc:	0d 6d       	rlc	r13		
    aafe:	0d 9b       	cmp	r11,	r13	
    ab00:	06 28       	jnc	$+14     	;abs 0xab0e
    ab02:	02 20       	jnz	$+6      	;abs 0xab08
    ab04:	0c 9a       	cmp	r10,	r12	
    ab06:	03 28       	jnc	$+8      	;abs 0xab0e
    ab08:	0c 8a       	sub	r10,	r12	
    ab0a:	0d 7b       	subc	r11,	r13	
    ab0c:	1e d3       	bis	#1,	r14	;r3 As==01
    ab0e:	19 83       	dec	r9		
    ab10:	f2 23       	jnz	$-26     	;abs 0xaaf6
    ab12:	39 41       	pop	r9		
    ab14:	3a 41       	pop	r10		
    ab16:	3b 41       	pop	r11		
    ab18:	30 41       	ret			

0000ab1a <__umodsi3>:
    ab1a:	b0 12 e4 aa 	call	#0xaae4	
    ab1e:	0e 4c       	mov	r12,	r14	
    ab20:	0f 4d       	mov	r13,	r15	
    ab22:	30 41       	ret			

0000ab24 <__xabi_udivmod64>:
    ab24:	07 12       	push	r7		
    ab26:	06 12       	push	r6		
    ab28:	05 12       	push	r5		
    ab2a:	04 12       	push	r4		
    ab2c:	30 12 40 00 	push	#64		;#0x0040
    ab30:	04 48       	mov	r8,	r4	
    ab32:	05 49       	mov	r9,	r5	
    ab34:	06 4a       	mov	r10,	r6	
    ab36:	07 4b       	mov	r11,	r7	
    ab38:	08 43       	clr	r8		
    ab3a:	09 43       	clr	r9		
    ab3c:	0a 43       	clr	r10		
    ab3e:	0b 43       	clr	r11		
    ab40:	0c 5c       	rla	r12		
    ab42:	0d 6d       	rlc	r13		
    ab44:	0e 6e       	rlc	r14		
    ab46:	0f 6f       	rlc	r15		
    ab48:	08 68       	rlc	r8		
    ab4a:	09 69       	rlc	r9		
    ab4c:	0a 6a       	rlc	r10		
    ab4e:	0b 6b       	rlc	r11		
    ab50:	0b 97       	cmp	r7,	r11	
    ab52:	0e 28       	jnc	$+30     	;abs 0xab70
    ab54:	08 20       	jnz	$+18     	;abs 0xab66
    ab56:	0a 96       	cmp	r6,	r10	
    ab58:	0b 28       	jnc	$+24     	;abs 0xab70
    ab5a:	05 20       	jnz	$+12     	;abs 0xab66
    ab5c:	09 95       	cmp	r5,	r9	
    ab5e:	08 28       	jnc	$+18     	;abs 0xab70
    ab60:	02 20       	jnz	$+6      	;abs 0xab66
    ab62:	08 94       	cmp	r4,	r8	
    ab64:	05 28       	jnc	$+12     	;abs 0xab70
    ab66:	08 84       	sub	r4,	r8	
    ab68:	09 75       	subc	r5,	r9	
    ab6a:	0a 76       	subc	r6,	r10	
    ab6c:	0b 77       	subc	r7,	r11	
    ab6e:	1c d3       	bis	#1,	r12	;r3 As==01
    ab70:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    ab74:	e5 23       	jnz	$-52     	;abs 0xab40
    ab76:	21 53       	incd	r1		
    ab78:	34 41       	pop	r4		
    ab7a:	35 41       	pop	r5		
    ab7c:	36 41       	pop	r6		
    ab7e:	37 41       	pop	r7		
    ab80:	30 41       	ret			

0000ab82 <__udivdi3>:
    ab82:	0b 12       	push	r11		
    ab84:	0a 12       	push	r10		
    ab86:	09 12       	push	r9		
    ab88:	08 12       	push	r8		
    ab8a:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    ab8e:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    ab92:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    ab96:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    ab9a:	b0 12 24 ab 	call	#0xab24	
    ab9e:	38 41       	pop	r8		
    aba0:	39 41       	pop	r9		
    aba2:	3a 41       	pop	r10		
    aba4:	3b 41       	pop	r11		
    aba6:	30 41       	ret			

0000aba8 <__umoddi3>:
    aba8:	0b 12       	push	r11		
    abaa:	0a 12       	push	r10		
    abac:	09 12       	push	r9		
    abae:	08 12       	push	r8		
    abb0:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    abb4:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    abb8:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    abbc:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    abc0:	b0 12 24 ab 	call	#0xab24	
    abc4:	0c 48       	mov	r8,	r12	
    abc6:	0d 49       	mov	r9,	r13	
    abc8:	0e 4a       	mov	r10,	r14	
    abca:	0f 4b       	mov	r11,	r15	
    abcc:	38 41       	pop	r8		
    abce:	39 41       	pop	r9		
    abd0:	3a 41       	pop	r10		
    abd2:	3b 41       	pop	r11		
    abd4:	30 41       	ret			

0000abd6 <__udivmoddi4>:
    abd6:	0b 12       	push	r11		
    abd8:	0a 12       	push	r10		
    abda:	09 12       	push	r9		
    abdc:	08 12       	push	r8		
    abde:	07 12       	push	r7		
    abe0:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    abe4:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    abe8:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    abec:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    abf0:	b0 12 24 ab 	call	#0xab24	
    abf4:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    abf8:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    abfc:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    ac00:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    ac04:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    ac08:	37 41       	pop	r7		
    ac0a:	38 41       	pop	r8		
    ac0c:	39 41       	pop	r9		
    ac0e:	3a 41       	pop	r10		
    ac10:	3b 41       	pop	r11		
    ac12:	30 41       	ret			

0000ac14 <_unexpected_>:
    ac14:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	26 81 26 81 2e a0 d8 95 26 81 3e 88 26 81 da 9e     &.&.....&.>.&...
    fff0:	26 81 d6 9b 26 81 26 81 26 81 ba 9c 26 81 00 80     &...&.&.&...&...
